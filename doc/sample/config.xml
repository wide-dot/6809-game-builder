<configuration>
    <target name="fd">

        <target.default>
            <media.storage>new-engine/config/storage.xml</media.storage>
        </target.default>

        <!-- produit des fichiers d'include pour file en fonction d'une taille et d'un offset de page. Le xml en entrée contient une liste de plugins -->
        <!-- on execute chaque plugin et on evalue la taille, puis on joue le knapsack sur l'ensemble -->
        <!-- l'attribut assetnbfiles leve une erreur si le nb de fichiers produit est différent de l'attendu -->
        <knapsack offset="0x3000" maxsize="0x4000" assertnbfiles="4" in="src/assets/object/list.xml" out="src/assets/object/list.#.xml"/>

        <media storage="fd640 boot">
            <media.out type="fd" file="demo.fd" />
            <media.out type="sap" file="demo.sap" />
            <media.default>
                <file.maxsize>0x4000</file.maxsize>
            </media.default>

            <file section="BOOT" maxsize="0x100">   
                <checksum type="moto.fd640.boot">
                    <lwasm format="raw">
                        <lwasm.define symbol="debug" value="1"/>
                        new-engine/system/to8/bootloader/boot.asm
                    </lwasm>
                </checksum>
            </file>

            <file section="LOAD">
                <lwasm format="raw">
                    new-engine/system/to8/bootloader/loader.asm <!-- a single file -->
                </lwasm>
            </file>

            <directory id="0" section="INDEX"> <!-- retourne à media une liste de binaires à écrire dans des sections : List<objet> contenant deux champs : Section, byte[] (qu'il s'agisse du répertoire ou de fichiers, ce sont les mêmes données -->
                                               <!-- agrège les direntry pour construire le répertoire, remonte ce répertoire+section et les données de fichiers+section -->

                <direntry name="assets.main.title" codec="zx0" linksection="LINK"> <!-- retourne une liste à deux éléments avec deux types d'objects possibles : DirEntryData (byte[] bin) ou SectionData (Section section, byte[] bin) -->
                                                                                    <!-- Directory devra tester le classname avant toute action sur un élément de la liste -->
                                                                                    <!-- DirEntryData et SectionData implémentent la même interface PluginData -->
                                                                                    <!-- compresse les données bin avec le codec (optionel, default none) -->
                                                                                    <!-- effectue la création d'un index loadtimelink avec les données des objets LWObject (optionel, default none) -->
                                                                                    <!-- sauvegarde les données de link sur le media (linksection)-->
                                                                                    <!-- pour sauvegarder les données index loadtimelink, on a besoin des objets distincts -->
                    <file section="DATA">  <!-- retourne une liste à n éléments de LWData (interface PluginData) contenant deux champs : Section section, LWInterface obj (obj est soit de type LWRaw soit LWObject) -->
                                           <!-- controle un fichier (file) fait au max une page de RAM, maxsize est un champ obligatoire de file -->
                                            <!-- dans file ci dessous on retrouve le contenu des données dans une page de RAM (partielle ou entiere) -->
                        <lwasm format="obj"> <!-- concat de tous les fichiers .asm et build unique -->
<!-- TODO params -->        <gfxcomp symbol="img.test">src/assets/object/image/test.png</gfxcomp>     <!-- tout plugin dans lwasm est attendu comme renvoyant une liste de noms de fichier (lwasm va les concat avant d'assembler) -->
                                                                                                      <!-- produce a file in the build dir, with the generated asm code-->
                                                                                                      <!-- return the name of the file -->
                                                                                                      <!-- les index d'image et d'animation seront insérés par le developpeur dans le code par macro (generera la structure) et par etiquettes (voir param du csprite) -->
                            <asm>src/assets/object/01.asm</asm> <!-- nom de fichier ou de répertoire (possibilité de "filter") -->
                        </lwasm>                                                                      
                    </file>
                </direntry>
                <direntry name="assets.main.stage1" codec="zx0" loadtimelink="true">
                    <file section="DATA">
                        <lwasm format="obj">
                            <include>src/assets/object/list.0.xml</include> <!-- permet d'importer des sous définitions (gfxcomp, asm, ...) -->
                        </lwasm>
                    </file>
                </direntry>
                <direntry name="assets.music.stage1">
                    <file section="DATA">
                        <bin>src/assets/music/stage1.bin</bin>
                    </file>
                </direntry>
            </directory>

            <directory fat="dd" name="IMAGEBAS" section="FAT0">
                <direntry name="auto.bat">
                <file block="130">
                    <txt2bas tokenset="to">src/assets/basic/auto.bat</txt2bas> <!-- txt2bas plugin -->
                </file>
                </direntry>
                <direntry name="image.map">
                    <file block="131">
                        <bin>src/assets/image/rtype.map</bin> <!-- bin plugin -->
                    </file>
                </direntry>
            </directory>

<!-- index tell that this is the custom directory type, 0 is the disk number / directory id -->
<!-- txt2bas tokenset : mo, to, nano, coco, dragon. (default is to)-->
<!-- FAT will use block as starting point, will throw an error if block are not contiguous (no more free space) -->

        </media>
    </target>
</configuration>

