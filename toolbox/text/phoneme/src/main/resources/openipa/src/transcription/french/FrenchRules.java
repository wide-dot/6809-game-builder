import java.util.HashMap;
import java.util.Map;

public class Rules {
    public static final String NONE = "";
    public static final String UNKNOWN = "Could not find a transcription rule for this character.";
    public static final String C_BACKVOWEL = "When followed by a back vowel or consonant, 'c' consonants are transcribed as [" + IPA.K + "].";
    public static final String C_FRONTVOWEL = "When followed by a front vowel, 'c' consonants are transcribed as [" + IPA.S + "].";
    public static final String C_SQUIGLE = "All 'ç' consonants are transcribed as [" + IPA.S + "].";
    public static final String CH = "All 'ch' consonant groups are transcribed as [" + IPA.FRICATIVE_C + "].";
    public static final String G_BACKVOWEL = "When followed by a back vowel or consonant, 'g' consonants are transcribed as [" + IPA.G + "].";
    public static final String G_FRONTVOWEL = "When followed by a front vowel, 'g' consonants are transcribed as [" + IPA.FRICATIVE_G + "].";
    public static final String GN = "All 'gn' consonant groups are transcribed as [" + IPA.BACK_SWOOP_N + "].";
    public static final String GU = "All 'gu' letter groups are transcribed as [" + IPA.G + "].";
    public static final String H = "All single 'h' consonants are silent, so they are not transcribed.";
    public static final String J = "All 'j' consonants are transcribed as [" + IPA.FRICATIVE_G + "].";
    public static final String QU = "All 'qu' letter groups are transcribed as [" + IPA.K + "].";
    public static final String R = "Single and double 'r' consonants are transcribed as [" + IPA.FLIPPED_R + "].";
    public static final String Z = "All 'z' consonants are transcribed as is: [" + IPA.Z + "].";
    public static final String S = "Single and double 's' consonants are transcribed as [" + IPA.S + "].";
    public static final String N = "Single and double 'n' consonants are transcribed as [" + IPA.N + "].";
    public static final String M = "Single and double 'm' consonants are transcribed as [" + IPA.M + "].";
    public static final String T = "Single and double 't' consonants are transcribed as [" + IPA.T + "].";
    public static final String L = "Single and double 'l' consonants are transcribed as [" + IPA.L + "].";
    public static final String P = "Single and double 'p' consonants are transcribed as [" + IPA.P + "].";
    public static final String B = "Single and double 'b' consonants are transcribed as [" + IPA.B + "].";
    public static final String F = "Single and double 'f' consonants are transcribed as [" + IPA.F + "].";
    public static final String V = "Single and double 'v' consonants are transcribed as [" + IPA.V + "].";
    public static final String D = "Single and double 'd' consonants are transcribed as [" + IPA.D + "].";
    public static final String INTERVOCALIC_S = "Intervocalic 's' consonants are transcribed as [" + IPA.Z + "].";
    public static final String FINAL_TION = "A 't' consonant in a final '-tion', '-tiel', or '-tieux' letter group is transcribed as [" + IPA.S + "].";
    public static final String TH = "A 'th' consonant group is transcribed as [" + IPA.T + "].";
    public static final String PH = "A 'ph' consonant group is transcribed as [" + IPA.F + "].";
    public static final String B_ST = "A 'b' consonant followed by an 's' or 't' consonant devoices and is transcribed as [" + IPA.P + "].";
    public static final String X_VOWEL = "An 'x' consonant followed by a vowel or an 'h' consonant is transcribed as [" + IPA.G + IPA.Z + "].";
    public static final String X_CONSONANT = "An 'x' consonant followed by a consonant is transcribed as [" + IPA.K + IPA.S + "].";
    public static final String SILENT_FINAL_CONSONANT = "All final consonants besides 'c', 'r', 'f', and 'l' are silent.";
    public static final String SINGLE_A = "Single 'a' vowels are transcribed as [" + IPA.BRIGHT_A + "].";
    public static final String SINGLE_E_DOUBLE_CONSONANT = "Single 'e' vowels followed by two or more consonants are transcribed as [" + IPA.OPEN_E + "].";
    public static final String SINGLE_I_OR_Y = "Single 'i' and 'y' vowels are transcribed as [" + IPA.CLOSED_I + "].";
    public static final String SINGLE_O_PRONOUNCED_CONSONANT = "Single 'o' vowels followed by a pronounced consonant are transcribed as [" + IPA.OPEN_O + "].";
    public static final String O_Z_SOUND = "Single 'o' vowels followed by a [z] sound are transcribed as [" + IPA.CLOSED_O + "].";
    public static final String O_TION = "Single 'o' vowels followed by '-tion' are transcribed as [" + IPA.CLOSED_O + "].";
    public static final String SINGLE_U = "Single 'u' vowels are transcribed as [" + IPA.CLOSED_Y + "].";
    public static final String FINAL_E_ES = "Final '-e' and '-es' groups are transcribed as [" + IPA.SCHWA + "].";
    public static final String GRAVE_A = "All 'à' vowels with a grave accent are transcribed as [" + IPA.BRIGHT_A + "].";
    public static final String CIRCUMFLEX_A = "All 'â' vowels with a circumflex accent are transcribed as [" + IPA.DARK_A + "].";
    public static final String ACUTE_E = "All 'é' vowels with an acute accent are transcribed as [" + IPA.CLOSED_E + "].";
    public static final String ACCENT_E = "All 'è', 'ê', and 'ë' vowels with a grave accent, circumflex accent, or diaeresis are transcribed as [" + IPA.OPEN_E + "].";
    public static final String ACCENT_I = "All 'î' and 'ï' vowels with a circumflex accent or diaeresis are transcribed as [" + IPA.CLOSED_I + "].";
    public static final String ACCENT_O = "All 'ô' vowels with a circumflex accent are transcribed as [" + IPA.CLOSED_O + "].";
    public static final String ACCENT_U = "All 'û' vowels with a circumflex accent are transcribed as [" + IPA.CLOSED_Y + "].";
    public static final String FINAL_AS = "For the purpose of Lyric Diction, all final '-as' letter groups can be transcribed as [" + IPA.BRIGHT_A + "].";
    public static final String FINAL_E_DRZ = "Final '-ed(s)', '-er(s)', and 'ez' endings are transcribed as [" + IPA.CLOSED_E + "].";
    public static final String FINAL_EC = "Final '-ec(s)' endings are transcribed as [" + IPA.OPEN_E + IPA.K + "].";
    public static final String FINAL_EF = "Final '-ef(s)' endings are transcribed as [" + IPA.OPEN_E + IPA.F + "].";
    public static final String FINAL_EL = "Final '-el(s)' endings are transcribed as [" + IPA.OPEN_E + IPA.L + "].";
    public static final String FINAL_ET = "Final '-et(s)' endings are transcribed as [" + IPA.OPEN_E + "]. Note: Final [" + IPA.OPEN_E + "] vowels are typically pronounced a bit more closed than a typical [" + IPA.OPEN_E + "].";
    public static final String FINAL_O_SILENTCONSONANT = "Final 'o' vowels followed by a silent consonant are transcribed as [" + IPA.CLOSED_O + "].";
    public static final String FINAL_IE = "Final '-ie' letter groups are transcribed as [" + IPA.CLOSED_I + "].";
    public static final String FINAL_AI = "Final '-ai' verb endings are transcribed as [" + IPA.CLOSED_E + "]. If this word is not a verb, it is most likely transcribed as [" + IPA.OPEN_E + "].";
    public static final String AI = "All non-final 'ai' and 'aî' vowel clusters are transcribed as [" + IPA.OPEN_E + "].";
    public static final String AY = "All 'ay' vowel clusters are transcribed as [" + IPA.OPEN_E + IPA.J_GLIDE + "].";
    public static final String EI = "All 'ei' vowel clusters are transcribed as [" + IPA.OPEN_E + "].";
    public static final String VOCALIC_HARMONIZATION_E = "This [" + IPA.OPEN_E + "] is transcribed as [(" + IPA.CLOSED_E + ")] because of vocalic harmonization, in which an open vowel gets closed to match a closed vowel later on in the word.";
    public static final String AU_EAU = "'au', 'aux', 'eau', and 'eau' vowel clusters are transcribed as [" + IPA.CLOSED_O + "].";
    public static final String AUR = "'au' vowel clusters followed by an 'r' are transcribed as [" + IPA.OPEN_O + "].";
    public static final String EU_PRONOUNCEDCONSANT = "'eu', 'œ', and 'œu' vowel clusters followed by a pronounced consonant are transcribed as [" + IPA.OPEN_MIXED_O + "].";
    public static final String MEDIAL_UE = "Medial 'ue' vowel clusters are transcribed as [" + IPA.OPEN_MIXED_O + "].";
    public static final String EU_S_VOWEL = "'eu' vowel clusters followed by an 's' and a vowel are transcribed as [" + IPA.CLOSED_MIXED_O + "].";
    public static final String FINAL_EU = "Final '-eu' vowel clusters are transcribed as [" + IPA.CLOSED_MIXED_O + "].";
    public static final String FINAL_EU_SILENTCONSONANT = "Final '-eu' and '-œu' vowel clusters followed by a silent consonant are transcribed as [" + IPA.CLOSED_MIXED_O + "].";
    public static final String VOCALIC_HARMONIZATION_O = "This [" + IPA.OPEN_MIXED_O + "] is transcribed as [(" + IPA.CLOSED_MIXED_O + ")] because of vocalic harmonization, in which an open vowel gets closed to match a closed vowel later on in the word.";
    public static final String OU = "'ou', 'où', and 'oû' vowel clusters are transcribed as [" + IPA.CLOSED_U + "].";
    public static final String IY_VOWEL = "'i' and 'y' vowels followed by a vowel are transcribed as [" + IPA.J_GLIDE + "].";
    public static final String OU_VOWEL = "'ou' vowel clusters followed by a vowel are transcribed as [" + IPA.W_GLIDE + "].";
    public static final String U_VOWEL = "'u' vowels followed by a vowel are transcribed as [" + IPA.Y_GLIDE + "].";
    public static final String MEDIAL_ILL_VOWEL = "Medial 'ill' letter groups preceded by a vowel are transcribed as [" + IPA.J_GLIDE + "].";
    public static final String MEDIAL_ILL_CONSONANT = "Medial 'ill' letter groups preceded by a consonant are transcribed as [" + IPA.CLOSED_I + IPA.J_GLIDE + "].";
    public static final String VOWEL_IL = "'il' letter groups preceded by a vowel are transcribed as [" + IPA.J_GLIDE + "].";
    public static final String OI = "'oi' vowel clusters are transcribed as [" + IPA.W_GLIDE + IPA.BRIGHT_A + "].";
    public static final String OY = "'oy' vowel clusters are transcribed as [" + IPA.W_GLIDE + IPA.BRIGHT_A + IPA.J_GLIDE + "].";
    public static final String RE_PREFIX = "All '-re' prefixes are transcribed as [" + IPA.FLIPPED_R + IPA.SCHWA + "].";
    public static final String INITIAL_REST = "Initial 'rest-' and 'resp-' letter clusters are transcribed with an open [" + IPA.OPEN_E + "].";
    public static final String INTERCONSONANT_SCHWA = "An 'e' vowel in between two consonants and followed by a vowel is transcribed as [" + IPA.SCHWA + "].";
    public static final String FINAL_VERB_ENT = "Final '-ent' verb endings are transcribed as [" + IPA.SCHWA + "]. If this word is not a verb, it is transcribed as [" + IPA.NASAL_A + "].";
    public static final String FAIS_VOWEL = "The verb 'fais' followed by a vowel is transcribed as [" + IPA.F + IPA.SCHWA + IPA.Z + "].";
    public static final String FINAL_VERB_IENT = "Final '-ient' verb endings are transcribed as [" + IPA.J_GLIDE + IPA.NASAL_E + "].";
    public static final String FINAL_VERB_AIENT = "Final '-aient' verb endings are transcribed as [" + IPA.OPEN_E + "].";
    public static final String NASAL_EAMN_CONSONANT = "'am', 'em', 'an', and 'en' letter groups followed by a consonant (except m, n, and h) are transcribed as [" + IPA.NASAL_A + "].";
    public static final String FINAL_AN = "Final 'an' letter groups are transcribed as [" + IPA.NASAL_A + "].";
    public static final String NASAL_ONM_CONSONANT = "'on' and 'om' letter groups followed by a consonant (except m, n, and h) are transcribed as [" + IPA.NASAL_O + "].";
    public static final String FINAL_ONM_CONSONANT = "Final 'on' and 'om' letter groups are transcribed as [" + IPA.NASAL_O + "].";
    public static final String NASAL_AIM = "'aim', 'ain', and 'ein' letter groups that are final or followed by a consonant (except m, n, and h) are transcribed as [" + IPA.NASAL_E + "].";
    public static final String NASAL_IY = "'in', 'im', 'yn', and 'ym' letter groups that are final or followed by a consonant (except m, n, and h) are transcribed as [" + IPA.NASAL_E + "].";
    public static final String FINAL_ENS = "Final -en(s) letter clusters are transcribed as [" + IPA.NASAL_E + "].";
    public static final String NASAL_OIN = "'oin' letter clusters that are final or followed by a consonant are transcribed as [" + IPA.W_GLIDE + IPA.NASAL_E + "]";
    public static final String NASAL_UMN = "'um' and 'un' letter groups that are final or followed by a consonant (except m, n, and h) are transcribed as [" + IPA.NASAL_MIXED_O + "].";
    public static final String DEFAULT_E = "If no other rule applies, transcribe 'e' vowels as [" + IPA.OPEN_E + "].";
    public static final String FINAL_ENT = "Final '-ent' verb endings are transcribed as [" + IPA.SCHWA + "]. If this is not a verb, it should be transcribed as [" + IPA.NASAL_A + "].";
    public static final String ELISION = "The normally transcribed [" + IPA.SCHWA + "] is dropped in this case due to elision, as the following word begins with a vowel. Consult your music to confirm if the schwa should not be pronounced.";
    public static final String S_LIASON = "This normally silent 's' is pronounced as a [" + IPA.Z + "] in this case due to liason, as the following word begins with a vowel. Liason rules are complex, so take this transcription with a grain of salt.";
    public static final String INITIAL_ILRNM = "The consonants in 'ill-', 'irr-', 'inn-', and 'imm-' letter groups are doubled in transcription.";

    private static final Map<String, String> rulesMap = new HashMap<>();

    static {
        rulesMap.put("NONE", NONE);
        rulesMap.put("UNKNOWN", UNKNOWN);
        rulesMap.put("C_BACKVOWEL", C_BACKVOWEL);
        rulesMap.put("C_FRONTVOWEL", C_FRONTVOWEL);
        rulesMap.put("C_SQUIGLE", C_SQUIGLE);
        rulesMap.put("CH", CH);
        rulesMap.put("G_BACKVOWEL", G_BACKVOWEL);
        rulesMap.put("G_FRONTVOWEL", G_FRONTVOWEL);
        rulesMap.put("GN", GN);
        rulesMap.put("GU", GU);
        rulesMap.put("H", H);
        rulesMap.put("J", J);
        rulesMap.put("QU", QU);
        rulesMap.put("R", R);
        rulesMap.put("Z", Z);
        rulesMap.put("S", S);
        rulesMap.put("N", N);
        rulesMap.put("M", M);
        rulesMap.put("T", T);
        rulesMap.put("L", L);
        rulesMap.put("P", P);
        rulesMap.put("B", B);
        rulesMap.put("F", F);
        rulesMap.put("V", V);
        rulesMap.put("D", D);
        rulesMap.put("INTERVOCALIC_S", INTERVOCALIC_S);
        rulesMap.put("FINAL_TION", FINAL_TION);
        rulesMap.put("TH", TH);
        rulesMap.put("PH", PH);
        rulesMap.put("B_ST", B_ST);
        rulesMap.put("X_VOWEL", X_VOWEL);
        rulesMap.put("X_CONSONANT", X_CONSONANT);
        rulesMap.put("SILENT_FINAL_CONSONANT", SILENT_FINAL_CONSONANT);
        rulesMap.put("SINGLE_A", SINGLE_A);
        rulesMap.put("SINGLE_E_DOUBLE_CONSONANT", SINGLE_E_DOUBLE_CONSONANT);
        rulesMap.put("SINGLE_I_OR_Y", SINGLE_I_OR_Y);
        rulesMap.put("SINGLE_O_PRONOUNCED_CONSONANT", SINGLE_O_PRONOUNCED_CONSONANT);
        rulesMap.put("O_Z_SOUND", O_Z_SOUND);
        rulesMap.put("O_TION", O_TION);
        rulesMap.put("SINGLE_U", SINGLE_U);
        rulesMap.put("FINAL_E_ES", FINAL_E_ES);
        rulesMap.put("GRAVE_A", GRAVE_A);
        rulesMap.put("CIRCUMFLEX_A", CIRCUMFLEX_A);
        rulesMap.put("ACUTE_E", ACUTE_E);
        rulesMap.put("ACCENT_E", ACCENT_E);
        rulesMap.put("ACCENT_I", ACCENT_I);
        rulesMap.put("ACCENT_O", ACCENT_O);
        rulesMap.put("ACCENT_U", ACCENT_U);
        rulesMap.put("FINAL_AS", FINAL_AS);
        rulesMap.put("FINAL_E_DRZ", FINAL_E_DRZ);
        rulesMap.put("FINAL_EC", FINAL_EC);
        rulesMap.put("FINAL_EF", FINAL_EF);
        rulesMap.put("FINAL_EL", FINAL_EL);
        rulesMap.put("FINAL_ET", FINAL_ET);
        rulesMap.put("FINAL_O_SILENTCONSONANT", FINAL_O_SILENTCONSONANT);
        rulesMap.put("FINAL_IE", FINAL_IE);
        rulesMap.put("FINAL_AI", FINAL_AI);
        rulesMap.put("AI", AI);
        rulesMap.put("AY", AY);
        rulesMap.put("EI", EI);
        rulesMap.put("VOCALIC_HARMONIZATION_E", VOCALIC_HARMONIZATION_E);
        rulesMap.put("AU_EAU", AU_EAU);
        rulesMap.put("AUR", AUR);
        rulesMap.put("EU_PRONOUNCEDCONSANT", EU_PRONOUNCEDCONSANT);
        rulesMap.put("MEDIAL_UE", MEDIAL_UE);
        rulesMap.put("EU_S_VOWEL", EU_S_VOWEL);
        rulesMap.put("FINAL_EU", FINAL_EU);
        rulesMap.put("FINAL_EU_SILENTCONSONANT", FINAL_EU_SILENTCONSONANT);
        rulesMap.put("VOCALIC_HARMONIZATION_O", VOCALIC_HARMONIZATION_O);
        rulesMap.put("OU", OU);
        rulesMap.put("IY_VOWEL", IY_VOWEL);
        rulesMap.put("OU_VOWEL", OU_VOWEL);
        rulesMap.put("U_VOWEL", U_VOWEL);
        rulesMap.put("MEDIAL_ILL_VOWEL", MEDIAL_ILL_VOWEL);
        rulesMap.put("MEDIAL_ILL_CONSONANT", MEDIAL_ILL_CONSONANT);
        rulesMap.put("VOWEL_IL", VOWEL_IL);
        rulesMap.put("OI", OI);
        rulesMap.put("OY", OY);
        rulesMap.put("RE_PREFIX", RE_PREFIX);
        rulesMap.put("INITIAL_REST", INITIAL_REST);
        rulesMap.put("INTERCONSONANT_SCHWA", INTERCONSONANT_SCHWA);
        rulesMap.put("FINAL_VERB_ENT", FINAL_VERB_ENT);
        rulesMap.put("FAIS_VOWEL", FAIS_VOWEL);
        rulesMap.put("FINAL_VERB_IENT", FINAL_VERB_IENT);
        rulesMap.put("FINAL_VERB_AIENT", FINAL_VERB_AIENT);
        rulesMap.put("NASAL_EAMN_CONSONANT", NASAL_EAMN_CONSONANT);
        rulesMap.put("FINAL_AN", FINAL_AN);
        rulesMap.put("NASAL_ONM_CONSONANT", NASAL_ONM_CONSONANT);
        rulesMap.put("FINAL_ONM_CONSONANT", FINAL_ONM_CONSONANT);
        rulesMap.put("NASAL_AIM", NASAL_AIM);
        rulesMap.put("NASAL_IY", NASAL_IY);
        rulesMap.put("FINAL_ENS", FINAL_ENS);
        rulesMap.put("NASAL_OIN", NASAL_OIN);
        rulesMap.put("NASAL_UMN", NASAL_UMN);
        rulesMap.put("DEFAULT_E", DEFAULT_E);
        rulesMap.put("FINAL_ENT", FINAL_ENT);
        rulesMap.put("ELISION", ELISION);
        rulesMap.put("S_LIASON", S_LIASON);
        rulesMap.put("INITIAL_ILRNM", INITIAL_ILRNM);
    }

    public static String getRule(String key) {
        return rulesMap.getOrDefault(key, "Rule not found");
    }
}


