package com.widedot.m6809.gamebuilder.plugin.direntry;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.configuration2.tree.ImmutableNode;

import com.widedot.m6809.gamebuilder.Settings;
import com.widedot.m6809.gamebuilder.pluginloader.Plugins;
import com.widedot.m6809.gamebuilder.spi.ObjectFactory;
import com.widedot.m6809.gamebuilder.spi.ObjectPluginInterface;
import com.widedot.m6809.gamebuilder.spi.DefaultFactory;
import com.widedot.m6809.gamebuilder.spi.DefaultPluginInterface;
import com.widedot.m6809.gamebuilder.spi.ObjectDataInterface;
import com.widedot.m6809.gamebuilder.spi.configuration.Attribute;
import com.widedot.m6809.gamebuilder.spi.configuration.Defaults;
import com.widedot.m6809.gamebuilder.spi.configuration.Defines;
import com.widedot.m6809.gamebuilder.spi.media.MediaDataInterface;
import com.widedot.m6809.util.zx0.Compressor;
import com.widedot.m6809.util.zx0.Optimizer;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class Processor {
	
//	loader direntry for a file (8, 16 or 24 bytes):
//  -----------------------------------------------------------------------------------------------
//	[0] [0] [00 0000] - [compression 0:none, 1:packed] [load time linker 0:no, 1:yes] [free]
//	[0000 000] [0] [0000 0000] - [track 0-128] [face 0-1] [sector 0-255]
//	[0000 0000] [0000 0000] - [bytes in first sector] [start offset in first sector (0: no sector)]
//	[0000 0000] - [full sectors to read]
//	[0000 0000] - [bytes in last sector (0: no sector)]
//	[0000 0000] - [free]
//
//	Option (8 bytes) - compression
//	[0000 0000 0000 0000] - [offset to compressed data]
//  [0000 0] [000] - [free] [number of delta bytes]
//	[0000 0000] [0000 0000] [0000 0000] [0000 0000] [0000 0000] - [delta byte] * n (max 5)
//	
//  start >>           |------------------| compressed data
//  |---------------------------------|     decompressed data
//  <------------------>              <--->
//        offset                      delta	
//
//	Option (8 bytes) - load time linker data
//	[0000 0000] - [nb of allocation blocs needed]
//	[0000 000] [0] [0000 0000] - [track 0-128] [face 0-1] [sector 0-255]
//	[0000 0000] [0000 0000] - [bytes in first sector] [start offset in first sector (0: no sector)]
//	[0000 0000] - [full sectors to read]
//	[0000 0000] - [bytes in last sector (0: no sector)]
//	[0000 0000] - free
//
//	ids to direntries are generated by blocs of 7 bytes :
//	ex :
//	file.a equ 0 ; no compression, no load time link => 7  bytes = 1 bloc
//	file.b equ 1 ;    compression, no load time link => 14 bytes = 2 bloc
//	file.c equ 3 ;    compression,    load time link => 21 bytes = 3 bloc
//	file.d equ 6
//	...
	
// load time link data
// -----------------------------------------------------------------------------------------------
//
//  file link data :
//  - use allocation/desallocation algorithm to store data
//  - simple buffer for all link data (user defined size)
//  - bloc size for allocation is hardcoded (8 bytes ?)
//  - use an index to access all link data for each file id
//  - the index is a sorted linked list
//  - an index entry is made with an disk id (8 bits) and a file id (16 bits), and point to a page (8 bits) + address location (16 bits)
//
//		- exported constant
//
//		03 0100 :    0002                             ; [nb of elements]
//		             0003                             ; value of symbol 1
//		             0004                             ; value of symbol 2
//
//		- exported
//
//		03 0106 :    0001                             ; [nb of elements]
//		             0586                             ; value of symbol 0 (should add section base address to this value before applying)
//		             
//		- local
//		            
//		03 010A :    0001                             ; [nb of elements]
//		             0162 00C3                        ; [dest offset] [val offset] - example : internal ( I16=195 IS=\02code OP=PLUS ) @ 0162
//
//		- incomplete (8bit)
//		             
//		03 0122 :    0001                             ; [nb of elements]
//		             0014 0000 0003 0001              ; [dest offset] [val offset] [id block] [id ref] - example : external 8bit ( FLAGS=01 ES=ymm.NO_LOOP ) @ 0014
//
//		- incomplete (16bit)
//		             
//		03 0110 :    0002                             ; [nb of elements]
//		             0001 FFF4 0003 0001              ; [dest offset] [val offset] [id block] [id ref] - example : external ( I16=-12 ES=Obj_Index_Address OP=PLUS ) @ 0001
//		             003E 0000 0003 0002              ;                                                            external ( ES=ymm.music.processFrame ) @ 003E
	
	public static final String ZX0 = "zx0";
	
	public static void run(ImmutableNode node, String path, Defaults defaults, Defines defines, MediaDataInterface media) throws Exception {
    	
		log.debug("Processing direntry ...");
		
		String name = Attribute.getString(node, defaults, "name", "direntry.name");
		String section = Attribute.getString(node, defaults, "section", "direntry.section");
		String codec = Attribute.getStringOpt(node, defaults, "codec", "direntry.codec");
		boolean loadtimelink = Attribute.getBoolean(node, defaults, "loadtimelink", "direntry.loadtimelink", false);
		int maxsize = Attribute.getInteger(node, defaults, "maxsize", "directory.maxsize", Integer.MAX_VALUE);
		String gensymbols = Attribute.getStringOpt(node, defaults, "gensymbols", "direntry.gensymbols");
		
		// generate symbols file
		// ... TODO
		
		// binary data
		List<ObjectDataInterface> objects = new ArrayList<ObjectDataInterface>();
		byte[] bin;
		
   		// instanciate plugins
		DefaultFactory defaultFactory;
		ObjectFactory objectFactory;
		
		// instanciate local definitions
		Defaults localDefaults = new Defaults(defaults.values);
		Defines localDefines = new Defines(defines.values);
		
		for (ImmutableNode child : node.getChildren()) {
			String plugin = child.getNodeName();
		
			defaultFactory = Plugins.getDefaultFactory(plugin);
			objectFactory = Plugins.getObjectFactory(plugin);
		    
	        if (defaultFactory == null && objectFactory == null) {
	        	throw new Exception("Unknown Plugin: " + plugin);   	
	        }
		    
	        if (defaultFactory != null) {
			    final DefaultPluginInterface processor = defaultFactory.build();
			    log.debug("Running plugin: {}", defaultFactory.name());
			    processor.run(child, path, localDefaults, localDefines);
			    defines.publish(localDefines);
	        }
	        
	        if (objectFactory != null) {
			    final ObjectPluginInterface processor = objectFactory.build();
			    log.debug("Running plugin: {}", objectFactory.name());
			    objects.add(processor.getObject(child, path, localDefaults, localDefines));
			    defines.publish(localDefines);
	        }
    	}

		// merge all binaries in one byte array
		int length = 0;
		for (ObjectDataInterface obj : objects) {
			length += obj.getBytes().length;
		}
		
	    if (length > maxsize) {
			String m = "data size " + length + " is over maxsize: " + maxsize;
			log.error(m);
			throw new Exception(m);
	    }
		
		bin = new byte[length];
		int o = 0;
		for (ObjectDataInterface obj : objects) {
			byte[] sbin = obj.getBytes();
			for (int i=0; i< sbin.length; i++) {
				bin[o++] = sbin[i];
			}
		}		

		// init direntry
		byte[] direntry = new byte[24];
		
		// apply codec
		boolean compress = false;
		if (codec != null && bin.length > 0) {
			if (codec.equals(ZX0)) {
				
				log.debug("Compress data with zx0");
				int[] delta = { 0 };				
				byte[] cbin = new Compressor().compress(new Optimizer().optimize(bin, 0, maxsize, 4, false), bin, 0, false, false, delta);
				log.debug("Original size: {}, Packed size: {}, Delta: {}", bin.length, cbin.length, delta[0]);
				
				// automatic selection of compressed or uncompressed data
				if (bin.length > cbin.length) {
					bin = cbin;
					compress = true;
					
					// build direntry data (compression bloc)
					int offset = bin.length-cbin.length;
					direntry[7] = (byte) ((offset & 0xff00) >> 8);
					direntry[8] = (byte) (offset & 0xff);
					direntry[9] = (byte) (delta.length & 0x07);
					for (int i = 0; i < delta.length; i++) {
						direntry[i+11] = (byte) (delta[i] & 0xff);
						i++;
					}
					
				} else if (delta[0] > Integer.parseInt(Settings.values.get("direntry.zx0.maxdelta"))) {
					log.warn("Skip compression: delta ({}) is too high.", delta[0]);
				} else {
					log.warn("Skip compression: compressed data size is bigger or equal to original size.");
				}
			}
		}
		
		// write file to media
	    media.write(section, bin);
	    
		// write link data to media
	    if (loadtimelink) {
	    	byte[] linkbin = new byte[0]; // replace by LWOBJ data ... formatted to expected format
	    	media.write(section, linkbin);
	    	
			// build direntry data (link data bloc)
			direntry[15] = (byte)(linkbin.length/Integer.parseInt(Settings.values.get("direntry.linkdata.allocunitsize")));
			// TODO disk location
	    }
	    
		// build direntry data (file bloc)
		if (compress)     direntry[0] = (byte) (direntry[0] | 0b10000000);
		if (loadtimelink) direntry[0] = (byte) (direntry[0] | 0b01000000);
		// TODO disk location

	    //media.addEntry(...);
		
		log.debug("End of processing direntry");
	}
	
}
