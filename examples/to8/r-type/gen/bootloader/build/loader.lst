     0000             (C:\Users\bhrou\gi):00001         assets.gm.title equ 0
     0003             (C:\Users\bhrou\gi):00002         scenes.title equ 3
                      (C:\Users\bhrou\gi):00003         
     0000             (C:\Users\bhrou\gi):00004         loader.DEFAULT_SCENE_DIR_ID    equ 0
     0005             (C:\Users\bhrou\gi):00005         loader.DEFAULT_SCENE_EXEC_PAGE equ 5
     0000             (C:\Users\bhrou\gi):00006         loader.DEFAULT_SCENE_EXEC_ADDR equ 0
     0003             (C:\Users\bhrou\gi):00007         loader.DEFAULT_SCENE_FILE_ID   equ scenes.title
                      (C:\Users\bhrou\gi):00008         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00009         ; FD File loader
                      (C:\Users\bhrou\gi):00010         ; Benoit Rousseau 07/2023
                      (C:\Users\bhrou\gi):00011         ; Based on loader from Prehisto (file load routine)
                      (C:\Users\bhrou\gi):00012         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00013         ; A fully featured boot/file loader
                      (C:\Users\bhrou\gi):00014         ; - zx0 compressed files
                      (C:\Users\bhrou\gi):00015         ; - dynamic link of lwasm obj files
                      (C:\Users\bhrou\gi):00016         ; - scene management
                      (C:\Users\bhrou\gi):00017         ; - directory management
                      (C:\Users\bhrou\gi):00018         ; - multiple floppy management
                      (C:\Users\bhrou\gi):00019         ;
                      (C:\Users\bhrou\gi):00020         ; TODO :
                      (C:\Users\bhrou\gi):00021         ; - gérer le cas des fichiers vides, mais qui ont un fichier de link associé
                      (C:\Users\bhrou\gi):00022         ;   ex: equates exportées
                      (C:\Users\bhrou\gi):00023         ;
                      (C:\Users\bhrou\gi):00024         ; - réfléchir aux points suivants :
                      (C:\Users\bhrou\gi):00025         ;   - gérer le fait qu'on puisse charger plusieurs instances d'un meme fichier à deux endroits différents en RAM, comment identifier celui qu'on "remove" dans le linkdata ? => addr en param in
                      (C:\Users\bhrou\gi):00026         ;
                      (C:\Users\bhrou\gi):00027         ;*******************************************************************************
     FF               (C:\Users\bhrou\gi):00028          SETDP $ff ; prevents lwasm from using direct address mode
                      (C:\Users\bhrou\gi):00029                 INCLUDE "new-engine/constant/types.const.asm"
                      (new-engine/consta):00001          IFNDEF types.const.asm
     0001             (new-engine/consta):00002         types.const.asm  equ 1
                      (new-engine/consta):00003         
     0001             (new-engine/consta):00004         types.BYTE      equ 1
     0008             (new-engine/consta):00005         types.BYTE_BITS equ 8*types.BYTE
     0002             (new-engine/consta):00006         types.WORD      equ 2*types.BYTE
     0010             (new-engine/consta):00007         types.WORD_BITS equ 8*types.WORD
                      (new-engine/consta):00008          ENDC
                      (C:\Users\bhrou\gi):00030                 INCLUDE "engine/macros.asm"
0000                  (engine/macros.asm):00001         _ldd MACRO
                      (engine/macros.asm):00002                 ldd   #((\1)*256)+\2
                      (engine/macros.asm):00003          ENDM
                      (engine/macros.asm):00004          
0000                  (engine/macros.asm):00005         _ldx MACRO
                      (engine/macros.asm):00006                 ldx   #((\1)*256)+\2
                      (engine/macros.asm):00007          ENDM
                      (engine/macros.asm):00008          
0000                  (engine/macros.asm):00009         _ldy MACRO
                      (engine/macros.asm):00010                 ldy   #((\1)*256)+\2
                      (engine/macros.asm):00011          ENDM
                      (engine/macros.asm):00012          
0000                  (engine/macros.asm):00013         _ldu MACRO
                      (engine/macros.asm):00014                 ldu   #((\1)*256)+\2
                      (engine/macros.asm):00015          ENDM  
                      (engine/macros.asm):00016          
0000                  (engine/macros.asm):00017         _lds MACRO
                      (engine/macros.asm):00018                 lds   #((\1)*256)+\2
                      (engine/macros.asm):00019          ENDM   
                      (engine/macros.asm):00020          
0000                  (engine/macros.asm):00021         _SetCartPageA MACRO
                      (engine/macros.asm):00022          IFDEF T2
                      (engine/macros.asm):00023                 jsr   SetCartPageA
                      (engine/macros.asm):00024          ELSE
                      (engine/macros.asm):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (engine/macros.asm):00026          ENDC
                      (engine/macros.asm):00027          ENDM      
                      (engine/macros.asm):00028          
0000                  (engine/macros.asm):00029         _GetCartPageA MACRO
                      (engine/macros.asm):00030          IFDEF T2
                      (engine/macros.asm):00031                 jsr   GetCartPageA
                      (engine/macros.asm):00032          ELSE
                      (engine/macros.asm):00033                 lda   $E7E6
                      (engine/macros.asm):00034          ENDC
                      (engine/macros.asm):00035          ENDM
                      (engine/macros.asm):00036         
0000                  (engine/macros.asm):00037         _SetCartPageB MACRO
                      (engine/macros.asm):00038          IFDEF T2
                      (engine/macros.asm):00039                 jsr   SetCartPageB
                      (engine/macros.asm):00040          ELSE
                      (engine/macros.asm):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (engine/macros.asm):00042          ENDC
                      (engine/macros.asm):00043          ENDM      
                      (engine/macros.asm):00044          
0000                  (engine/macros.asm):00045         _GetCartPageB MACRO
                      (engine/macros.asm):00046          IFDEF T2
                      (engine/macros.asm):00047                 jsr   GetCartPageB
                      (engine/macros.asm):00048          ELSE
                      (engine/macros.asm):00049                 ldb   $E7E6
                      (engine/macros.asm):00050          ENDC
                      (engine/macros.asm):00051          ENDM     
                      (engine/macros.asm):00052         
0000                  (engine/macros.asm):00053         _RunObjectSwap MACRO
                      (engine/macros.asm):00054                 ; param 1 : ObjID_
                      (engine/macros.asm):00055                 ; param 2 : Object data RAM address
                      (engine/macros.asm):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (engine/macros.asm):00057                 lda   Obj_Index_Page+\1
                      (engine/macros.asm):00058                 sta   PSR_Page   
                      (engine/macros.asm):00059                 ldd   Obj_Index_Address+2*\1
                      (engine/macros.asm):00060                 std   PSR_Address       
                      (engine/macros.asm):00061                 ldu   \2             
                      (engine/macros.asm):00062                 jsr   RunPgSubRoutine
                      (engine/macros.asm):00063          ENDM    
                      (engine/macros.asm):00064         
0000                  (engine/macros.asm):00065         _RunObjectSwapRoutine MACRO
                      (engine/macros.asm):00066                 ; param 1 : ObjID_
                      (engine/macros.asm):00067                 ; param 2 : Object routine
                      (engine/macros.asm):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (engine/macros.asm):00069                 lda   Obj_Index_Page+\1   
                      (engine/macros.asm):00070                 sta   PSR_Page   
                      (engine/macros.asm):00071                 ldd   Obj_Index_Address+2*\1
                      (engine/macros.asm):00072                 std   PSR_Address       
                      (engine/macros.asm):00073                 ldb   \2        
                      (engine/macros.asm):00074                 jsr   RunPgSubRoutine
                      (engine/macros.asm):00075          ENDM 
                      (engine/macros.asm):00076          
0000                  (engine/macros.asm):00077         _MountObject MACRO 
                      (engine/macros.asm):00078                 ; param 1 : ObjID_
                      (engine/macros.asm):00079                 ; manual mount of an object from the resident page 1
                      (engine/macros.asm):00080                 lda   Obj_Index_Page+\1
                      (engine/macros.asm):00081                 _SetCartPageA
                      (engine/macros.asm):00082                 ldx   Obj_Index_Address+2*\1
                      (engine/macros.asm):00083          ENDM
                      (engine/macros.asm):00084         
0000                  (engine/macros.asm):00085         _RunObject MACRO 
                      (engine/macros.asm):00086                 ; param 1 : ObjID_
                      (engine/macros.asm):00087                 ; param 2 : Object data RAM address
                      (engine/macros.asm):00088                 ; manual launch of an object from the resident page 1
                      (engine/macros.asm):00089                 _MountObject \1
                      (engine/macros.asm):00090                 ldu   \2        
                      (engine/macros.asm):00091                 jsr   ,x
                      (engine/macros.asm):00092          ENDM
                      (engine/macros.asm):00093         
0000                  (engine/macros.asm):00094         _RunObjectRoutineA MACRO 
                      (engine/macros.asm):00095                 ; param 1 : ObjID_
                      (engine/macros.asm):00096                 ; param 2 : Object routine
                      (engine/macros.asm):00097                 ; manual launch of an object from the resident page 1
                      (engine/macros.asm):00098                 ; this object does not need or have a data structure for this routine
                      (engine/macros.asm):00099                 _MountObject \1
                      (engine/macros.asm):00100                 lda   \2        
                      (engine/macros.asm):00101                 jsr   ,x
                      (engine/macros.asm):00102          ENDM
                      (engine/macros.asm):00103         
0000                  (engine/macros.asm):00104         _RunObjectRoutineB MACRO 
                      (engine/macros.asm):00105                 ; param 1 : ObjID_
                      (engine/macros.asm):00106                 ; param 2 : Object routine
                      (engine/macros.asm):00107                 ; manual launch of an object from the resident page 1
                      (engine/macros.asm):00108                 ; this object does not need or have a data structure for this routine
                      (engine/macros.asm):00109                 _MountObject \1
                      (engine/macros.asm):00110                 ldb   \2        
                      (engine/macros.asm):00111                 jsr   ,x
                      (engine/macros.asm):00112          ENDM
                      (engine/macros.asm):00113         
0000                  (engine/macros.asm):00114         _SwitchScreenBuffer MACRO
                      (engine/macros.asm):00115                 ldb   $E7E5
                      (engine/macros.asm):00116                 eorb  #1                       ; switch btw page 2 and 3
                      (engine/macros.asm):00117                 orb   #$02
                      (engine/macros.asm):00118                 stb   $E7E5
                      (engine/macros.asm):00119          ENDM
                      (engine/macros.asm):00120         
0000                  (engine/macros.asm):00121         _asld MACRO
                      (engine/macros.asm):00122                 aslb
                      (engine/macros.asm):00123                 rola
                      (engine/macros.asm):00124          ENDM        
                      (engine/macros.asm):00125          
0000                  (engine/macros.asm):00126         _asrd MACRO
                      (engine/macros.asm):00127                 asra
                      (engine/macros.asm):00128                 rorb
                      (engine/macros.asm):00129          ENDM      
                      (engine/macros.asm):00130          
0000                  (engine/macros.asm):00131         _lsld MACRO
                      (engine/macros.asm):00132                 lslb
                      (engine/macros.asm):00133                 rola
                      (engine/macros.asm):00134          ENDM        
                      (engine/macros.asm):00135          
0000                  (engine/macros.asm):00136         _lsrd MACRO
                      (engine/macros.asm):00137                 lsra
                      (engine/macros.asm):00138                 rorb
                      (engine/macros.asm):00139          ENDM
                      (engine/macros.asm):00140          
0000                  (engine/macros.asm):00141         _rold MACRO
                      (engine/macros.asm):00142                 rolb
                      (engine/macros.asm):00143                 rola
                      (engine/macros.asm):00144          ENDM    
                      (engine/macros.asm):00145          
0000                  (engine/macros.asm):00146         _rord MACRO
                      (engine/macros.asm):00147                 rora
                      (engine/macros.asm):00148                 rorb
                      (engine/macros.asm):00149          ENDM
                      (engine/macros.asm):00150         
0000                  (engine/macros.asm):00151         _negd MACRO
                      (engine/macros.asm):00152                 nega
                      (engine/macros.asm):00153                 negb
                      (engine/macros.asm):00154                 sbca  #0
                      (engine/macros.asm):00155          ENDM
                      (engine/macros.asm):00156         
0000                  (engine/macros.asm):00157         _cba MACRO
                      (engine/macros.asm):00158                 pshs  b
                      (engine/macros.asm):00159                 cmpa  ,s+
                      (engine/macros.asm):00160          ENDM
                      (engine/macros.asm):00161         
0000                  (engine/macros.asm):00162         _aba MACRO
                      (engine/macros.asm):00163                 pshs  b
                      (engine/macros.asm):00164                 adda  ,s+
                      (engine/macros.asm):00165          ENDM
                      (engine/macros.asm):00166         
0000                  (engine/macros.asm):00167         _sba MACRO
                      (engine/macros.asm):00168                 pshs  b
                      (engine/macros.asm):00169                 suba  ,s+
                      (engine/macros.asm):00170          ENDM
                      (engine/macros.asm):00171         
0000                  (engine/macros.asm):00172         _cab MACRO
                      (engine/macros.asm):00173                 pshs  a
                      (engine/macros.asm):00174                 cmpb  ,s+
                      (engine/macros.asm):00175          ENDM
                      (engine/macros.asm):00176         
0000                  (engine/macros.asm):00177         _aab MACRO
                      (engine/macros.asm):00178                 pshs  a
                      (engine/macros.asm):00179                 addb  ,s+
                      (engine/macros.asm):00180          ENDM
                      (engine/macros.asm):00181         
0000                  (engine/macros.asm):00182         _sab MACRO
                      (engine/macros.asm):00183                 pshs  a
                      (engine/macros.asm):00184                 subb  ,s+
                      (engine/macros.asm):00185          ENDM
                      (engine/macros.asm):00186         
0000                  (engine/macros.asm):00187         _breakpoint MACRO
                      (engine/macros.asm):00188          IFDEF DEBUG
                      (engine/macros.asm):00189                 pshs  CC
                      (engine/macros.asm):00190                 sta   >$ffff
                      (engine/macros.asm):00191                 puls  CC
                      (engine/macros.asm):00192          ENDC
                      (engine/macros.asm):00193          ENDM
                      (C:\Users\bhrou\gi):00031                 INCLUDE "engine/constants.asm"
                      (engine/constants.):00001         * ---------------------------------------------------------------------------
                      (engine/constants.):00002         * Constants
                      (engine/constants.):00003         *
                      (engine/constants.):00004         * Naming convention
                      (engine/constants.):00005         * -----------------
                      (engine/constants.):00006         * - lower case
                      (engine/constants.):00007         * - underscore-separated names
                      (engine/constants.):00008         *
                      (engine/constants.):00009         * ---------------------------------------------------------------------------
                      (engine/constants.):00010         
                      (engine/constants.):00011          ifndef constants.asm
     0001             (engine/constants.):00012         constants.asm equ 1
                      (engine/constants.):00013         
                      (engine/constants.):00014         * ===========================================================================
                      (engine/constants.):00015         * TO8 Registers
                      (engine/constants.):00016         * ===========================================================================
                      (engine/constants.):00017         
                      (engine/constants.):00018         ; Disk routine registers (ROM)
                      (engine/constants.):00019         
     6049             (engine/constants.):00020         dk_drive                      equ $6049
     604A             (engine/constants.):00021         dk_track                      equ $604A
     604B             (engine/constants.):00022         dk_track_lsb                  equ $604B
     604C             (engine/constants.):00023         dk_sector                     equ $604C
     604F             (engine/constants.):00024         dk_write_location             equ $604F
                      (engine/constants.):00025         
                      (engine/constants.):00026         * ===========================================================================
                      (engine/constants.):00027         * Globals
                      (engine/constants.):00028         * ===========================================================================
                      (engine/constants.):00029         
                      (engine/constants.):00030         ; WARNING - BuildSprite allow to cross $A000 limit by glb_camera_x_offset/4
                      (engine/constants.):00031         ; Graphics routines using S to write may cross by 12 bytes
                      (engine/constants.):00032         ; be sure to compile with enough margin here
     9FF4             (engine/constants.):00033         glb_ram_end                   equ $A000-12
                      (engine/constants.):00034         
                      (engine/constants.):00035         ; compilated sprite
     9FF2             (engine/constants.):00036         glb_register_s                equ glb_ram_end-2             ; reverved space to store S from ROM routines
                      (engine/constants.):00037         
                      (engine/constants.):00038         ; DrawSprites
     9FF0             (engine/constants.):00039         glb_screen_location_1         equ glb_register_s-2          ; start address for rendering of current sprite Part1     
     9FEE             (engine/constants.):00040         glb_screen_location_2         equ glb_screen_location_1-2   ; start address for rendering of current sprite Part2 (DEPENDENCY Must follow Part1)
                      (engine/constants.):00041         
     9FEC             (engine/constants.):00042         glb_camera_height             equ glb_screen_location_2-2
     9FEA             (engine/constants.):00043         glb_camera_width              equ glb_camera_height-2
     9FE8             (engine/constants.):00044         glb_camera_x_pos_coarse       equ glb_camera_width-2        ; ((glb_camera_x_pos - 64) / 64) * 64
     9FE6             (engine/constants.):00045         glb_camera_x_pos              equ glb_camera_x_pos_coarse-2 ; 16.8 camera x position in palyfield coordinates
     9FE5             (engine/constants.):00046         glb_camera_x_sub              equ glb_camera_x_pos-1        ; 
     9FE4             (engine/constants.):00047         glb_camera_y_pos              equ glb_camera_x_pos-2        ; 16.8 camera y position in palyfield coordinates
     9FE3             (engine/constants.):00048         glb_camera_y_sub              equ glb_camera_y_pos-1        ;
     9FE2             (engine/constants.):00049         glb_camera_x_min_pos          equ glb_camera_y_pos-2
     9FE0             (engine/constants.):00050         glb_camera_y_min_pos          equ glb_camera_x_min_pos-2
     9FDE             (engine/constants.):00051         glb_camera_x_max_pos          equ glb_camera_y_min_pos-2
     9FDC             (engine/constants.):00052         glb_camera_y_max_pos          equ glb_camera_x_max_pos-2
     9FDA             (engine/constants.):00053         glb_camera_x_offset           equ glb_camera_y_max_pos-2
     9FD8             (engine/constants.):00054         glb_camera_y_offset           equ glb_camera_x_offset-2
     9FD7             (engine/constants.):00055         glb_force_sprite_refresh      equ glb_camera_y_offset-1
     9FD6             (engine/constants.):00056         glb_camera_move               equ glb_force_sprite_refresh-1
     9FD5             (engine/constants.):00057         glb_alphaTiles                equ glb_camera_move-1
     9FD4             (engine/constants.):00058         glb_timer_second              equ glb_alphaTiles-1
     9FD3             (engine/constants.):00059         glb_timer_minute              equ glb_timer_second-1
     9FD3             (engine/constants.):00060         glb_timer                     equ glb_timer_minute
     9FD2             (engine/constants.):00061         glb_timer_frame               equ glb_timer-1
                      (engine/constants.):00062         
                      (engine/constants.):00063         ; BankSwitch
     9FD1             (engine/constants.):00064         glb_Page                      equ glb_timer_frame-1
     9FB3             (engine/constants.):00065         dp_engine                     equ glb_Page-30  ; engine routines tmp var space
     9F97             (engine/constants.):00066         dp_extreg                     equ dp_engine-28 ; extra register space (user and engine common)
     9F00             (engine/constants.):00067         dp                            equ $9F00        ; user space (149 bytes max)
     9F00             (engine/constants.):00068         glb_system_stack              equ dp
                      (engine/constants.):00069         
                      (engine/constants.):00070         ; generic direct page extra registers
                      (engine/constants.):00071         ; -----------------------------------
     9F97             (engine/constants.):00072         glb_d0   equ   dp_extreg
     9F98             (engine/constants.):00073         glb_d0_b equ   dp_extreg+1
                      (engine/constants.):00074         ; must be a free byte here for 24bits computation
     9F9A             (engine/constants.):00075         glb_d1   equ   dp_extreg+3
     9F9B             (engine/constants.):00076         glb_d1_b equ   dp_extreg+4
                      (engine/constants.):00077         ; must be a free byte here for 24bits computation
     9F9D             (engine/constants.):00078         glb_d2   equ   dp_extreg+6
     9F9E             (engine/constants.):00079         glb_d2_b equ   dp_extreg+7
                      (engine/constants.):00080         ; must be a free byte here for 24bits computation
     9FA0             (engine/constants.):00081         glb_d3   equ   dp_extreg+9
     9FA1             (engine/constants.):00082         glb_d3_b equ   dp_extreg+10
                      (engine/constants.):00083         ; must be a free byte here for 24bits computation
     9FA3             (engine/constants.):00084         glb_d4   equ   dp_extreg+12
     9FA4             (engine/constants.):00085         glb_d4_b equ   dp_extreg+13
     9FA5             (engine/constants.):00086         glb_d5   equ   dp_extreg+14
     9FA6             (engine/constants.):00087         glb_d5_b equ   dp_extreg+15
     9FA7             (engine/constants.):00088         glb_d6   equ   dp_extreg+16
     9FA8             (engine/constants.):00089         glb_d6_b equ   dp_extreg+17
     9FA9             (engine/constants.):00090         glb_a0   equ   dp_extreg+18
     9FAA             (engine/constants.):00091         glb_a0_b equ   dp_extreg+19
     9FAB             (engine/constants.):00092         glb_a1   equ   dp_extreg+20
     9FAC             (engine/constants.):00093         glb_a1_b equ   dp_extreg+21
     9FAD             (engine/constants.):00094         glb_a2   equ   dp_extreg+22
     9FAE             (engine/constants.):00095         glb_a2_b equ   dp_extreg+23
     9FAF             (engine/constants.):00096         glb_a3   equ   dp_extreg+24
     9FB0             (engine/constants.):00097         glb_a3_b equ   dp_extreg+25
     9FB1             (engine/constants.):00098         glb_a4   equ   dp_extreg+26
     9FB2             (engine/constants.):00099         glb_a4_b equ   dp_extreg+27
                      (engine/constants.):00100         
                      (engine/constants.):00101         * ===========================================================================
                      (engine/constants.):00102         * Display Constants
                      (engine/constants.):00103         * ===========================================================================
                      (engine/constants.):00104         
     00A0             (engine/constants.):00105         screen_width                  equ 160             ; in pixel
     00C8             (engine/constants.):00106         screen_height                 equ 200             ; in pixel
     001C             (engine/constants.):00107         screen_top                    equ (256-200)/2     ; in pixel
     00E3             (engine/constants.):00108         screen_bottom                 equ screen_top+199  ; in pixel
     0030             (engine/constants.):00109         screen_left                   equ (256-160)/2     ; in pixel
     00CF             (engine/constants.):00110         screen_right                  equ screen_left+159 ; in pixel
     0008             (engine/constants.):00111         nb_priority_levels            equ 8               ; number of priority levels (need code change if modified)
                      (engine/constants.):00112         
                      (engine/constants.):00113         * ===========================================================================
                      (engine/constants.):00114         * Images Constants
                      (engine/constants.):00115         * ===========================================================================
                      (engine/constants.):00116         
     0004             (engine/constants.):00117         image_x_size                  equ 4
     0005             (engine/constants.):00118         image_y_size                  equ 5
     0006             (engine/constants.):00119         image_center_offset           equ 6
                      (engine/constants.):00120         
     0004             (engine/constants.):00121         image_subset_x1_offset        equ 4
     0005             (engine/constants.):00122         image_subset_y1_offset        equ 5
                      (engine/constants.):00123         
     0000             (engine/constants.):00124         page_draw_routine             equ 0
     0001             (engine/constants.):00125         draw_routine                  equ 1
     0003             (engine/constants.):00126         page_erase_routine            equ 3
     0004             (engine/constants.):00127         erase_routine                 equ 4
     0006             (engine/constants.):00128         erase_nb_cell                 equ 6
                      (engine/constants.):00129         
                      (engine/constants.):00130         * ===========================================================================
                      (engine/constants.):00131         * Sound Constants
                      (engine/constants.):00132         * ===========================================================================
                      (engine/constants.):00133         
     0000             (engine/constants.):00134         sound_page        equ 0
     0001             (engine/constants.):00135         sound_start_addr  equ 1
     0003             (engine/constants.):00136         sound_end_addr    equ 3
     0005             (engine/constants.):00137         sound_meta_size   equ 5
                      (engine/constants.):00138         
                      (engine/constants.):00139         * ===========================================================================
                      (engine/constants.):00140         * Object Constants
                      (engine/constants.):00141         * ===========================================================================
                      (engine/constants.):00142         
                      (engine/constants.):00143         ; ext_variables_size should be declared in game source code
                      (engine/constants.):00144         
     0026             (engine/constants.):00145         object_base_size              equ 38  ; the size of an object without rsvd and ext_vars
                      (engine/constants.):00146          ifndef OverlayMode
     003B             (engine/constants.):00147         object_rsvd_size              equ 59
                      (engine/constants.):00148          else
0000                  (engine/constants.):00149         object_rsvd_size              equ 5
                      (engine/constants.):00150          endc
                      (engine/constants.):00151         
     ????             (engine/constants.):00152         object_rsvd                   equ object_base_size+ext_variables_size
     ????             (engine/constants.):00153         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     ????             (engine/constants.):00154         next_object                   equ object_size
     0026             (engine/constants.):00155         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (engine/constants.):00156         
     0000             (engine/constants.):00157         id                            equ 0   ; reference to object model id (ObjID_) (0: free slot)
     0001             (engine/constants.):00158         subtype                       equ 1   ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0001             (engine/constants.):00159         subtype_w                     equ 1   ; reference to object subtype (Sub_) takes 2 bytes and overlap render_flags DEPENDENCY subtype must follow id
     0002             (engine/constants.):00160         render_flags                  equ 2
     0003             (engine/constants.):00161         run_object_prev               equ 3   ; previous object to update when deleting current object
     0005             (engine/constants.):00162         run_object_next               equ 5   ; next object to run by RunObjects
                      (engine/constants.):00163         
                      (engine/constants.):00164          ifndef OverlayMode
                      (engine/constants.):00165         * --- render_flags bitfield variables --- background erase pack
     0001             (engine/constants.):00166         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (engine/constants.):00167         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
     0004             (engine/constants.):00168         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
     0008             (engine/constants.):00169         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (engine/constants.):00170         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (engine/constants.):00171         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
     0040             (engine/constants.):00172         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (engine/constants.):00173         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (engine/constants.):00174          else
                      (engine/constants.):00175         ; --- render_flags bitfield variables --- overlay pack
0000                  (engine/constants.):00176         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
0000                  (engine/constants.):00177         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
                      (engine/constants.):00178         
0000                  (engine/constants.):00179         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
0000                  (engine/constants.):00180         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
0000                  (engine/constants.):00181         render_no_range_ctrl_mask     equ $20 ; (bit 5) tell display engine to skip out of range controls (this may lead to memory corruption BEWARE)
0000                  (engine/constants.):00182         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
0000                  (engine/constants.):00183         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (engine/constants.):00184          endc
                      (engine/constants.):00185         
     0007             (engine/constants.):00186         priority                      equ 7           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0008             (engine/constants.):00187         anim                          equ 8  ; and 9  ; reference to current animation (Ani_)
     000A             (engine/constants.):00188         prev_anim                     equ 10 ; and 11 ; reference to previous animation (Ani_)
     000A             (engine/constants.):00189         sub_anim                      equ 10 ; and 11 ; reference to sub animation
     000C             (engine/constants.):00190         anim_frame                    equ 12          ; index of current frame in animation
     000D             (engine/constants.):00191         anim_frame_duration           equ 13          ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000E             (engine/constants.):00192         anim_flags                    equ 14          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (engine/constants.):00193         
                      (engine/constants.):00194         * --- anim_flags bitfield variables ---
     0004             (engine/constants.):00195         anim_link_mask                equ $04 ; (bit 2) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (engine/constants.):00196         
     000E             (engine/constants.):00197         status_flags                  equ 14          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (engine/constants.):00198         
                      (engine/constants.):00199         * --- status_flags bitfield variables ---
     0001             (engine/constants.):00200         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (engine/constants.):00201         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (engine/constants.):00202         
     0010             (engine/constants.):00203         image_set                     equ 16 ; and 17 ; reference to current image (Img_) (0000 if no image)
     0012             (engine/constants.):00204         x_pos                         equ 18 ; and 19 ; x playfield coordinate
     0014             (engine/constants.):00205         x_sub                         equ 20          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0015             (engine/constants.):00206         y_pos                         equ 21 ; and 22 ; y playfield coordinate
     0017             (engine/constants.):00207         y_sub                         equ 23          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0018             (engine/constants.):00208         xy_pixel                      equ 24          ; x and y screen coordinate
     0018             (engine/constants.):00209         x_pixel                       equ 24          ; x screen coordinate
     0019             (engine/constants.):00210         y_pixel                       equ 25          ; y screen coordinate, must follow x_pixel
     001A             (engine/constants.):00211         x_vel                         equ 26 ; and 27 ; s8.8 horizontal velocity
     001C             (engine/constants.):00212         y_vel                         equ 28 ; and 29 ; s8.8 vertical velocity
     001E             (engine/constants.):00213         x_acl                         equ 30 ; and 31 ; s8.8 horizontal gravity
     0020             (engine/constants.):00214         y_acl                         equ 32 ; and 33 ; s8.8 vertical gravity
     0022             (engine/constants.):00215         routine                       equ 34          ; index of current object routine
     0023             (engine/constants.):00216         routine_secondary             equ 35          ; index of current secondary routine
     0024             (engine/constants.):00217         routine_tertiary              equ 36          ; index of current tertiary routine
     0025             (engine/constants.):00218         routine_quaternary            equ 37          ; index of current quaternary routine
                      (engine/constants.):00219         
                      (engine/constants.):00220          ifndef OverlayMode
                      (engine/constants.):00221         * ---------------------------------------------------------------------------
                      (engine/constants.):00222         * reserved variables (read/write by engine)
                      (engine/constants.):00223         
     ????             (engine/constants.):00224         rsv_render_flags              equ object_rsvd
                      (engine/constants.):00225         
                      (engine/constants.):00226         * --- rsv_render_flags bitfield variables ---
     0001             (engine/constants.):00227         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
     0002             (engine/constants.):00228         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
     0004             (engine/constants.):00229         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
     0008             (engine/constants.):00230         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
     0080             (engine/constants.):00231         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (engine/constants.):00232         
     ????             (engine/constants.):00233         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
     ????             (engine/constants.):00234         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
     ????             (engine/constants.):00235         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
     ????             (engine/constants.):00236         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
     ????             (engine/constants.):00237         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
     ????             (engine/constants.):00238         rsv_page_draw_routine         equ object_rsvd+9 ; b
     ????             (engine/constants.):00239         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
     ????             (engine/constants.):00240         rsv_page_erase_routine        equ object_rsvd+12 ; b
     ????             (engine/constants.):00241         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
     ????             (engine/constants.):00242         rsv_xy1_pixel                 equ object_rsvd+15 ;
     ????             (engine/constants.):00243         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
     ????             (engine/constants.):00244         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
     ????             (engine/constants.):00245         rsv_xy2_pixel                 equ object_rsvd+17 ;
     ????             (engine/constants.):00246         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
     ????             (engine/constants.):00247         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (engine/constants.):00248         
                      (engine/constants.):00249         * ---------------------------------------------------------------------------
                      (engine/constants.):00250         * reserved variables (engine) - buffer specific
                      (engine/constants.):00251         
     ????             (engine/constants.):00252         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
     ????             (engine/constants.):00253         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
     ????             (engine/constants.):00254         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (engine/constants.):00255         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (engine/constants.):00256         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and +25 ; reference to previous image in video buffer 0 w
     ????             (engine/constants.):00257         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
     ????             (engine/constants.):00258         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
     ????             (engine/constants.):00259         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and +29 ; w
     ????             (engine/constants.):00260         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
     ????             (engine/constants.):00261         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
     ????             (engine/constants.):00262         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
     ????             (engine/constants.):00263         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00264         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
     ????             (engine/constants.):00265         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
     ????             (engine/constants.):00266         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
     ????             (engine/constants.):00267         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
     ????             (engine/constants.):00268         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
     ????             (engine/constants.):00269         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
     ????             (engine/constants.):00270         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (engine/constants.):00271         * --- rsv_prev_render_flags_0 bitfield variables ---
     0001             (engine/constants.):00272         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
     0080             (engine/constants.):00273         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (engine/constants.):00274         
     ????             (engine/constants.):00275         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
     ????             (engine/constants.):00276         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
     ????             (engine/constants.):00277         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (engine/constants.):00278         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (engine/constants.):00279         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
     ????             (engine/constants.):00280         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
     ????             (engine/constants.):00281         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
     ????             (engine/constants.):00282         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
     ????             (engine/constants.):00283         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
     ????             (engine/constants.):00284         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
     ????             (engine/constants.):00285         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
     ????             (engine/constants.):00286         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00287         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
     ????             (engine/constants.):00288         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
     ????             (engine/constants.):00289         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00290         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
     ????             (engine/constants.):00291         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
     ????             (engine/constants.):00292         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00293         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (engine/constants.):00294         
     0000             (engine/constants.):00295         buf_priority                  equ 0  ; offset for each rsv_buffer variables
     0001             (engine/constants.):00296         buf_priority_prev_obj         equ 1  ;
     0003             (engine/constants.):00297         buf_priority_next_obj         equ 3  ;
     0005             (engine/constants.):00298         buf_prev_mapping_frame        equ 5  ;
     0007             (engine/constants.):00299         buf_erase_nb_cell             equ 7  ;
     0008             (engine/constants.):00300         buf_page_erase_routine        equ 8 ;
     0009             (engine/constants.):00301         buf_erase_routine             equ 9 ;
     000B             (engine/constants.):00302         buf_bgdata                    equ 11 ;
     000D             (engine/constants.):00303         buf_prev_xy_pixel             equ 13 ;
     000D             (engine/constants.):00304         buf_prev_x_pixel              equ 13 ;
     000E             (engine/constants.):00305         buf_prev_y_pixel              equ 14 ;
     000F             (engine/constants.):00306         buf_prev_xy1_pixel            equ 15 ;
     000F             (engine/constants.):00307         buf_prev_x1_pixel             equ 15 ;
     0010             (engine/constants.):00308         buf_prev_y1_pixel             equ 16 ;
     0011             (engine/constants.):00309         buf_prev_xy2_pixel            equ 17 ;
     0011             (engine/constants.):00310         buf_prev_x2_pixel             equ 17 ;
     0012             (engine/constants.):00311         buf_prev_y2_pixel             equ 18 ;
     0013             (engine/constants.):00312         buf_prev_render_flags         equ 19 ;
                      (engine/constants.):00313          else
                      (engine/constants.):00314         * ---------------------------------------------------------------------------
                      (engine/constants.):00315         * reserved variables (engine) - buffer specific - overlay pack
                      (engine/constants.):00316         
0000                  (engine/constants.):00317         rsv_priority                  equ object_rsvd   ; internal value that hold priority in video buffer 0
0000                  (engine/constants.):00318         rsv_priority_prev_obj         equ object_rsvd+1 ; and +2 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (engine/constants.):00319         rsv_priority_next_obj         equ object_rsvd+3 ; and +4 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
                      (engine/constants.):00320         
                      (engine/constants.):00321         ; ---------------------------------------------------------------------------
                      (engine/constants.):00322         ; when childsprites are activated (i.e. bit #6 of render_flags set)
                      (engine/constants.):00323         ; object_base_size+ext_variables_size should cover at least 7+56 bytes 
                      (engine/constants.):00324         ; subtype is recovered
0000                  (engine/constants.):00325         mainspr_childsprites    equ   subtype         ; amount of child sprites
0000                  (engine/constants.):00326         mainspr_width           equ   run_object_next+2
0000                  (engine/constants.):00327         mainspr_height          equ   run_object_next+3
0000                  (engine/constants.):00328         mainspr_x_pos           equ   mainspr_height+1
0000                  (engine/constants.):00329         mainspr_y_pos           equ   mainspr_height+3
0000                  (engine/constants.):00330         mainspr_mapframe        equ   mainspr_height+5
0000                  (engine/constants.):00331         sub2_x_pos              equ   mainspr_x_pos+6
0000                  (engine/constants.):00332         sub2_y_pos              equ   mainspr_y_pos+6
0000                  (engine/constants.):00333         sub2_mapframe           equ   mainspr_mapframe+6
0000                  (engine/constants.):00334         sub3_x_pos              equ   sub2_x_pos+6
0000                  (engine/constants.):00335         sub3_y_pos              equ   sub2_y_pos+6
0000                  (engine/constants.):00336         sub3_mapframe           equ   sub2_mapframe+6
0000                  (engine/constants.):00337         sub4_x_pos              equ   sub3_x_pos+6
0000                  (engine/constants.):00338         sub4_y_pos              equ   sub3_y_pos+6
0000                  (engine/constants.):00339         sub4_mapframe           equ   sub3_mapframe+6
0000                  (engine/constants.):00340         sub5_x_pos              equ   sub4_x_pos+6
0000                  (engine/constants.):00341         sub5_y_pos              equ   sub4_y_pos+6
0000                  (engine/constants.):00342         sub5_mapframe           equ   sub4_mapframe+6
0000                  (engine/constants.):00343         sub6_x_pos              equ   sub5_x_pos+6
0000                  (engine/constants.):00344         sub6_y_pos              equ   sub5_y_pos+6
0000                  (engine/constants.):00345         sub6_mapframe           equ   sub5_mapframe+6
0000                  (engine/constants.):00346         sub7_x_pos              equ   sub6_x_pos+6
0000                  (engine/constants.):00347         sub7_y_pos              equ   sub6_y_pos+6
0000                  (engine/constants.):00348         sub7_mapframe           equ   sub6_mapframe+6
0000                  (engine/constants.):00349         sub8_x_pos              equ   sub7_x_pos+6
0000                  (engine/constants.):00350         sub8_y_pos              equ   sub7_y_pos+6
0000                  (engine/constants.):00351         sub8_mapframe           equ   sub7_mapframe+6
0000                  (engine/constants.):00352         sub9_x_pos              equ   sub8_x_pos+6
0000                  (engine/constants.):00353         sub9_y_pos              equ   sub8_y_pos+6
0000                  (engine/constants.):00354         sub9_mapframe           equ   sub8_mapframe+6
0000                  (engine/constants.):00355         next_subspr             equ   6 ; size of a subsprite data
                      (engine/constants.):00356          endc
                      (engine/constants.):00357          endc
                      (C:\Users\bhrou\gi):00032                 INCLUDE "engine/system/to8/map.const.asm"
                      (engine/system/to8):00001         ; Thomson TO8 - Memory map
                      (engine/system/to8):00002         
                      (engine/system/to8):00003         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00004         ; system addresses
                      (engine/system/to8):00005         
                      (engine/system/to8):00006         ; mc6846
     E7C0             (engine/system/to8):00007         map.MC6846.CSR      equ $E7C0 ; (bit2) set mute
     E7C1             (engine/system/to8):00008         map.MC6846.CRC      equ $E7C1
     E7C2             (engine/system/to8):00009         map.MC6846.DDRC     equ $E7C2
     E7C3             (engine/system/to8):00010         map.MC6846.PRC      equ $E7C3 ; (bit0) set half ram page 0 (low or high) in video area ($4000-$5FFF)
     E7C4             (engine/system/to8):00011         map.MC6846.CSR2     equ $E7C4
     E7C5             (engine/system/to8):00012         map.MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (engine/system/to8):00013         map.MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (engine/system/to8):00014         map.MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (engine/system/to8):00015         
                      (engine/system/to8):00016         ; mc6821 system
     E7C8             (engine/system/to8):00017         map.MC6821.PRA      equ $E7C8
     E7C9             (engine/system/to8):00018         map.MC6821.PRB      equ $E7C9
     E7CA             (engine/system/to8):00019         map.MC6821.CRA      equ $E7CA
     E7CB             (engine/system/to8):00020         map.MC6821.CRB      equ $E7CB
                      (engine/system/to8):00021         
                      (engine/system/to8):00022         ; mc6821 music and game
     E7CC             (engine/system/to8):00023         map.MC6821.PRA1     equ $E7CC
     E7CD             (engine/system/to8):00024         map.MC6821.PRA2     equ $E7CD
     E7CE             (engine/system/to8):00025         map.MC6821.CRA1     equ $E7CE
     E7CF             (engine/system/to8):00026         map.MC6821.CRA2     equ $E7CF
                      (engine/system/to8):00027         
                      (engine/system/to8):00028         ; thmfc01 gate controler floppy disk
     E7D0             (engine/system/to8):00029         map.THMFC01.STAT0   equ $E7D0
     E7D0             (engine/system/to8):00030         map.THMFC01.CMD0    equ $E7D0
     E7D1             (engine/system/to8):00031         map.THMFC01.STAT1   equ $E7D1
     E7D1             (engine/system/to8):00032         map.THMFC01.CMD1    equ $E7D1
     E7D2             (engine/system/to8):00033         map.THMFC01.CMD2    equ $E7D2
     E7D3             (engine/system/to8):00034         map.THMFC01.WDATA   equ $E7D3
     E7D3             (engine/system/to8):00035         map.THMFC01.RDATA   equ $E7D3
     E7D4             (engine/system/to8):00036         map.THMFC01.WCLK    equ $E7D4
     E7D5             (engine/system/to8):00037         map.THMFC01.WSECT   equ $E7D5
     E7D6             (engine/system/to8):00038         map.THMFC01.TRCK    equ $E7D6
     E7D7             (engine/system/to8):00039         map.THMFC01.CELL    equ $E7D7
                      (engine/system/to8):00040         
                      (engine/system/to8):00041         ; ef9369 palette
     E7DA             (engine/system/to8):00042         map.EF9369.D        equ $E7DA
     E7DB             (engine/system/to8):00043         map.EF9369.A        equ $E7DB
                      (engine/system/to8):00044         
                      (engine/system/to8):00045         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (engine/system/to8):00046         map.CF74021.LGAMOD  equ $E7DC
     E7DD             (engine/system/to8):00047         map.CF74021.SYS2    equ $E7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     E7E4             (engine/system/to8):00048         map.CF74021.COM     equ $E7E4
     E7E5             (engine/system/to8):00049         map.CF74021.DATA    equ $E7E5 ; (bit0-4) set ram page in data area ($A000-$DFFF)
     E7E6             (engine/system/to8):00050         map.CF74021.CART    equ $E7E6 ; (bit0-4) set page in cartridge area ($0000-$3FFF), (bit5) set ram over cartridge, (bit6) enable write
     E7E7             (engine/system/to8):00051         map.CF74021.SYS1    equ $E7E7 ; (bit4) set ram over data area
                      (engine/system/to8):00052         
                      (engine/system/to8):00053         ; extension port
     00E7             (engine/system/to8):00054         map.EXTPORT         equ $E7
     E7F0             (engine/system/to8):00055         map.IEEE488         equ $E7F0 ; to E7F7
     E7F2             (engine/system/to8):00056         map.EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (engine/system/to8):00057         map.EF5860.TX       equ $E7F3 ; MIDI
                      (engine/system/to8):00058          ifndef SOUND_CARD_PROTOTYPE
     E7FC             (engine/system/to8):00059         map.YM2413.A        equ $E7FC
     E7FD             (engine/system/to8):00060         map.YM2413.D        equ $E7FD
                      (engine/system/to8):00061          ifndef SN76489_JUMPER_LOW
     E7F7             (engine/system/to8):00062         map.SN76489.D       equ $E7F7
                      (engine/system/to8):00063          else
0000                  (engine/system/to8):00064         map.SN76489.D       equ $E7F6
                      (engine/system/to8):00065          endc
                      (engine/system/to8):00066          else
0000                  (engine/system/to8):00067         map.YM2413.A        equ $E7FC
0000                  (engine/system/to8):00068         map.YM2413.D        equ $E7FD
                      (engine/system/to8):00069          ifndef SN76489_JUMPER_LOW
0000                  (engine/system/to8):00070         map.SN76489.D       equ $E7FF
                      (engine/system/to8):00071          else
0000                  (engine/system/to8):00072         map.SN76489.D       equ $E7FE
                      (engine/system/to8):00073          endc
                      (engine/system/to8):00074          endc
     E7FE             (engine/system/to8):00075         map.MEA8000.D       equ $E7FE
     E7FF             (engine/system/to8):00076         map.MEA8000.A       equ $E7FF
                      (engine/system/to8):00077         
                      (engine/system/to8):00078         ; ROM routines
     E004             (engine/system/to8):00079         map.DKCONT          equ $E004 ; TO:DKCO, MO:SWI $26
     E007             (engine/system/to8):00080         map.DKBOOT          equ $E007 ; boot
     E00A             (engine/system/to8):00081         map.DKFMT           equ $E00A ; format
     E00D             (engine/system/to8):00082         map.LECFA           equ $E00D ; read FAT
     E010             (engine/system/to8):00083         map.RECFI           equ $E010 ; search file
     E010             (engine/system/to8):00084         map.RECUP           equ $E010 ; clear file
     E010             (engine/system/to8):00085         map.ECRSE           equ $E010 ; sector write
     E019             (engine/system/to8):00086         map.ALLOD           equ $E019 ; catalog file allocation
     E01C             (engine/system/to8):00087         map.ALLOB           equ $E01C ; bloc allocation
     E01F             (engine/system/to8):00088         map.MAJCL           equ $E01F ; cluster update
     E022             (engine/system/to8):00089         map.FINTR           equ $E022 ; transfert end
     E025             (engine/system/to8):00090         map.QDDSTD          equ $E025 ; QDD std functions
     E028             (engine/system/to8):00091         map.QDDSYS          equ $E028 ; QDD sys functions
                      (engine/system/to8):00092         
     E803             (engine/system/to8):00093         map.PUTC            equ $E803
     E806             (engine/system/to8):00094         map.GETC            equ $E806
     E809             (engine/system/to8):00095         map.KTST            equ $E809
     E82A             (engine/system/to8):00096         map.DKCO            equ $E82A ; read or write floppy disk routine
     E830             (engine/system/to8):00097         map.IRQ.EXIT        equ $E830 ; to exit an irq
                      (engine/system/to8):00098         
                      (engine/system/to8):00099         ; system monitor registers
     0060             (engine/system/to8):00100         map.REG.DP          equ $60   ; direct page for system monitor registers
     6019             (engine/system/to8):00101         map.STATUS          equ $6019 ; status bitfield
     6048             (engine/system/to8):00102         map.DK.OPC          equ $6048 ; operation
     6049             (engine/system/to8):00103         map.DK.DRV          equ $6049 ; drive
     604C             (engine/system/to8):00104         map.DK.SEC          equ $604C ; sector
     604A             (engine/system/to8):00105         map.DK.TRK          equ $604A ; $604B ; track
     604E             (engine/system/to8):00106         map.DK.STA          equ $604E ; return status
     604F             (engine/system/to8):00107         map.DK.BUF          equ $604F ; $6050 ; data write location
     6023             (engine/system/to8):00108         map.FIRQPT          equ $6023 ; routine firq
     6027             (engine/system/to8):00109         map.TIMERPT         equ $6027 ; routine irq timer
     6081             (engine/system/to8):00110         map.CF74021.SYS1.R  equ $6081 ; reading value for map.CF74021.SYS1
                      (engine/system/to8):00111         
                      (engine/system/to8):00112         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00113         ; constants
                      (engine/system/to8):00114         
     0035             (engine/system/to8):00115         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (engine/system/to8):00116         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (engine/system/to8):00117         map.IRQ.ONE_FRAME     equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (engine/system/to8):00118         
                      (engine/system/to8):00119         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00120         ; mapping to generic names
                      (engine/system/to8):00121         
     E7CD             (engine/system/to8):00122         map.DAC            equ map.MC6821.PRA2
     E7C6             (engine/system/to8):00123         map.RND            equ map.MC6846.TMSB
                      (C:\Users\bhrou\gi):00033                 INCLUDE "new-engine/system/to8/bootloader/loader.const.asm"
                      (new-engine/system):00001          IFNDEF loader.PAGE
0000                  (new-engine/system):00002         loader.PAGE equ 4
                      (new-engine/system):00003          ENDC
                      (new-engine/system):00004         
                      (new-engine/system):00005          IFNDEF loader.ADDRESS
0000                  (new-engine/system):00006         loader.ADDRESS equ $A000
                      (new-engine/system):00007          ENDC
                      (new-engine/system):00008         
                      (new-engine/system):00009          IFNDEF loader.DEFAULT_DYNAMIC_MEMORY_SIZE
0000                  (new-engine/system):00010         loader.DEFAULT_DYNAMIC_MEMORY_SIZE equ loader.ADDRESS-loader.memoryPool+$4000
                      (new-engine/system):00011          ENDC
                      (new-engine/system):00012         
                      (new-engine/system):00013          IFNDEF loader.DEFAULT_SCENE_DIR_ID
0000                  (new-engine/system):00014         loader.DEFAULT_SCENE_DIR_ID equ 0
                      (new-engine/system):00015          ENDC
                      (new-engine/system):00016         
                      (new-engine/system):00017          IFNDEF loader.DEFAULT_SCENE_FILE_ID
0000                  (new-engine/system):00018         loader.DEFAULT_SCENE_FILE_ID equ 0
                      (new-engine/system):00019          ENDC
                      (new-engine/system):00020         
                      (new-engine/system):00021          IFNDEF loader.DEFAULT_SCENE_EXEC_PAGE
0000                  (new-engine/system):00022         loader.DEFAULT_SCENE_EXEC_PAGE equ 5
                      (new-engine/system):00023          ENDC
                      (new-engine/system):00024         
                      (new-engine/system):00025          IFNDEF loader.DEFAULT_SCENE_EXEC_ADDR
0000                  (new-engine/system):00026         loader.DEFAULT_SCENE_EXEC_ADDR equ $6100
                      (new-engine/system):00027          ENDC
                      (C:\Users\bhrou\gi):00034         
                      (C:\Users\bhrou\gi):00035         ; directory structure
                      (C:\Users\bhrou\gi):00036         ; -------------------
                      (C:\Users\bhrou\gi):00037         dir.header STRUCT
0000s                 (C:\Users\bhrou\gi):00038         tag     rmb types.BYTE*3 ; [I] [D] [X]
0003s                 (C:\Users\bhrou\gi):00039         diskId  rmb types.BYTE   ; [0000 0000]              - [disk id 0-255]
0004s                 (C:\Users\bhrou\gi):00040         nsector rmb types.BYTE   ; [0000 0000]              - [nb of sectors for direntries]
0005s                 (C:\Users\bhrou\gi):00041                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00042         
                      (C:\Users\bhrou\gi):00043         ; dir.entry main structure
                      (C:\Users\bhrou\gi):00044         ; -----------------------
                      (C:\Users\bhrou\gi):00045         dir.entry STRUCT
0000s                 (C:\Users\bhrou\gi):00046         bitfld   rmb 0            ; alias to bitfld
0000s                 (C:\Users\bhrou\gi):00047         sizeu    rmb types.WORD   ; [0]                     - [compression 0:none, 1:packed]
                      (C:\Users\bhrou\gi):00048                                   ; [0]                     - [load time linker 0:no, 1:yes]
                      (C:\Users\bhrou\gi):00049                                   ; [00 0000] [0000 0000]   - [uncompressed file size -1]
0002s                 (C:\Users\bhrou\gi):00050         track    rmb types.BYTE   ; [0000 000]              - [track 0-128]
                      (C:\Users\bhrou\gi):00051                                   ; [0]                     - [face 0-1]
0003s                 (C:\Users\bhrou\gi):00052         sector   rmb types.BYTE   ; [0000 0000]             - [sector 0-255]
0004s                 (C:\Users\bhrou\gi):00053         sizea    rmb types.BYTE   ; [0000 0000]             - [bytes in first sector (empty file: $ff00)]
0005s                 (C:\Users\bhrou\gi):00054         offseta  rmb types.BYTE   ; [0000 0000]             - [start offset in first sector (0: no sector)]
0006s                 (C:\Users\bhrou\gi):00055         nsector  rmb types.BYTE   ; [0000 0000]             - [full sectors to read]
0007s                 (C:\Users\bhrou\gi):00056         sizez    rmb types.BYTE   ; [0000 0000]             - [bytes in last sector (0: no sector)]
                      (C:\Users\bhrou\gi):00057         
                      (C:\Users\bhrou\gi):00058         ; dir.entry compress structure
                      (C:\Users\bhrou\gi):00059         ; ---------------------------
0008s                 (C:\Users\bhrou\gi):00060         coffset  rmb types.WORD   ; [0000 0000] [0000 0000] - [offset to compressed data]
000As                 (C:\Users\bhrou\gi):00061         cdataz   rmb types.BYTE*6 ; [0000 0000]             - [last 6 bytes of uncompressed file data]
                      (C:\Users\bhrou\gi):00062         
                      (C:\Users\bhrou\gi):00063         ; dir.entry linker structure
                      (C:\Users\bhrou\gi):00064         ; -------------------------
0010s                 (C:\Users\bhrou\gi):00065         lsize    rmb types.BYTE   ; [0000 0000] [0000 0000] - [linker data size]
0011s                 (C:\Users\bhrou\gi):00066         ltrack   rmb types.BYTE   ; [0000 000]              - [track 0-128]
                      (C:\Users\bhrou\gi):00067                                   ; [0]                     - [face 0-1]
0012s                 (C:\Users\bhrou\gi):00068         lsector  rmb types.BYTE   ; [0000 0000]             - [sector 0-255]
0013s                 (C:\Users\bhrou\gi):00069         lsizea   rmb types.BYTE   ; [0000 0000]             - [bytes in first sector]
0014s                 (C:\Users\bhrou\gi):00070         loffseta rmb types.BYTE   ; [0000 0000]             - [start offset in first sector (0: no sector)]
0015s                 (C:\Users\bhrou\gi):00071         lnsector rmb types.BYTE   ; [0000 0000]             - [full sectors to read]
0016s                 (C:\Users\bhrou\gi):00072         lsizez   rmb types.BYTE   ; [0000 0000]             - [bytes in last sector (0: no sector)]
0017s                 (C:\Users\bhrou\gi):00073                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00074         
                      (C:\Users\bhrou\gi):00075         ; scene structure
                      (C:\Users\bhrou\gi):00076         ; ---------------
                      (C:\Users\bhrou\gi):00077         scene.header STRUCT
0000s                 (C:\Users\bhrou\gi):00078         type     rmb 0
0000s                 (C:\Users\bhrou\gi):00079         nbfiles  rmb types.WORD   ; [00]                     - [00:endmarker, 01:list of dest and id, 10:ajdacent dest and list of id, 11:adjacent dest and id]
                      (C:\Users\bhrou\gi):00080                                   ; [00 000] [0000 000]      - [nb files]
0002s                 (C:\Users\bhrou\gi):00081                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00082         
                      (C:\Users\bhrou\gi):00083         scene   STRUCT
0000s                 (C:\Users\bhrou\gi):00084         page     rmb types.BYTE   ; [0000 000]               - [page]
0001s                 (C:\Users\bhrou\gi):00085         address  rmb types.WORD   ; [0000 000] [0000 000]    - [dest address]
0003s                 (C:\Users\bhrou\gi):00086         fileid   rmb types.WORD   ; [0000 000] [0000 000]    - [file id]
0005s                 (C:\Users\bhrou\gi):00087                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00088         
                      (C:\Users\bhrou\gi):00089                 org   loader.ADDRESS
A000 7EA7DC           (C:\Users\bhrou\gi):00090                 jmp   >loader.scene.loadDefault    ; OK
A003 7EA7FB           (C:\Users\bhrou\gi):00091                 jmp   >loader.scene.load           ; OK
A006 7EA842           (C:\Users\bhrou\gi):00092                 jmp   >loader.scene.apply          ; OK
A009 7EA935           (C:\Users\bhrou\gi):00093                 jmp   >loader.dir.load             ; OK
A00C 7EA9ED           (C:\Users\bhrou\gi):00094                 jmp   >loader.file.load            ; OK
A00F 7EA825           (C:\Users\bhrou\gi):00095                 jmp   >loader.file.malloc          ; OK
A012 7EAB43           (C:\Users\bhrou\gi):00096                 jmp   >loader.file.decompress      ; OK
A015 7EACB3           (C:\Users\bhrou\gi):00097                 jmp   >loader.file.linkData.load   ; OK
A018 7EAD62           (C:\Users\bhrou\gi):00098                 jmp   >loader.file.linkData.unload ; TODO
                      (C:\Users\bhrou\gi):00099         
                      (C:\Users\bhrou\gi):00100         ; callbacks that can be modified by user at runtime
A01B 7EAA96           (C:\Users\bhrou\gi):00101         error   jmp   >dskerr     ; Called if a read error is detected
A01E 7EAA59           (C:\Users\bhrou\gi):00102         pulse   jmp   >return     ; Called after each sector read (ex. for progress bar)
                      (C:\Users\bhrou\gi):00103         
                      (C:\Users\bhrou\gi):00104         ; temporary space
                      (C:\Users\bhrou\gi):00105         ; ---------------
A021 0000000000000000 (C:\Users\bhrou\gi):00106         ptsec  fill  0,256 ; Temporary space for partial sector loading
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A121 00               (C:\Users\bhrou\gi):00107         diskId fcb   0     ; Disk id
A122 00               (C:\Users\bhrou\gi):00108         nsect  fcb   0     ; Sector counter
A123 00               (C:\Users\bhrou\gi):00109         track  fcb   0     ; Track number
A124 00               (C:\Users\bhrou\gi):00110         sector fcb   0     ; Sector number
                      (C:\Users\bhrou\gi):00111         
                      (C:\Users\bhrou\gi):00112         ; globals
                      (C:\Users\bhrou\gi):00113         ; --------------
A125 0000             (C:\Users\bhrou\gi):00114         loader.dir              fdb   0 ; file directory
A127 0000             (C:\Users\bhrou\gi):00115         loader.file.linkDataIdx fdb   0 ; link data index of loaded files
A129 0000             (C:\Users\bhrou\gi):00116         loader.scene.routine    fdb   0
A12B 0000             (C:\Users\bhrou\gi):00117         loader.scene.fileCount  fdb   0
A12D 0000             (C:\Users\bhrou\gi):00118         linkData.currentFile    fdb   0
A12F 0000             (C:\Users\bhrou\gi):00119         linkData.currentSymbol  fdb   0
                      (C:\Users\bhrou\gi):00120         
                      (C:\Users\bhrou\gi):00121         ; memory utils
                      (C:\Users\bhrou\gi):00122         ; --------------
                      (C:\Users\bhrou\gi):00123                 INCLUDE   "new-engine/memory/malloc/tlsf.asm"
                      (new-engine/memory):00001         ;-----------------------------------------------------------------
                      (new-engine/memory):00002         ; TLSF (Two Level Segregated Fit) - 16bit
                      (new-engine/memory):00003         ; single RAM page only
                      (new-engine/memory):00004         ;-----------------------------------------------------------------
                      (new-engine/memory):00005         ; Benoit Rousseau - 22/08/2023
                      (new-engine/memory):00006         ; Based on http://www.gii.upv.es/tlsf/files/spe_2008.pdf
                      (new-engine/memory):00007         ; Written for LWASM assembler http://www.lwtools.ca/
                      (new-engine/memory):00008         ;
                      (new-engine/memory):00009         ;-----------------------------------------------------------------
                      (new-engine/memory):00010         
                      (new-engine/memory):00011          opt c
                      (new-engine/memory):00012         
                      (new-engine/memory):00013          INCLUDE "new-engine/constant/types.const.asm"
                      (new-engine/consta):00001          IFNDEF types.const.asm
A131                  (new-engine/consta):00002         types.const.asm  equ 1
                      (new-engine/consta):00003         
A131                  (new-engine/consta):00004         types.BYTE      equ 1
A131                  (new-engine/consta):00005         types.BYTE_BITS equ 8*types.BYTE
A131                  (new-engine/consta):00006         types.WORD      equ 2*types.BYTE
A131                  (new-engine/consta):00007         types.WORD_BITS equ 8*types.WORD
                      (new-engine/consta):00008          ENDC
                      (new-engine/memory):00014         
                      (new-engine/memory):00015         ; tlsf structure
                      (new-engine/memory):00016         ; --------------
                      (new-engine/memory):00017         
                      (new-engine/memory):00018         tlsf.blockHdr STRUCT
0000s                 (new-engine/memory):00019         size      rmb types.WORD ; (FREE/USED) [0] [000 0000 0000 0000] - [1:free/0:used] [free size - 1]
0002s                 (new-engine/memory):00020         prev.phys rmb types.WORD ; (FREE/USED) [0000 0000 0000 0000]    - [previous physical block in memory, tlsf.block.nullptr if no one]
0004s                 (new-engine/memory):00021         prev      rmb types.WORD ; (FREE)      [0000 0000 0000 0000]    - [previous block in free list]
0006s                 (new-engine/memory):00022         next      rmb types.WORD ; (FREE)      [0000 0000 0000 0000]    - [next block in free list]
0008s                 (new-engine/memory):00023          ENDSTRUCT
                      (new-engine/memory):00024         
                      (new-engine/memory):00025         ; tlsf configuration
                      (new-engine/memory):00026         ; -----------------------
     0000             (new-engine/memory):00027         tlsf.PAD_BITS         equ   0  ; non significant rightmost bits
     0004             (new-engine/memory):00028         tlsf.SL_BITS          equ   4  ; significant bits for second level index
                      (new-engine/memory):00029         
                      (new-engine/memory):00030         ; tlsf constants
                      (new-engine/memory):00031         ; -----------------------
     000C             (new-engine/memory):00032         tlsf.FL_BITS            equ   types.WORD_BITS-tlsf.PAD_BITS-tlsf.SL_BITS ; significant bits for first level index
     0010             (new-engine/memory):00033         tlsf.SL_SIZE            equ   16 ; 2^tlsf.SL_BITS
     0004             (new-engine/memory):00034         tlsf.MIN_BLOCK_SIZE     equ   types.WORD*2 ; a memory block in use should be able to return to free state, so a min block size is mandatory (prev and next)
     0004             (new-engine/memory):00035         tlsf.BHDR_OVERHEAD      equ   types.WORD*2 ; overhead when a block is in use (size and prev.phys)
     0080             (new-engine/memory):00036         tlsf.mask.FREE_BLOCK    equ   %10000000
     FFFF             (new-engine/memory):00037         tlsf.block.nullptr      equ   -1
                      (new-engine/memory):00038         
                      (new-engine/memory):00039         ; tlsf external variables and constants
                      (new-engine/memory):00040         ; -------------------------------------
A131 00               (new-engine/memory):00041         tlsf.err              fcb   0
A132 A2D2             (new-engine/memory):00042         tlsf.err.callback     fdb   tlsf.err.loop ; error callback, default is an infinite loop
     0001             (new-engine/memory):00043         tlsf.err.init.MIN_SIZE         equ   1     ; memory pool should have sizeof{tlsf.blockHdr} as a minimum size
     0002             (new-engine/memory):00044         tlsf.err.init.MAX_SIZE         equ   2     ; memory pool should have 32768 ($8000) as a maximum size
     0003             (new-engine/memory):00045         tlsf.err.malloc.OUT_OF_MEMORY  equ   3     ; no more space in memory pool 
     0004             (new-engine/memory):00046         tlsf.err.malloc.MAX_SIZE       equ   4     ; malloc can not handle more than 63488 ($F800) bytes request
     0005             (new-engine/memory):00047         tlsf.err.free.NULL_PTR         equ   5     ; memory location to free cannot be NULL
     0006             (new-engine/memory):00048         tlsf.err.realloc.MAX_SIZE      equ   6     ; realloc can not handle more than 63488 ($F800) bytes request
     0007             (new-engine/memory):00049         tlsf.err.realloc.OUT_OF_MEMORY equ   7     ; 
                      (new-engine/memory):00050         
                      (new-engine/memory):00051         ; tlsf internal variables
                      (new-engine/memory):00052         ; -----------------------
A134 00               (new-engine/memory):00053         tlsf.fl               fcb   0 ; first level index
A135 00               (new-engine/memory):00054         tlsf.sl               fcb   0 ; second level index (should be adjacent to fl in memory)
A136 0000             (new-engine/memory):00055         tlsf.memoryPool       fdb   0 ; memory pool location     
A138 0000             (new-engine/memory):00056         tlsf.memoryPool.end   fdb   0 ; memory pool upper limit
A13A 0000             (new-engine/memory):00057         tlsf.memoryPool.size  fdb   0 ; memory pool size
                      (new-engine/memory):00058         
A13C                  (new-engine/memory):00059         tlsf.bitmap.start
A13C 0000             (new-engine/memory):00060         tlsf.fl.bitmap        fdb   0 ; each bit is a boolean, does a free list exists for a fl index ?
     0002             (new-engine/memory):00061         tlsf.sl.bitmap.size   equ   (tlsf.SL_SIZE+types.BYTE_BITS-1)/types.BYTE_BITS
     A138             (new-engine/memory):00062         tlsf.sl.bitmaps       equ   *-(types.WORD_BITS-(tlsf.FL_BITS+1))*tlsf.sl.bitmap.size ; Translate to get rid of useless space (fl values < min fl)
A13E 0000000000000000 (new-engine/memory):00063                               fill  0,(tlsf.FL_BITS+1)*tlsf.sl.bitmap.size ; each bit is a boolean, does a free list exists for a sl index ?
     0000000000000000
     0000000000000000
     0000
A158                  (new-engine/memory):00064         tlsf.bitmap.end
     A0F0             (new-engine/memory):00065         tlsf.headMatrix       equ   *-4*2-(types.WORD_BITS-(tlsf.FL_BITS+1))*tlsf.SL_SIZE*2 ; fl=0 sl=0 to sl=3 is useless (minimum bloc size)
A158 0000000000000000 (new-engine/memory):00066         tlsf.headMatrix.start fill  0,(tlsf.FL_BITS+1)*tlsf.SL_SIZE*2-(4+15)*2 ; head ptr to each free list by fl/sl. First fl index hold only 12 sl levels (sl=4-15). Last fl index hold only one sl level (sl=0).
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000
A2D2                  (new-engine/memory):00067         tlsf.headMatrix.end
                      (new-engine/memory):00068         
                      (new-engine/memory):00069         ;-----------------------------------------------------------------
                      (new-engine/memory):00070         ; configuration check
                      (new-engine/memory):00071         ;-----------------------------------------------------------------
                      (new-engine/memory):00072          IFLT 8-(tlsf.PAD_BITS+tlsf.SL_BITS)
                      (new-engine/memory):00073                 ERROR "Sum of tlsf.PAD_BITS and tlsf.SL_BITS should not exceed 8"
                      (new-engine/memory):00074          ENDC
                      (new-engine/memory):00075         
                      (new-engine/memory):00076          IFLT tlsf.SL_BITS-1
                      (new-engine/memory):00077                 ERROR "tlsf.SL_BITS should be >= 1"
                      (new-engine/memory):00078          ENDC
                      (new-engine/memory):00079         
                      (new-engine/memory):00080          IFGT tlsf.SL_BITS-4
                      (new-engine/memory):00081                 ERROR "tlsf.SL_BITS should be <= 4"
                      (new-engine/memory):00082          ENDC
                      (new-engine/memory):00083         
                      (new-engine/memory):00084         ;-----------------------------------------------------------------
                      (new-engine/memory):00085         ; tlsf.err.loop
                      (new-engine/memory):00086         ;-----------------------------------------------------------------
                      (new-engine/memory):00087         ; default error callback
                      (new-engine/memory):00088         ;-----------------------------------------------------------------
A2D2                  (new-engine/memory):00089         tlsf.err.loop
A2D2 20FE             (new-engine/memory):00090 [3]             bra   *
                      (new-engine/memory):00091         
                      (new-engine/memory):00092         ;-----------------------------------------------------------------
                      (new-engine/memory):00093         ; tlsf.err.return
                      (new-engine/memory):00094         ;-----------------------------------------------------------------
                      (new-engine/memory):00095         ; alternative error callback
                      (new-engine/memory):00096         ;-----------------------------------------------------------------
A2D4                  (new-engine/memory):00097         tlsf.err.return
A2D4 327E             (new-engine/memory):00098 [5]             leas  -2,s
A2D6 39               (new-engine/memory):00099 [5]             rts
                      (new-engine/memory):00100         
                      (new-engine/memory):00101         ;-----------------------------------------------------------------
                      (new-engine/memory):00102         ; tlsf.init
                      (new-engine/memory):00103         ; input  REG : [D] total memory pool size (overhead included)
                      (new-engine/memory):00104         ; input  REG : [X] memory pool location
                      (new-engine/memory):00105         ; output VAR : [tlsf.err] error code
                      (new-engine/memory):00106         ; trash      : [D,X,U]
                      (new-engine/memory):00107         ;-----------------------------------------------------------------
                      (new-engine/memory):00108         ; Initialize memory management index with a size and a location
                      (new-engine/memory):00109         ; The provided size include the header block overhead.
                      (new-engine/memory):00110         ; The maximum usable size is $8000 bytes and it requires a
                      (new-engine/memory):00111         ; countinuous memory space of $8004 bytes (max value for in reg D)
                      (new-engine/memory):00112         ;-----------------------------------------------------------------
A2D7                  (new-engine/memory):00113         tlsf.init
A2D7 BFA136           (new-engine/memory):00114 [6]             stx   tlsf.memoryPool
A2DA FDA13A           (new-engine/memory):00115 [6]             std   tlsf.memoryPool.size
                      (new-engine/memory):00116         
                      (new-engine/memory):00117                 ; check memory pool size
A2DD 10830008         (new-engine/memory):00118 [5]             cmpd  #sizeof{tlsf.blockHdr}
A2E1 240C             (new-engine/memory):00119 [3]             bhs   >
A2E3 8601             (new-engine/memory):00120 [2]                 lda   #tlsf.err.init.MIN_SIZE
A2E5 B7A131           (new-engine/memory):00121 [5]                 sta   tlsf.err
A2E8 BEA132           (new-engine/memory):00122 [6]                 ldx   tlsf.err.callback
A2EB 3262             (new-engine/memory):00123 [5]                 leas  2,s
A2ED 6E84             (new-engine/memory):00124 [3]                 jmp   ,x
A2EF 10838004         (new-engine/memory):00125 [5]     !       cmpd  #$8000+tlsf.BHDR_OVERHEAD
A2F3 230C             (new-engine/memory):00126 [3]             bls   >
A2F5 8602             (new-engine/memory):00127 [2]                 lda   #tlsf.err.init.MAX_SIZE
A2F7 B7A131           (new-engine/memory):00128 [5]                 sta   tlsf.err
A2FA BEA132           (new-engine/memory):00129 [6]                 ldx   tlsf.err.callback
A2FD 3262             (new-engine/memory):00130 [5]                 leas  2,s
A2FF 6E84             (new-engine/memory):00131 [3]                 jmp   ,x
                      (new-engine/memory):00132         !
                      (new-engine/memory):00133                 ; set the memory pool upper limit
A301 338B             (new-engine/memory):00134 [8]             leau  d,x
A303 FFA138           (new-engine/memory):00135 [6]             stu   tlsf.memoryPool.end
                      (new-engine/memory):00136                 ; Zeroing the tlsf index
A306 8EA13C           (new-engine/memory):00137 [3]             ldx   #tlsf.bitmap.start
A309 CC0000           (new-engine/memory):00138 [3]             ldd   #0
A30C ED81             (new-engine/memory):00139 [8]     !           std   ,x++
A30E 8CA158           (new-engine/memory):00140 [4]                 cmpx  #tlsf.bitmap.end
A311 26F9             (new-engine/memory):00141 [3]             bne   <
                      (new-engine/memory):00142         
A313 8EA158           (new-engine/memory):00143 [3]             ldx   #tlsf.headMatrix.start
A316 CCFFFF           (new-engine/memory):00144 [3]             ldd   #tlsf.block.nullptr
A319 ED81             (new-engine/memory):00145 [8]     !           std   ,x++
A31B 8CA2D2           (new-engine/memory):00146 [4]                 cmpx  #tlsf.headMatrix.end
A31E 26F9             (new-engine/memory):00147 [3]             bne   <
                      (new-engine/memory):00148         
                      (new-engine/memory):00149                 ; set a single free block
A320 BEA136           (new-engine/memory):00150 [6]             ldx   tlsf.memoryPool
A323 BFA520           (new-engine/memory):00151 [6]             stx   tlsf.insertBlock.location
                      (new-engine/memory):00152         
A326 CCFFFF           (new-engine/memory):00153 [3]             ldd   #tlsf.block.nullptr
A329 ED02             (new-engine/memory):00154 [6]             std   tlsf.blockHdr.prev.phys,x ; no previous physical block
                      (new-engine/memory):00155         
A32B FCA13A           (new-engine/memory):00156 [6]             ldd   tlsf.memoryPool.size
A32E 830005           (new-engine/memory):00157 [4]             subd  #tlsf.BHDR_OVERHEAD+1 ; size is stored as val-1
A331 8A80             (new-engine/memory):00158 [2]             ora   #tlsf.mask.FREE_BLOCK ; set free block bit
A333 ED84             (new-engine/memory):00159 [5]             std   tlsf.blockHdr.size,x
A335 BDA4D6           (new-engine/memory):00160 [8]             jsr   tlsf.mappingFreeBlock
A338 7EA51F           (new-engine/memory):00161 [4]             jmp   tlsf.insertBlock
                      (new-engine/memory):00162         
                      (new-engine/memory):00163         ;-----------------------------------------------------------------
                      (new-engine/memory):00164         ; _tlsf.findSuitableBlock
                      (new-engine/memory):00165         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00166         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00167         ; output VAR : [tlsf.fl] suitable first level index
                      (new-engine/memory):00168         ; output VAR : [tlsf.sl] suitable second level index
                      (new-engine/memory):00169         ;-----------------------------------------------------------------
                      (new-engine/memory):00170         ;
                      (new-engine/memory):00171         ; This routine is a MACRO to make the code inline in malloc
                      (new-engine/memory):00172         ;-----------------------------------------------------------------
A33B                  (new-engine/memory):00173         _tlsf.findSuitableBlock MACRO
                      (new-engine/memory):00174                 ; search for free list in selected fl/sl index
                      (new-engine/memory):00175                 ldb   tlsf.fl
                      (new-engine/memory):00176                 aslb                           ; mul by tlsf.sl.bitmap.size
                      (new-engine/memory):00177                 ldx   #tlsf.sl.bitmaps
                      (new-engine/memory):00178                 abx                            ; set x to selected sl bitmap
                      (new-engine/memory):00179                 ldy   #tlsf.map.mask
                      (new-engine/memory):00180                 ldb   tlsf.sl
                      (new-engine/memory):00181                 aslb
                      (new-engine/memory):00182                 leay  b,y                      ; set y to selected sl mask
                      (new-engine/memory):00183                 ldd   ,x                       ; load selected sl bitmap value
                      (new-engine/memory):00184                 anda  ,y                       ; apply mask to keep only selected sl and upper values
                      (new-engine/memory):00185                 andb  1,y                      ; apply mask to keep only selected sl and upper values
                      (new-engine/memory):00186                 std   tlsf.ctz.in
                      (new-engine/memory):00187                 bne   @flmatch                 ; branch if free list exists at current fl
                      (new-engine/memory):00188                 ldx   #tlsf.map.mask           ; search for free list at upper fl
                      (new-engine/memory):00189                 ldb   tlsf.fl
                      (new-engine/memory):00190                 incb                           ; select upper fl value
                      (new-engine/memory):00191                 aslb
                      (new-engine/memory):00192                 abx                            ; set x to selected fl mask
                      (new-engine/memory):00193                 ldd   tlsf.fl.bitmap
                      (new-engine/memory):00194                 anda  ,x                       ; apply mask to keep only upper fl values
                      (new-engine/memory):00195                 andb  1,x                      ; apply mask to keep only upper fl values
                      (new-engine/memory):00196                 std   tlsf.ctz.in
                      (new-engine/memory):00197                 bne   >
                      (new-engine/memory):00198                     lda   #tlsf.err.malloc.OUT_OF_MEMORY
                      (new-engine/memory):00199                     sta   tlsf.err
                      (new-engine/memory):00200                     ldx   tlsf.err.callback
                      (new-engine/memory):00201                     leas  2,s                  ; WARNING ! dependency on calling tree, when using as a macro in malloc, should be 2
                      (new-engine/memory):00202                     jmp   ,x
                      (new-engine/memory):00203         !       jsr   tlsf.ctz                 ; search first non empty fl index
                      (new-engine/memory):00204                 stb   tlsf.fl
                      (new-engine/memory):00205                 aslb                           ; mul by tlsf.sl.bitmap.size
                      (new-engine/memory):00206                 ldx   #tlsf.sl.bitmaps
                      (new-engine/memory):00207                 ldd   b,x                      ; load suitable sl bitmap value
                      (new-engine/memory):00208                 std   tlsf.ctz.in              ; zero is not expected here, no test required
A33B                  (new-engine/memory):00209         @flmatch
                      (new-engine/memory):00210                 jsr   tlsf.ctz                 ; search first non empty sl index
                      (new-engine/memory):00211                 stb   tlsf.sl
                      (new-engine/memory):00212                 ;rts
                      (new-engine/memory):00213          ENDM
                      (new-engine/memory):00214         
A33B                  (new-engine/memory):00215         tlsf.map.mask
A33B FFFF             (new-engine/memory):00216                 fdb   %1111111111111111
A33D FFFE             (new-engine/memory):00217                 fdb   %1111111111111110
A33F FFFC             (new-engine/memory):00218                 fdb   %1111111111111100
A341 FFF8             (new-engine/memory):00219                 fdb   %1111111111111000
A343 FFF0             (new-engine/memory):00220                 fdb   %1111111111110000
A345 FFE0             (new-engine/memory):00221                 fdb   %1111111111100000
A347 FFC0             (new-engine/memory):00222                 fdb   %1111111111000000
A349 FF80             (new-engine/memory):00223                 fdb   %1111111110000000
A34B FF00             (new-engine/memory):00224                 fdb   %1111111100000000
A34D FE00             (new-engine/memory):00225                 fdb   %1111111000000000
A34F FC00             (new-engine/memory):00226                 fdb   %1111110000000000
A351 F800             (new-engine/memory):00227                 fdb   %1111100000000000
A353 F000             (new-engine/memory):00228                 fdb   %1111000000000000
A355 E000             (new-engine/memory):00229                 fdb   %1110000000000000
A357 C000             (new-engine/memory):00230                 fdb   %1100000000000000
A359 8000             (new-engine/memory):00231                 fdb   %1000000000000000
                      (new-engine/memory):00232         
A35B                  (new-engine/memory):00233         tlsf.map.bitset
A35B 0001             (new-engine/memory):00234                 fdb   %0000000000000001
A35D 0002             (new-engine/memory):00235                 fdb   %0000000000000010
A35F 0004             (new-engine/memory):00236                 fdb   %0000000000000100
A361 0008             (new-engine/memory):00237                 fdb   %0000000000001000
A363 0010             (new-engine/memory):00238                 fdb   %0000000000010000
A365 0020             (new-engine/memory):00239                 fdb   %0000000000100000
A367 0040             (new-engine/memory):00240                 fdb   %0000000001000000
A369 0080             (new-engine/memory):00241                 fdb   %0000000010000000
A36B 0100             (new-engine/memory):00242                 fdb   %0000000100000000
A36D 0200             (new-engine/memory):00243                 fdb   %0000001000000000
A36F 0400             (new-engine/memory):00244                 fdb   %0000010000000000
A371 0800             (new-engine/memory):00245                 fdb   %0000100000000000
A373 1000             (new-engine/memory):00246                 fdb   %0001000000000000
A375 2000             (new-engine/memory):00247                 fdb   %0010000000000000
A377 4000             (new-engine/memory):00248                 fdb   %0100000000000000
A379 8000             (new-engine/memory):00249                 fdb   %1000000000000000
                      (new-engine/memory):00250         
                      (new-engine/memory):00251         ;-----------------------------------------------------------------
                      (new-engine/memory):00252         ; tlsf.malloc
                      (new-engine/memory):00253         ; input  REG : [D] requested user memory size
                      (new-engine/memory):00254         ; output REG : [U] allocated memory address
                      (new-engine/memory):00255         ;-----------------------------------------------------------------
                      (new-engine/memory):00256         ; allocate some memory, should be deallocated with a call to free
                      (new-engine/memory):00257         ; WARNING : this does not initialize memory bytes
                      (new-engine/memory):00258         ;-----------------------------------------------------------------
A37B                  (new-engine/memory):00259         tlsf.malloc
A37B 10830004         (new-engine/memory):00260 [5]             cmpd  #tlsf.MIN_BLOCK_SIZE           ; Apply minimum size to requested memory size
A37F 2403             (new-engine/memory):00261 [3]             bhs   >
A381 CC0004           (new-engine/memory):00262 [3]                 ldd   #tlsf.MIN_BLOCK_SIZE
A384 1083F800         (new-engine/memory):00263 [5]     !       cmpd  #$F800                         ; greater values are not handled by mappingSearch function
A388 230C             (new-engine/memory):00264 [3]             bls   >                              ; this prevents unexpected behaviour
A38A 8604             (new-engine/memory):00265 [2]                 lda   #tlsf.err.malloc.MAX_SIZE
A38C B7A131           (new-engine/memory):00266 [5]                 sta   tlsf.err
A38F BEA132           (new-engine/memory):00267 [6]                 ldx   tlsf.err.callback
A392 3262             (new-engine/memory):00268 [5]                 leas  2,s
A394 6E84             (new-engine/memory):00269 [3]                 jmp   ,x
A396 BDA4B5           (new-engine/memory):00270 [8]     !       jsr   tlsf.mappingSearch             ; Set tlsf.rsize, fl and sl
                      (new-engine/memory):00271                 _tlsf.findSuitableBlock              ; Searching a free block, this function changes the values of fl and sl
                      (_tlsf.findSuitabl):00001                 ; search for free list in selected fl/sl index
A399 F6A134           (_tlsf.findSuitabl):00002 [5]             ldb   tlsf.fl
A39C 58               (_tlsf.findSuitabl):00003 [2]             aslb                           ; mul by tlsf.sl.bitmap.size
A39D 8EA138           (_tlsf.findSuitabl):00004 [3]             ldx   #tlsf.sl.bitmaps
A3A0 3A               (_tlsf.findSuitabl):00005 [3]             abx                            ; set x to selected sl bitmap
A3A1 108EA33B         (_tlsf.findSuitabl):00006 [4]             ldy   #tlsf.map.mask
A3A5 F6A135           (_tlsf.findSuitabl):00007 [5]             ldb   tlsf.sl
A3A8 58               (_tlsf.findSuitabl):00008 [2]             aslb
A3A9 31A5             (_tlsf.findSuitabl):00009 [5]             leay  b,y                      ; set y to selected sl mask
A3AB EC84             (_tlsf.findSuitabl):00010 [5]             ldd   ,x                       ; load selected sl bitmap value
A3AD A4A4             (_tlsf.findSuitabl):00011 [4]             anda  ,y                       ; apply mask to keep only selected sl and upper values
A3AF E421             (_tlsf.findSuitabl):00012 [5]             andb  1,y                      ; apply mask to keep only selected sl and upper values
A3B1 FDA612           (_tlsf.findSuitabl):00013 [6]             std   tlsf.ctz.in
A3B4 2630             (_tlsf.findSuitabl):00014 [3]             bne   @flmatch                 ; branch if free list exists at current fl
A3B6 8EA33B           (_tlsf.findSuitabl):00015 [3]             ldx   #tlsf.map.mask           ; search for free list at upper fl
A3B9 F6A134           (_tlsf.findSuitabl):00016 [5]             ldb   tlsf.fl
A3BC 5C               (_tlsf.findSuitabl):00017 [2]             incb                           ; select upper fl value
A3BD 58               (_tlsf.findSuitabl):00018 [2]             aslb
A3BE 3A               (_tlsf.findSuitabl):00019 [3]             abx                            ; set x to selected fl mask
A3BF FCA13C           (_tlsf.findSuitabl):00020 [6]             ldd   tlsf.fl.bitmap
A3C2 A484             (_tlsf.findSuitabl):00021 [4]             anda  ,x                       ; apply mask to keep only upper fl values
A3C4 E401             (_tlsf.findSuitabl):00022 [5]             andb  1,x                      ; apply mask to keep only upper fl values
A3C6 FDA612           (_tlsf.findSuitabl):00023 [6]             std   tlsf.ctz.in
A3C9 260C             (_tlsf.findSuitabl):00024 [3]             bne   >
A3CB 8603             (_tlsf.findSuitabl):00025 [2]                 lda   #tlsf.err.malloc.OUT_OF_MEMORY
A3CD B7A131           (_tlsf.findSuitabl):00026 [5]                 sta   tlsf.err
A3D0 BEA132           (_tlsf.findSuitabl):00027 [6]                 ldx   tlsf.err.callback
A3D3 3262             (_tlsf.findSuitabl):00028 [5]                 leas  2,s                  ; WARNING ! dependency on calling tree, when using as a macro in malloc, should be 2
A3D5 6E84             (_tlsf.findSuitabl):00029 [3]                 jmp   ,x
A3D7 BDA614           (_tlsf.findSuitabl):00030 [8]     !       jsr   tlsf.ctz                 ; search first non empty fl index
A3DA F7A134           (_tlsf.findSuitabl):00031 [5]             stb   tlsf.fl
A3DD 58               (_tlsf.findSuitabl):00032 [2]             aslb                           ; mul by tlsf.sl.bitmap.size
A3DE 8EA138           (_tlsf.findSuitabl):00033 [3]             ldx   #tlsf.sl.bitmaps
A3E1 EC85             (_tlsf.findSuitabl):00034 [6]             ldd   b,x                      ; load suitable sl bitmap value
A3E3 FDA612           (_tlsf.findSuitabl):00035 [6]             std   tlsf.ctz.in              ; zero is not expected here, no test required
A3E6                  (_tlsf.findSuitabl):00036         @flmatch
A3E6 BDA614           (_tlsf.findSuitabl):00037 [8]             jsr   tlsf.ctz                 ; search first non empty sl index
A3E9 F7A135           (_tlsf.findSuitabl):00038 [5]             stb   tlsf.sl
                      (_tlsf.findSuitabl):00039                 ;rts
A3EC BDA59B           (new-engine/memory):00272 [8]             jsr   tlsf.removeBlockHead           ; Remove the allocated block from the free matrix
                      (new-engine/memory):00273                 ; Should the block be split?
A3EF ECC4             (new-engine/memory):00274 [5]             ldd   tlsf.blockHdr.size,u           ; Size of available memory -1
A3F1 B3A3FC           (new-engine/memory):00275 [7]             subd  tlsf.rsize                     ; Substract requested memory size
A3F4 10838007         (new-engine/memory):00276 [5]             cmpd  #$8000+sizeof{tlsf.blockHdr}-1 ; Check against block header size, Size is stored as size-1, take care of free flag
A3F8 2537             (new-engine/memory):00277 [3]             blo   >                              ; Not enough bytes for a new splitted block
                      (new-engine/memory):00278                     ; Split a free block in two
                      (new-engine/memory):00279                     ; smaller blocks: one allocated,
                      (new-engine/memory):00280                     ; one free
A3FA 30C91234         (new-engine/memory):00281 [8]                 leax  $1234,u                    ; Compute address of new instancied free block into x
     A3FC             (new-engine/memory):00282         tlsf.rsize  equ *-2                          ; requested memory size
A3FE 3004             (new-engine/memory):00283 [5]                 leax  tlsf.BHDR_OVERHEAD,x       ; X is a ptr to new free block
A400 830004           (new-engine/memory):00284 [4]                 subd  #tlsf.BHDR_OVERHEAD
A403 ED84             (new-engine/memory):00285 [5]                 std   tlsf.blockHdr.size,x       ; Set allocated size for new free Block
A405 EF02             (new-engine/memory):00286 [6]                 stu   tlsf.blockHdr.prev.phys,x  ; Set the prev phys of the new free block
A407 FCA3FC           (new-engine/memory):00287 [6]                 ldd   tlsf.rsize
A40A 830001           (new-engine/memory):00288 [4]                 subd  #1                         ; Size is stored as size-1
A40D EDC4             (new-engine/memory):00289 [5]                 std   tlsf.blockHdr.size,u       ; Store new block size
                      (new-engine/memory):00290         
A40F EC84             (new-engine/memory):00291 [5]                 ldd   tlsf.blockHdr.size,x      ; load parameter for mapping routine
A411 847F             (new-engine/memory):00292 [2]                 anda  #^tlsf.mask.FREE_BLOCK    ; must update the following block to the new previous physical block
A413 C30005           (new-engine/memory):00293 [4]                 addd  #tlsf.BHDR_OVERHEAD+1     ; size is stored as size-1
A416 318B             (new-engine/memory):00294 [8]                 leay  d,x                       ; Y is now a ptr to next physical of next physical (from deallocated block)
A418 2708             (new-engine/memory):00295 [3]                 beq   @nonext                   ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A41A 10BCA138         (new-engine/memory):00296 [8]                     cmpy  tlsf.memoryPool.end
A41E 2402             (new-engine/memory):00297 [3]                     bhs   @nonext               ; branch if no next of next physical block (beyond memorypool)
A420 AF22             (new-engine/memory):00298 [6]                         stx   tlsf.blockHdr.prev.phys,y ; update the physical link
A422                  (new-engine/memory):00299         @nonext
A422 EC84             (new-engine/memory):00300 [5]                 ldd   tlsf.blockHdr.size,x       ; load parameter for mapping routine
A424 3440             (new-engine/memory):00301 [7]                 pshs  u
A426 BFA520           (new-engine/memory):00302 [6]                 stx   tlsf.insertBlock.location
A429 BDA4D6           (new-engine/memory):00303 [8]                 jsr   tlsf.mappingFreeBlock      ; compute fl/sl index
A42C BDA51F           (new-engine/memory):00304 [8]                 jsr   tlsf.insertBlock           ; update index
A42F 3540             (new-engine/memory):00305 [7]                 puls  u
A431 A6C4             (new-engine/memory):00306 [4]     !       lda   tlsf.blockHdr.size,u           ; No split, use the whole block
A433 847F             (new-engine/memory):00307 [2]             anda  #^tlsf.mask.FREE_BLOCK         ; Unset free block bit
A435 A7C4             (new-engine/memory):00308 [4]             sta   tlsf.blockHdr.size,u
A437 3344             (new-engine/memory):00309 [5]             leau  tlsf.MIN_BLOCK_SIZE,u          ; Skip block header when returning allocated memory address
A439 39               (new-engine/memory):00310 [5]             rts
                      (new-engine/memory):00311         
                      (new-engine/memory):00312         ;-----------------------------------------------------------------
                      (new-engine/memory):00313         ; tlsf.free
                      (new-engine/memory):00314         ; input REG : [U] allocated memory address to free
                      (new-engine/memory):00315         ; output REG : [X] memory address of merged free block header
                      (new-engine/memory):00316         ;-----------------------------------------------------------------
                      (new-engine/memory):00317         ; deallocate previously allocated memory
                      (new-engine/memory):00318         ;-----------------------------------------------------------------
A43A                  (new-engine/memory):00319         tlsf.free
                      (new-engine/memory):00320         !       ; check previous physical block
                      (new-engine/memory):00321                 ; and extend if already free 
A43A 335C             (new-engine/memory):00322 [5]             leau  -tlsf.BHDR_OVERHEAD,u
A43C AE42             (new-engine/memory):00323 [6]             ldx   tlsf.blockHdr.prev.phys,u
A43E 8CFFFF           (new-engine/memory):00324 [4]             cmpx  #tlsf.block.nullptr
A441 2722             (new-engine/memory):00325 [3]             beq   >                                 ; branch if no previous physical block
A443 EC84             (new-engine/memory):00326 [5]                 ldd   tlsf.blockHdr.size,x
A445 2A1E             (new-engine/memory):00327 [3]                 bpl   >                             ; branch if previous physical block is used
A447 3450             (new-engine/memory):00328 [9]                     pshs  x,u                       ; previous free block is ready to merge
A449 BDA4D6           (new-engine/memory):00329 [8]                     jsr   tlsf.mappingFreeBlock     ; compute fl/sl index of previous physical free block
A44C AEE4             (new-engine/memory):00330 [5]                     ldx   ,s
A44E BDA583           (new-engine/memory):00331 [8]                     jsr   tlsf.removeBlock          ; remove it from list and index
A451 3550             (new-engine/memory):00332 [9]                     puls  x,u
A453 ECC4             (new-engine/memory):00333 [5]                     ldd   tlsf.blockHdr.size,u      ; load size of deallocated block
A455 E384             (new-engine/memory):00334 [6]                     addd  tlsf.blockHdr.size,x      ; add size of previous free block, and keep free bit
A457 C30005           (new-engine/memory):00335 [4]                     addd  #tlsf.BHDR_OVERHEAD+1     ; add overhead of deallocated block (we are merging), all size are -1, so when adding two block size, we must add 1
A45A 3384             (new-engine/memory):00336 [4]                     leau  ,x                        ; U is now a ptr to merged block
A45C EDC4             (new-engine/memory):00337 [5]                     std   tlsf.blockHdr.size,u      ; set the new block size, prev physical is already up to date
A45E 847F             (new-engine/memory):00338 [2]                     anda  #^tlsf.mask.FREE_BLOCK    ; Unset free block bit
A460 C30005           (new-engine/memory):00339 [4]                     addd  #tlsf.BHDR_OVERHEAD+1
A463 2005             (new-engine/memory):00340 [3]                     bra   @checkNext                ; no need to reload the size, skip a bit of code
                      (new-engine/memory):00341         !
                      (new-engine/memory):00342                 ; check next physical block
                      (new-engine/memory):00343                 ; and extend if already free
A465 ECC4             (new-engine/memory):00344 [5]             ldd   tlsf.blockHdr.size,u                  ; used block do not have the free bit
A467 C30005           (new-engine/memory):00345 [4]             addd  #tlsf.BHDR_OVERHEAD+1                 ; size is stored as size-1
A46A                  (new-engine/memory):00346         @checkNext
A46A 30CB             (new-engine/memory):00347 [8]             leax  d,u                                   ; X is now a ptr to next block
A46C 2734             (new-engine/memory):00348 [3]             beq   >                                     ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A46E BCA138           (new-engine/memory):00349 [7]                 cmpx  tlsf.memoryPool.end
A471 242F             (new-engine/memory):00350 [3]                 bhs   >                                 ; branch if no next physical block (beyond memorypool)
A473 EF02             (new-engine/memory):00351 [6]                     stu   tlsf.blockHdr.prev.phys,x     ; if a merge was done in first part of the routine, need to update the physical link, otherwise will have no effect
A475 EC84             (new-engine/memory):00352 [5]                     ldd   tlsf.blockHdr.size,x
A477 2A29             (new-engine/memory):00353 [3]                     bpl   >                             ; branch if next physical block is used
A479 3450             (new-engine/memory):00354 [9]                         pshs  x,u
A47B BDA4D6           (new-engine/memory):00355 [8]                         jsr   tlsf.mappingFreeBlock     ; compute fl/sl index of next physical free block
A47E AEE4             (new-engine/memory):00356 [5]                         ldx   ,s
A480 BDA583           (new-engine/memory):00357 [8]                         jsr   tlsf.removeBlock          ; remove it from list and index
A483 3550             (new-engine/memory):00358 [9]                         puls  x,u
A485 ECC4             (new-engine/memory):00359 [5]                         ldd   tlsf.blockHdr.size,u
A487 847F             (new-engine/memory):00360 [2]                         anda  #^tlsf.mask.FREE_BLOCK    ; might be a used or free block (previously merged with previous), must unset free block bit
A489 E384             (new-engine/memory):00361 [6]                         addd  tlsf.blockHdr.size,x      ; add size of freed memory while keeping free bit on
A48B C30005           (new-engine/memory):00362 [4]                         addd  #tlsf.BHDR_OVERHEAD+1     ; add overhead of merged block, all size are -1, so when adding two block size, we must add 1
A48E EDC4             (new-engine/memory):00363 [5]                         std   tlsf.blockHdr.size,u
                      (new-engine/memory):00364         
A490 EC84             (new-engine/memory):00365 [5]                         ldd   tlsf.blockHdr.size,x      ; must update the following block to the new previous physical block
A492 847F             (new-engine/memory):00366 [2]                         anda  #^tlsf.mask.FREE_BLOCK
A494 C30005           (new-engine/memory):00367 [4]                         addd  #tlsf.BHDR_OVERHEAD+1     ; size is stored as size-1
A497 308B             (new-engine/memory):00368 [8]                         leax  d,x                       ; X is now a ptr to next physical of next physical (from deallocated block)
A499 2707             (new-engine/memory):00369 [3]                         beq   >                         ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A49B BCA138           (new-engine/memory):00370 [7]                             cmpx  tlsf.memoryPool.end
A49E 2402             (new-engine/memory):00371 [3]                             bhs   >                             ; branch if no next of next physical block (beyond memorypool)
A4A0 EF02             (new-engine/memory):00372 [6]                                 stu   tlsf.blockHdr.prev.phys,x ; update the physical link
                      (new-engine/memory):00373         !
                      (new-engine/memory):00374                 ; turn the used/merged block
                      (new-engine/memory):00375                 ; to a free one
A4A2 FFA520           (new-engine/memory):00376 [6]             stu   tlsf.insertBlock.location
A4A5 ECC4             (new-engine/memory):00377 [5]             ldd   tlsf.blockHdr.size,u
A4A7 8A80             (new-engine/memory):00378 [2]             ora   #tlsf.mask.FREE_BLOCK
A4A9 EDC4             (new-engine/memory):00379 [5]             std   tlsf.blockHdr.size,u
A4AB BDA4D6           (new-engine/memory):00380 [8]             jsr   tlsf.mappingFreeBlock
A4AE BDA51F           (new-engine/memory):00381 [8]             jsr   tlsf.insertBlock
A4B1 BEA520           (new-engine/memory):00382 [6]             ldx   tlsf.insertBlock.location
A4B4 39               (new-engine/memory):00383 [5]             rts
                      (new-engine/memory):00384         
                      (new-engine/memory):00385         ;-----------------------------------------------------------------
                      (new-engine/memory):00386         ; tlsf.mappingSearch
                      (new-engine/memory):00387         ; input  REG : [D] requested memory size
                      (new-engine/memory):00388         ; output VAR : [tlsf.rsize] requested memory size
                      (new-engine/memory):00389         ; output VAR : [tlsf.fl] first level index
                      (new-engine/memory):00390         ; output VAR : [tlsf.sl] second level index
                      (new-engine/memory):00391         ; output VAR : [D] tlsf.fl and tlsf.sl
                      (new-engine/memory):00392         ; trash      : [D,X]
                      (new-engine/memory):00393         ;-----------------------------------------------------------------
                      (new-engine/memory):00394         ; This function handle requested size from 1 up to $F800 (included)
                      (new-engine/memory):00395         ;-----------------------------------------------------------------
A4B5                  (new-engine/memory):00396         tlsf.mappingSearch
A4B5 FDA3FC           (new-engine/memory):00397 [6]             std   tlsf.rsize
                      (new-engine/memory):00398                 ; round up requested size to next list
A4B8 FDA5EC           (new-engine/memory):00399 [6]             std   tlsf.bsr.in
A4BB BDA5EE           (new-engine/memory):00400 [8]             jsr   tlsf.bsr                          ; Split memory size in power of two
A4BE C104             (new-engine/memory):00401 [2]             cmpb  #tlsf.PAD_BITS+tlsf.SL_BITS
A4C0 2205             (new-engine/memory):00402 [3]             bhi   >                                 ; Branch to round up if fl is not at minimum value
A4C2 FCA3FC           (new-engine/memory):00403 [6]                 ldd   tlsf.rsize
A4C5 2014             (new-engine/memory):00404 [3]                 bra   tlsf.mapping                  ; Skip round up
A4C7 C004             (new-engine/memory):00405 [2]     !       subb  #tlsf.SL_BITS
A4C9 58               (new-engine/memory):00406 [2]             aslb                                    ; Fit requested size
A4CA 8EA33B           (new-engine/memory):00407 [3]             ldx   #tlsf.map.mask                    ; to a level that contain
A4CD EC85             (new-engine/memory):00408 [6]             ldd   b,x                               ; big enough free list
A4CF 43               (new-engine/memory):00409 [2]             coma
A4D0 53               (new-engine/memory):00410 [2]             comb
A4D1 F3A3FC           (new-engine/memory):00411 [7]             addd  tlsf.rsize                        ; requested size is rounded up
A4D4 2005             (new-engine/memory):00412 [3]             bra   tlsf.mapping
A4D6                  (new-engine/memory):00413         tlsf.mappingFreeBlock
A4D6 847F             (new-engine/memory):00414 [2]             anda  #^tlsf.mask.FREE_BLOCK
A4D8 C30001           (new-engine/memory):00415 [4]             addd  #1
A4DB                  (new-engine/memory):00416         tlsf.mapping
A4DB FDA5EC           (new-engine/memory):00417 [6]             std   tlsf.bsr.in
A4DE BDA5EE           (new-engine/memory):00418 [8]             jsr   tlsf.bsr                          ; Split memory size in power of two
A4E1 F7A134           (new-engine/memory):00419 [5]             stb   tlsf.fl                           ; (..., 32>msize>=16 -> fl=5, 16>msize>=8 -> fl=4, ...)
A4E4 C103             (new-engine/memory):00420 [2]             cmpb  #tlsf.PAD_BITS+tlsf.SL_BITS-1     ; Test if there is a fl bit
A4E6 2205             (new-engine/memory):00421 [3]             bhi   @computesl                        ; if so branch
A4E8 C603             (new-engine/memory):00422 [2]                 ldb   #tlsf.PAD_BITS+tlsf.SL_BITS-1 ; No fl bit, cap to fl minimum value
A4EA F7A134           (new-engine/memory):00423 [5]                 stb   tlsf.fl
A4ED                  (new-engine/memory):00424         @computesl
A4ED 50               (new-engine/memory):00425 [2]             negb
A4EE CB14             (new-engine/memory):00426 [2]             addb  #types.WORD_BITS+tlsf.SL_BITS
A4F0 58               (new-engine/memory):00427 [2]             aslb                                    ; 2 bytes of instructions for each element of @rshift table
A4F1 8EA4F6           (new-engine/memory):00428 [3]             ldx   #@rshift-4                        ; Saves 4 useless bytes (max 14 shift with slbits=1)
A4F4 3A               (new-engine/memory):00429 [3]             abx                                     ; Cannot use indexed jump, so move x
A4F5 FCA5EC           (new-engine/memory):00430 [6]             ldd   tlsf.bsr.in                       ; Get rounded requested size to rescale sl based on fl
A4F8 6E84             (new-engine/memory):00431 [3]             jmp   ,x
A4FA                  (new-engine/memory):00432         @rshift
A4FA 44               (new-engine/memory):00433 [2]             lsra
A4FB 56               (new-engine/memory):00434 [2]             rorb
A4FC 44               (new-engine/memory):00435 [2]             lsra
A4FD 56               (new-engine/memory):00436 [2]             rorb
A4FE 44               (new-engine/memory):00437 [2]             lsra
A4FF 56               (new-engine/memory):00438 [2]             rorb
A500 44               (new-engine/memory):00439 [2]             lsra
A501 56               (new-engine/memory):00440 [2]             rorb
A502 44               (new-engine/memory):00441 [2]             lsra
A503 56               (new-engine/memory):00442 [2]             rorb
A504 44               (new-engine/memory):00443 [2]             lsra
A505 56               (new-engine/memory):00444 [2]             rorb
A506 44               (new-engine/memory):00445 [2]             lsra
A507 56               (new-engine/memory):00446 [2]             rorb
A508 44               (new-engine/memory):00447 [2]             lsra
A509 56               (new-engine/memory):00448 [2]             rorb
A50A 44               (new-engine/memory):00449 [2]             lsra
A50B 56               (new-engine/memory):00450 [2]             rorb
A50C 44               (new-engine/memory):00451 [2]             lsra
A50D 56               (new-engine/memory):00452 [2]             rorb
A50E 44               (new-engine/memory):00453 [2]             lsra
A50F 56               (new-engine/memory):00454 [2]             rorb
A510 44               (new-engine/memory):00455 [2]             lsra
A511 56               (new-engine/memory):00456 [2]             rorb
A512 44               (new-engine/memory):00457 [2]             lsra
A513 56               (new-engine/memory):00458 [2]             rorb
A514 44               (new-engine/memory):00459 [2]             lsra
A515 56               (new-engine/memory):00460 [2]             rorb
A516 C40F             (new-engine/memory):00461 [2]             andb  #tlsf.SL_SIZE-1               ; Keep only sl bits
A518 F7A135           (new-engine/memory):00462 [5]             stb   tlsf.sl
A51B B6A134           (new-engine/memory):00463 [5]             lda   tlsf.fl
A51E 39               (new-engine/memory):00464 [5]             rts
                      (new-engine/memory):00465         
                      (new-engine/memory):00466         ;-----------------------------------------------------------------
                      (new-engine/memory):00467         ; tlsf.insertBlock
                      (new-engine/memory):00468         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00469         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00470         ; input  REG : [X] memory block location
                      (new-engine/memory):00471         ;-----------------------------------------------------------------
                      (new-engine/memory):00472         ; insert a block into head matrix (LIFO)
                      (new-engine/memory):00473         ;-----------------------------------------------------------------
A51F                  (new-engine/memory):00474         tlsf.insertBlock
A51F 8E1234           (new-engine/memory):00475 [3]             ldx   #$1234
     A520             (new-engine/memory):00476         tlsf.insertBlock.location equ *-2
A522 CCFFFF           (new-engine/memory):00477 [3]             ldd   #tlsf.block.nullptr
A525 ED04             (new-engine/memory):00478 [6]             std   tlsf.blockHdr.prev,x     ; no previous free block
A527 B6A134           (new-engine/memory):00479 [5]             lda   tlsf.fl
A52A C620             (new-engine/memory):00480 [2]             ldb   #tlsf.SL_SIZE*2
A52C 3D               (new-engine/memory):00481 [11]            mul
A52D CEA0F0           (new-engine/memory):00482 [3]             ldu   #tlsf.headMatrix
A530 33CB             (new-engine/memory):00483 [8]             leau  d,u                      ; U is a ptr to head list (first level)
A532 F6A135           (new-engine/memory):00484 [5]             ldb   tlsf.sl
A535 58               (new-engine/memory):00485 [2]             aslb                           ; HeadMatrix store WORD
A536 33C5             (new-engine/memory):00486 [5]             leau  b,u                      ; U is a ptr to head list (first and second level)
A538 10AEC4           (new-engine/memory):00487 [6]             ldy   ,u                       ; Check if a block exists
A53B 10AF06           (new-engine/memory):00488 [7]             sty   tlsf.blockHdr.next,x     ; if no block, will put nullptr to next, if a block exists, link to existing
A53E 108CFFFF         (new-engine/memory):00489 [5]             cmpy  #tlsf.block.nullptr
A542 2702             (new-engine/memory):00490 [3]             beq   >                        ; Branch if no Block
A544 AF24             (new-engine/memory):00491 [6]                 stx   tlsf.blockHdr.prev,y ; Link to existing
A546 AFC4             (new-engine/memory):00492 [5]     !       stx   ,u                       ; Store new block as head of free list
A548 CEFFFF           (new-engine/memory):00493 [3]             ldu   #tlsf.block.nullptr
A54B EF04             (new-engine/memory):00494 [6]             stu   tlsf.blockHdr.prev,x     ; init prev of new block
                      (new-engine/memory):00495         
                      (new-engine/memory):00496                 ; insert into sl bitmap
A54D 8EA35B           (new-engine/memory):00497 [3]             ldx   #tlsf.map.bitset
A550 B6A134           (new-engine/memory):00498 [5]             lda   tlsf.fl
A553 48               (new-engine/memory):00499 [2]             asla                           ; mul by tlsf.sl.bitmap.size
A554 108EA138         (new-engine/memory):00500 [4]             ldy   #tlsf.sl.bitmaps
A558 31A6             (new-engine/memory):00501 [5]             leay  a,y
A55A F6A135           (new-engine/memory):00502 [5]             ldb   tlsf.sl
A55D 58               (new-engine/memory):00503 [2]             aslb
A55E 3A               (new-engine/memory):00504 [3]             abx
A55F ECA4             (new-engine/memory):00505 [5]             ldd   ,y
A561 2619             (new-engine/memory):00506 [3]             bne   >                        ; if a sl already exists, fl is also already set, branch
A563 AA84             (new-engine/memory):00507 [4]             ora   ,x
A565 EA01             (new-engine/memory):00508 [5]             orb   1,x
A567 EDA4             (new-engine/memory):00509 [5]             std   ,y
                      (new-engine/memory):00510         
                      (new-engine/memory):00511                 ; insert into fl bitmap
A569 8EA35B           (new-engine/memory):00512 [3]             ldx   #tlsf.map.bitset
A56C F6A134           (new-engine/memory):00513 [5]             ldb   tlsf.fl
A56F 58               (new-engine/memory):00514 [2]             aslb
A570 EC85             (new-engine/memory):00515 [6]             ldd   b,x
A572 BAA13C           (new-engine/memory):00516 [5]             ora   tlsf.fl.bitmap
A575 FAA13D           (new-engine/memory):00517 [5]             orb   tlsf.fl.bitmap+1
A578 FDA13C           (new-engine/memory):00518 [6]             std   tlsf.fl.bitmap
A57B 39               (new-engine/memory):00519 [5]             rts
                      (new-engine/memory):00520         !
A57C AA84             (new-engine/memory):00521 [4]             ora   ,x
A57E EA01             (new-engine/memory):00522 [5]             orb   1,x
A580 EDA4             (new-engine/memory):00523 [5]             std   ,y
A582 39               (new-engine/memory):00524 [5]             rts
                      (new-engine/memory):00525         
                      (new-engine/memory):00526         ;-----------------------------------------------------------------
                      (new-engine/memory):00527         ; tlsf.removeBlock
                      (new-engine/memory):00528         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00529         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00530         ; input  REG : [X] address of block header to remove
                      (new-engine/memory):00531         ; trash      : [D,U]
                      (new-engine/memory):00532         ;-----------------------------------------------------------------
                      (new-engine/memory):00533         ; remove a free block in his linked list, and update index
                      (new-engine/memory):00534         ;-----------------------------------------------------------------
A583                  (new-engine/memory):00535         tlsf.removeBlock
A583 EE04             (new-engine/memory):00536 [6]             ldu   tlsf.blockHdr.prev,x     ; check if removed block is a head
A585 1183FFFF         (new-engine/memory):00537 [5]             cmpu  #tlsf.block.nullptr
A589 2710             (new-engine/memory):00538 [3]             beq   tlsf.removeBlockHead     ; branch if yes
A58B 3184             (new-engine/memory):00539 [4]                 leay  ,x
A58D AE06             (new-engine/memory):00540 [6]                 ldx   tlsf.blockHdr.next,x ; not a head, just update the linked list
A58F AF46             (new-engine/memory):00541 [6]                 stx   tlsf.blockHdr.next,u
A591 8CFFFF           (new-engine/memory):00542 [4]                 cmpx  #tlsf.block.nullptr
A594 2704             (new-engine/memory):00543 [3]                 beq   >
A596 EC24             (new-engine/memory):00544 [6]                     ldd   tlsf.blockHdr.prev,y
A598 ED04             (new-engine/memory):00545 [6]                     std   tlsf.blockHdr.prev,x
A59A 39               (new-engine/memory):00546 [5]     !           rts
                      (new-engine/memory):00547         
                      (new-engine/memory):00548         ;-----------------------------------------------------------------
                      (new-engine/memory):00549         ; tlsf.removeBlockHead
                      (new-engine/memory):00550         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00551         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00552         ; output REG : [U] address of block at head of list
                      (new-engine/memory):00553         ; trash      : [D,X]
                      (new-engine/memory):00554         ;-----------------------------------------------------------------
                      (new-engine/memory):00555         ; remove a free block when at head of a list
                      (new-engine/memory):00556         ;-----------------------------------------------------------------
A59B                  (new-engine/memory):00557         tlsf.removeBlockHead
A59B B6A134           (new-engine/memory):00558 [5]             lda   tlsf.fl
A59E C620             (new-engine/memory):00559 [2]             ldb   #tlsf.SL_SIZE*2
A5A0 3D               (new-engine/memory):00560 [11]            mul
A5A1 8EA0F0           (new-engine/memory):00561 [3]             ldx   #tlsf.headMatrix
A5A4 308B             (new-engine/memory):00562 [8]             leax  d,x
A5A6 F6A135           (new-engine/memory):00563 [5]             ldb   tlsf.sl
A5A9 58               (new-engine/memory):00564 [2]             aslb                           ; headMatrix store WORD sized data
A5AA 3185             (new-engine/memory):00565 [5]             leay  b,x                      ; load head of free block list to Y
A5AC EEA4             (new-engine/memory):00566 [5]             ldu   ,y                       ; load block to U (output value)
                      (new-engine/memory):00567         
A5AE AE46             (new-engine/memory):00568 [6]             ldx   tlsf.blockHdr.next,u     ; load next block in list (if exists)
A5B0 AFA4             (new-engine/memory):00569 [5]             stx   ,y                       ; store new head of list
A5B2 8CFFFF           (new-engine/memory):00570 [4]             cmpx  #tlsf.block.nullptr
A5B5 2706             (new-engine/memory):00571 [3]             beq   >                        ; branch if no more head at this index
A5B7 CCFFFF           (new-engine/memory):00572 [3]                 ldd   #tlsf.block.nullptr  ; update new head
A5BA ED04             (new-engine/memory):00573 [6]                 std   tlsf.blockHdr.prev,x ; with no previous block
A5BC 39               (new-engine/memory):00574 [5]                 rts                                         
                      (new-engine/memory):00575         !
                      (new-engine/memory):00576                 ; remove index from sl bitmap
A5BD 8EA35B           (new-engine/memory):00577 [3]             ldx   #tlsf.map.bitset
A5C0 B6A134           (new-engine/memory):00578 [5]             lda   tlsf.fl
A5C3 48               (new-engine/memory):00579 [2]             asla                           ; mul by tlsf.sl.bitmap.size
A5C4 108EA138         (new-engine/memory):00580 [4]             ldy   #tlsf.sl.bitmaps
A5C8 31A6             (new-engine/memory):00581 [5]             leay  a,y
A5CA F6A135           (new-engine/memory):00582 [5]             ldb   tlsf.sl
A5CD 58               (new-engine/memory):00583 [2]             aslb
A5CE EC85             (new-engine/memory):00584 [6]             ldd   b,x
A5D0 43               (new-engine/memory):00585 [2]             coma
A5D1 53               (new-engine/memory):00586 [2]             comb
A5D2 A4A4             (new-engine/memory):00587 [4]             anda  ,y
A5D4 E421             (new-engine/memory):00588 [5]             andb  1,y
A5D6 EDA4             (new-engine/memory):00589 [5]             std   ,y
A5D8 2611             (new-engine/memory):00590 [3]             bne   >
                      (new-engine/memory):00591         
                      (new-engine/memory):00592                 ; remove index from fl bitmap
A5DA F6A134           (new-engine/memory):00593 [5]             ldb   tlsf.fl
A5DD 58               (new-engine/memory):00594 [2]             aslb
A5DE EC85             (new-engine/memory):00595 [6]             ldd   b,x
A5E0 43               (new-engine/memory):00596 [2]             coma
A5E1 53               (new-engine/memory):00597 [2]             comb
A5E2 B4A13C           (new-engine/memory):00598 [5]             anda  tlsf.fl.bitmap
A5E5 F4A13D           (new-engine/memory):00599 [5]             andb  tlsf.fl.bitmap+1
A5E8 FDA13C           (new-engine/memory):00600 [6]             std   tlsf.fl.bitmap
A5EB 39               (new-engine/memory):00601 [5]     !       rts
                      (new-engine/memory):00602         
                      (new-engine/memory):00603         ;-----------------------------------------------------------------
                      (new-engine/memory):00604         ; tlsf.bsr
                      (new-engine/memory):00605         ; input  VAR : [tlsf.bsr.in] 16bit integer (1-xFFFF)
                      (new-engine/memory):00606         ; output REG : [B] number of leading 0-bits
                      (new-engine/memory):00607         ;-----------------------------------------------------------------
                      (new-engine/memory):00608         ; Bit Scan Reverse (bsr) in a 16 bit integer,
                      (new-engine/memory):00609         ; searches for the most significant set bit (1 bit).
                      (new-engine/memory):00610         ; Output number is bit position from 0 to 15.
                      (new-engine/memory):00611         ; A zero input value will result in an unexpected behaviour,
                      (new-engine/memory):00612         ; value 0 will be returned.
                      (new-engine/memory):00613         ;-----------------------------------------------------------------
A5EC 0000             (new-engine/memory):00614         tlsf.bsr.in fdb 0 ; input parameter
A5EE                  (new-engine/memory):00615         tlsf.bsr
A5EE B6A5EC           (new-engine/memory):00616 [5]             lda   tlsf.bsr.in
A5F1 2704             (new-engine/memory):00617 [3]             beq   @lsb
A5F3                  (new-engine/memory):00618         @msb
A5F3 C60F             (new-engine/memory):00619 [2]             ldb   #types.WORD_BITS-1
A5F5 2005             (new-engine/memory):00620 [3]             bra   >
A5F7                  (new-engine/memory):00621         @lsb
A5F7 B6A5ED           (new-engine/memory):00622 [5]                 lda   tlsf.bsr.in+1
A5FA C607             (new-engine/memory):00623 [2]                 ldb   #types.BYTE_BITS-1
A5FC 85F0             (new-engine/memory):00624 [2]     !       bita  #$f0
A5FE 2606             (new-engine/memory):00625 [3]             bne   >
A600 C004             (new-engine/memory):00626 [2]                 subb  #4
A602 48               (new-engine/memory):00627 [2]                 lsla
A603 48               (new-engine/memory):00628 [2]                 lsla
A604 48               (new-engine/memory):00629 [2]                 lsla
A605 48               (new-engine/memory):00630 [2]                 lsla
A606 85C0             (new-engine/memory):00631 [2]     !       bita  #$c0
A608 2604             (new-engine/memory):00632 [3]             bne   >
A60A C002             (new-engine/memory):00633 [2]                 subb  #2
A60C 48               (new-engine/memory):00634 [2]                 lsla
A60D 48               (new-engine/memory):00635 [2]                 lsla
A60E 2B01             (new-engine/memory):00636 [3]     !       bmi   >
A610 5A               (new-engine/memory):00637 [2]                 decb
A611 39               (new-engine/memory):00638 [5]     !       rts
                      (new-engine/memory):00639         
                      (new-engine/memory):00640         ;-----------------------------------------------------------------
                      (new-engine/memory):00641         ; tlsf.ctz
                      (new-engine/memory):00642         ; input  VAR : [tlsf.ctz.in] 16bit integer
                      (new-engine/memory):00643         ; output REG : [B] number of trailing 0-bits
                      (new-engine/memory):00644         ;-----------------------------------------------------------------
                      (new-engine/memory):00645         ; Count trailing zeros in a 16 bit integer,
                      (new-engine/memory):00646         ; also known as Number of trailing zeros (ntz)
                      (new-engine/memory):00647         ; Output number is from 0 to 15
                      (new-engine/memory):00648         ; A zero input value will result in an unexpected behaviour,
                      (new-engine/memory):00649         ; value 15 will be returned.
                      (new-engine/memory):00650         ;-----------------------------------------------------------------
A612 0000             (new-engine/memory):00651         tlsf.ctz.in fdb 0 ; input parameter
A614                  (new-engine/memory):00652         tlsf.ctz
A614 B6A613           (new-engine/memory):00653 [5]             lda   tlsf.ctz.in+1
A617 2703             (new-engine/memory):00654 [3]             beq   @msb
A619                  (new-engine/memory):00655         @lsb
A619 5F               (new-engine/memory):00656 [2]             clrb
A61A 2005             (new-engine/memory):00657 [3]             bra   >
A61C                  (new-engine/memory):00658         @msb
A61C B6A612           (new-engine/memory):00659 [5]                 lda   tlsf.ctz.in
A61F C608             (new-engine/memory):00660 [2]                 ldb   #types.BYTE_BITS
A621 850F             (new-engine/memory):00661 [2]     !       bita  #$0f
A623 2606             (new-engine/memory):00662 [3]             bne   >
A625 CB04             (new-engine/memory):00663 [2]                 addb  #4
A627 44               (new-engine/memory):00664 [2]                 lsra
A628 44               (new-engine/memory):00665 [2]                 lsra
A629 44               (new-engine/memory):00666 [2]                 lsra
A62A 44               (new-engine/memory):00667 [2]                 lsra
A62B 8503             (new-engine/memory):00668 [2]     !       bita  #$03
A62D 2604             (new-engine/memory):00669 [3]             bne   >
A62F CB02             (new-engine/memory):00670 [2]                 addb  #2
A631 44               (new-engine/memory):00671 [2]                 lsra
A632 44               (new-engine/memory):00672 [2]                 lsra
A633 8501             (new-engine/memory):00673 [2]     !       bita  #$01
A635 2601             (new-engine/memory):00674 [3]             bne   >
A637 5C               (new-engine/memory):00675 [2]                 incb
A638 39               (new-engine/memory):00676 [5]     !       rts
                      (new-engine/memory):00677         
                      (C:\Users\bhrou\gi):00124                 INCLUDE   "new-engine/memory/malloc/tlsf-realloc.asm"
                      (new-engine/memory):00001         ;-----------------------------------------------------------------
                      (new-engine/memory):00002         ; tlsf.realloc
                      (new-engine/memory):00003         ; input  REG : [D] requested user memory size
                      (new-engine/memory):00004         ; input  REG : [U] actual allocated memory address
                      (new-engine/memory):00005         ; output REG : [U] new allocated memory address
                      (new-engine/memory):00006         ;-----------------------------------------------------------------
                      (new-engine/memory):00007         ; reallocate memory, should be deallocated with a call to free
                      (new-engine/memory):00008         ; WARNING : this does not initialize memory bytes
                      (new-engine/memory):00009         ;
                      (new-engine/memory):00010         ; If requested memory size is lower than actual size, it will
                      (new-engine/memory):00011         ; shrink the allocated space by keeping data in place.
                      (new-engine/memory):00012         ;
                      (new-engine/memory):00013         ; If requested memory size is greater than actual size, it will
                      (new-engine/memory):00014         ; look if next physical area is free and enough to hold new size,
                      (new-engine/memory):00015         ; it will keep data in place.
                      (new-engine/memory):00016         ;
                      (new-engine/memory):00017         ; Otherwise realloc will use malloc, copy the existing data and
                      (new-engine/memory):00018         ; free previous allocated memory.
                      (new-engine/memory):00019         ;-----------------------------------------------------------------
A639                  (new-engine/memory):00020         tlsf.realloc
A639 3436             (new-engine/memory):00021 [11]            pshs  d,x,y
                      (new-engine/memory):00022         
                      (new-engine/memory):00023                 ; initial check
A63B 10830004         (new-engine/memory):00024 [5]             cmpd  #tlsf.MIN_BLOCK_SIZE           ; Apply minimum size to requested memory size
A63F 2405             (new-engine/memory):00025 [3]             bhs   >
A641 CC0004           (new-engine/memory):00026 [3]                 ldd   #tlsf.MIN_BLOCK_SIZE
A644 EDE4             (new-engine/memory):00027 [5]                 std   ,s                         ; update input parameter: requested user memory size
A646 1083F800         (new-engine/memory):00028 [5]     !       cmpd  #$F800                         ; greater values are not handled by mappingSearch function
A64A 230C             (new-engine/memory):00029 [3]             bls   >                              ; this prevents unexpected behaviour
A64C 8606             (new-engine/memory):00030 [2]                 lda   #tlsf.err.realloc.MAX_SIZE
A64E B7A131           (new-engine/memory):00031 [5]                 sta   tlsf.err
A651 BEA132           (new-engine/memory):00032 [6]                 ldx   tlsf.err.callback
A654 3268             (new-engine/memory):00033 [5]                 leas  8,s                        ; restore the stack position (dependency with pshs at routine start)
A656 6E84             (new-engine/memory):00034 [3]                 jmp   ,x
                      (new-engine/memory):00035         !
                      (new-engine/memory):00036                 ; determines the strategy for realloc
                      (new-engine/memory):00037                 ; based on the physical state of memory
A658 EC5C             (new-engine/memory):00038 [6]             ldd   tlsf.blockHdr.size-tlsf.BHDR_OVERHEAD,u
A65A C30001           (new-engine/memory):00039 [4]             addd  #1                             ; get actual block size, size is stored as size-1
A65D 10A3E4           (new-engine/memory):00040 [7]             cmpd  ,s                             ; Get requested size
A660 2602             (new-engine/memory):00041 [3]             bne   >
A662 35B6             (new-engine/memory):00042 [13]    @same       puls  d,x,y,pc                   ; nothing to do ... this is the actual size
A664 250D             (new-engine/memory):00043 [3]     !       blo   @growth                        ; branch if actual size is strictly lower than requested size
A666 B30008           (new-engine/memory):00044 [7]             subd  sizeof{tlsf.blockHdr}          ; does actual size allows to split the block ?
A669 10A3E4           (new-engine/memory):00045 [7]             cmpd  ,s
A66C 2402             (new-engine/memory):00046 [3]             bhs   @shrink
A66E 35B6             (new-engine/memory):00047 [13]                puls  d,x,y,pc                   ; nothing to do ... requested size is lower but does not allow a new block (need a minimum size)
A670 7EA726           (new-engine/memory):00048 [4]     @shrink jmp   tlsf.realloc.shrink
A673                  (new-engine/memory):00049         @growth
A673 30CB             (new-engine/memory):00050 [8]             leax  d,u                            ; X is now a ptr to next physical block header
A675 2717             (new-engine/memory):00051 [3]             beq   tlsf.realloc.do                ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A677 BCA138           (new-engine/memory):00052 [7]             cmpx  tlsf.memoryPool.end
A67A 2412             (new-engine/memory):00053 [3]             bhs   tlsf.realloc.do                ; branch if no next physical block (beyond memorypool)
A67C 6D84             (new-engine/memory):00054 [6]             tst   tlsf.blockHdr.size,x
A67E 2A0E             (new-engine/memory):00055 [3]             bpl   tlsf.realloc.do                ; branch if next physical block is not free
A680 E384             (new-engine/memory):00056 [6]             addd  tlsf.blockHdr.size,x           ; add to actual size, the size of next free block
A682 C30005           (new-engine/memory):00057 [4]             addd  #tlsf.BHDR_OVERHEAD+1          ; available size takes header in account in case of merge, size is stored as size-1
A685 847F             (new-engine/memory):00058 [2]             anda  #^tlsf.mask.FREE_BLOCK         ; unset free block bit
A687 A3E4             (new-engine/memory):00059 [6]             subd  ,s                             ; substract requested size
A689 2B03             (new-engine/memory):00060 [3]             bmi   tlsf.realloc.do                ; branch if next physical block does not have enough space
A68B 7EA74B           (new-engine/memory):00061 [4]             jmp   tlsf.realloc.growth            ; branch if next physical block fits, [d] is the remaining free memory bytes
                      (new-engine/memory):00062         
                      (new-engine/memory):00063         
                      (new-engine/memory):00064         ;-----------------------------------------------------------------
                      (new-engine/memory):00065         ; tlsf.realloc.do
                      (new-engine/memory):00066         ;
                      (new-engine/memory):00067         ; input  REG : [U] ptr to current block data
                      (new-engine/memory):00068         ; output REG : [U] new allocated memory address
                      (new-engine/memory):00069         ;-----------------------------------------------------------------
                      (new-engine/memory):00070         ; Make a realloc by doing a free/malloc
                      (new-engine/memory):00071         ; Data is copied
                      (new-engine/memory):00072         ;
                      (new-engine/memory):00073         ; When a realloc error is raised (out of memory) :
                      (new-engine/memory):00074         ; Data may have been moved as best effort to provide more space,
                      (new-engine/memory):00075         ; freed memory block may have been merged with prev or prev/next
                      (new-engine/memory):00076         ; physical block(s)
                      (new-engine/memory):00077         ;-----------------------------------------------------------------
A68E                  (new-engine/memory):00078         tlsf.realloc.do
                      (new-engine/memory):00079                 ; Saves 4 bytes that will otherwise be lost when changing occupied block to free
A68E ECC4             (new-engine/memory):00080 [5]             ldd   tlsf.blockHdr.prev-tlsf.BHDR_OVERHEAD,u
A690 FDA708           (new-engine/memory):00081 [6]             std   @data12
A693 EC42             (new-engine/memory):00082 [6]             ldd   tlsf.blockHdr.next-tlsf.BHDR_OVERHEAD,u
A695 FDA70D           (new-engine/memory):00083 [6]             std   @data34
A698 FFA6F6           (new-engine/memory):00084 [6]             stu   @start                                  ; Saves data location for later restoration
A69B EC5C             (new-engine/memory):00085 [6]             ldd   tlsf.blockHdr.size-tlsf.BHDR_OVERHEAD,u ; Saves size for copying data
A69D C3FFFD           (new-engine/memory):00086 [4]             addd  #1-4                                    ; size is stored as size-1, get rid of the 4 bytes already copied
A6A0 FDA6FB           (new-engine/memory):00087 [6]             std   @size
                      (new-engine/memory):00088         ;
                      (new-engine/memory):00089                 ; reallocate memory
A6A3 BDA43A           (new-engine/memory):00090 [8]             jsr   tlsf.free
A6A6 BFA6C6           (new-engine/memory):00091 [6]             stx   @freeBlock                              ; Free block can be ahead of current deallocated block when merging
A6A9 FCA132           (new-engine/memory):00092 [6]             ldd   tlsf.err.callback                       ; Backup routine to call when tlsf raise an error
A6AC FDA712           (new-engine/memory):00093 [6]             std   @callback
A6AF CCA2D4           (new-engine/memory):00094 [3]             ldd   #tlsf.err.return
A6B2 FDA132           (new-engine/memory):00095 [6]             std   tlsf.err.callback                       ; setup return callback
A6B5 7FA131           (new-engine/memory):00096 [7]             clr   tlsf.err                                ; clear error code
A6B8 ECE4             (new-engine/memory):00097 [5]             ldd   ,s                                      ; Get requested size
A6BA BDA37B           (new-engine/memory):00098 [8]             jsr   tlsf.malloc                             ; try a malloc (size in [d])
A6BD B6A131           (new-engine/memory):00099 [5]             lda   tlsf.err
A6C0 272E             (new-engine/memory):00100 [3]             beq   @continue                               ; Branch if no error
                      (new-engine/memory):00101         ;
                      (new-engine/memory):00102         ;       Handle out of memory
A6C2 7FA131           (new-engine/memory):00103 [7]             clr   tlsf.err                                ; Clear error code
A6C5 CE0000           (new-engine/memory):00104 [3]             ldu   #0                                      ; Out of memory, so reallocate the original block
     A6C6             (new-engine/memory):00105         @freeBlock equ *-2                                    ; When the block was freed, it may have been merged
A6C8 ECC4             (new-engine/memory):00106 [5]             ldd   tlsf.blockHdr.size,u                    ; with prev or prev/next physical block(s)
A6CA 847F             (new-engine/memory):00107 [2]             anda  #^tlsf.mask.FREE_BLOCK
A6CC A7C4             (new-engine/memory):00108 [4]             sta   tlsf.blockHdr.size,u
A6CE C30001           (new-engine/memory):00109 [4]             addd  #1                                      ; Get (merged) free block size
A6D1 3456             (new-engine/memory):00110 [11]            pshs  d,x,u                                   ; Reallocate free block
A6D3 BDA4D6           (new-engine/memory):00111 [8]             jsr   tlsf.mappingFreeBlock                   ; by computing fl/sl index (size in [d])
A6D6 BEA6C6           (new-engine/memory):00112 [6]             ldx   @freeBlock
A6D9 BDA583           (new-engine/memory):00113 [8]             jsr   tlsf.removeBlock                        ; and removing free block from list and index (free block in [x])
A6DC 3556             (new-engine/memory):00114 [11]            puls  d,x,u
A6DE 3344             (new-engine/memory):00115 [5]             leau  4,u                                     ; [u] is reallocated block data
A6E0 10A3E4           (new-engine/memory):00116 [7]             cmpd  ,s                                      ; Check reallocated block against requested size
A6E3 240B             (new-engine/memory):00117 [3]             bhs   @continue                               ; Branch if reallocated block is large enough
A6E5 8607             (new-engine/memory):00118 [2]             lda   #tlsf.err.realloc.OUT_OF_MEMORY
A6E7 B7A131           (new-engine/memory):00119 [5]             sta   tlsf.err                                ; Raise an error if realllocated block is not large enough
A6EA 11B3A6F6         (new-engine/memory):00120 [8]             cmpu  @start                                  ; Check against original block addr
A6EE 2715             (new-engine/memory):00121 [3]             beq   @skipMemcpy                             ; Skip memcpy if block has not moved, but restore the 4 erased bytes
                      (new-engine/memory):00122                                                               ; or move data to newly allocated block, even if block size is not enough
A6F0                  (new-engine/memory):00123         @continue
                      (new-engine/memory):00124                 ; move data to newly allocated space
A6F0 3144             (new-engine/memory):00125 [5]             leay  4,u                                     ; [y] destination + skip 4 bytes that were saved earlier
A6F2 FFA703           (new-engine/memory):00126 [6]             stu   @u
A6F5 CE0000           (new-engine/memory):00127 [3]             ldu   #0                                      ; [u] source
     A6F6             (new-engine/memory):00128         @start  equ   *-2
A6F8 3344             (new-engine/memory):00129 [5]             leau  4,u
A6FA CC0000           (new-engine/memory):00130 [3]             ldd   #0                                      ; [d] remaining size to copy
     A6FB             (new-engine/memory):00131         @size   equ   *-2
A6FD 2725             (new-engine/memory):00132 [3]             beq   @rts
A6FF BDA7A6           (new-engine/memory):00133 [8]             jsr   memcpy.uyd
                      (new-engine/memory):00134         ;
                      (new-engine/memory):00135                 ; restore 4 erased bytes by free routine
A702 CE0000           (new-engine/memory):00136 [3]             ldu   #0                                      ; Restore new allocated addr in u
     A703             (new-engine/memory):00137         @u      equ   *-2
A705                  (new-engine/memory):00138         @skipMemcpy
A705 31C4             (new-engine/memory):00139 [4]             leay  ,u                                      ; [y] destination
A707 CC0000           (new-engine/memory):00140 [3]             ldd   #0                                      ; First 4 bytes are special case
     A708             (new-engine/memory):00141         @data12 equ   *-2
A70A EDA1             (new-engine/memory):00142 [8]             std   ,y++
A70C CC0000           (new-engine/memory):00143 [3]             ldd   #0
     A70D             (new-engine/memory):00144         @data34 equ   *-2
A70F EDA1             (new-engine/memory):00145 [8]             std   ,y++
                      (new-engine/memory):00146         ;
A711 CC0000           (new-engine/memory):00147 [3]             ldd   #0
     A712             (new-engine/memory):00148         @callback equ *-2
A714 FDA132           (new-engine/memory):00149 [6]             std   tlsf.err.callback                       ; setup return callback
A717 B6A131           (new-engine/memory):00150 [5]             lda   tlsf.err
A71A 2708             (new-engine/memory):00151 [3]             beq   @rts
A71C 3536             (new-engine/memory):00152 [11]            puls  d,x,y
A71E 3262             (new-engine/memory):00153 [5]             leas  2,s                                     ; Handle realloc error
A720 6E9FA132         (new-engine/memory):00154 [8]             jmp   [tlsf.err.callback]                     ; by calling user callback
A724 35B6             (new-engine/memory):00155 [13]    @rts    puls  d,x,y,pc
                      (new-engine/memory):00156         
                      (new-engine/memory):00157         
                      (new-engine/memory):00158         ;-----------------------------------------------------------------
                      (new-engine/memory):00159         ; tlsf.realloc.shrink
                      (new-engine/memory):00160         ;
                      (new-engine/memory):00161         ; input  REG : [U] ptr to current block data
                      (new-engine/memory):00162         ; output REG : [U] unchanged allocated memory address
                      (new-engine/memory):00163         ;-----------------------------------------------------------------
                      (new-engine/memory):00164         ; Make a realloc by reducing current block size, and making a new
                      (new-engine/memory):00165         ; free block.
                      (new-engine/memory):00166         ; Data stays in place
                      (new-engine/memory):00167         ;-----------------------------------------------------------------
A726                  (new-engine/memory):00168         tlsf.realloc.shrink
A726 FFA747           (new-engine/memory):00169 [6]             stu   @u
A729 305C             (new-engine/memory):00170 [5]             leax  -tlsf.BHDR_OVERHEAD,u                        ; x is now block to shrink (header)
A72B ECE4             (new-engine/memory):00171 [5]             ldd   ,s                                           ; get requested size
A72D 33CB             (new-engine/memory):00172 [8]             leau  d,u                                          ; set u to new block location (header)
A72F EC84             (new-engine/memory):00173 [5]             ldd   tlsf.blockHdr.size,x                         ; load size-1 of data block
A731 A3E4             (new-engine/memory):00174 [6]             subd  ,s                                           ; substract requested size
A733 830004           (new-engine/memory):00175 [4]             subd  #tlsf.BHDR_OVERHEAD                          ; substract new block overhead
A736 EDC4             (new-engine/memory):00176 [5]             std   tlsf.blockHdr.size,u                         ; set size of new block
A738 AF42             (new-engine/memory):00177 [6]             stx   tlsf.blockHdr.prev.phys,u                    ; set previous physical block of new block
A73A ECE4             (new-engine/memory):00178 [5]             ldd   ,s                                           ; get requested size
A73C 830001           (new-engine/memory):00179 [4]             subd  #1                                           ; size is stored as -1
A73F ED84             (new-engine/memory):00180 [5]             std   tlsf.blockHdr.size,x                         ; update shrinked bock to requested size
A741 3344             (new-engine/memory):00181 [5]             leau  tlsf.BHDR_OVERHEAD,u                         ; set input parameter for free routine: block (data) location
A743 BDA43A           (new-engine/memory):00182 [8]             jsr   tlsf.free
A746 CE0000           (new-engine/memory):00183 [3]             ldu   #0                                           ; return unchanged allocated addr in u
     A747             (new-engine/memory):00184         @u      equ   *-2
A749 35B6             (new-engine/memory):00185 [13]            puls  d,x,y,pc
                      (new-engine/memory):00186         
                      (new-engine/memory):00187         
                      (new-engine/memory):00188         ;-----------------------------------------------------------------
                      (new-engine/memory):00189         ; tlsf.realloc.growth
                      (new-engine/memory):00190         ;
                      (new-engine/memory):00191         ; input  REG : [U] ptr to current block data
                      (new-engine/memory):00192         ; input  REG : [X] ptr to next physical block header
                      (new-engine/memory):00193         ; input  REG : [D] size of remaining bytes in next physical block
                      (new-engine/memory):00194         ; output REG : [U] unchanged allocated memory address
                      (new-engine/memory):00195         ;-----------------------------------------------------------------
                      (new-engine/memory):00196         ; Make a realloc by enlarging current block size
                      (new-engine/memory):00197         ; Data stays in place
                      (new-engine/memory):00198         ;-----------------------------------------------------------------
A74B                  (new-engine/memory):00199         tlsf.realloc.growth
A74B FFA7A2           (new-engine/memory):00200 [6]             stu   @u
A74E FDA760           (new-engine/memory):00201 [6]             std   @freeSize
                      (new-engine/memory):00202         ;
                      (new-engine/memory):00203                 ; remove following free block from index
A751 EC84             (new-engine/memory):00204 [5]             ldd   tlsf.blockHdr.size,x
A753 3450             (new-engine/memory):00205 [9]             pshs  x,u
A755 BDA4D6           (new-engine/memory):00206 [8]             jsr   tlsf.mappingFreeBlock                   ; compute fl/sl index of next physical free block
A758 AEE4             (new-engine/memory):00207 [5]             ldx   ,s
A75A BDA583           (new-engine/memory):00208 [8]             jsr   tlsf.removeBlock                        ; remove it from list and index
A75D 3550             (new-engine/memory):00209 [9]             puls  x,u
                      (new-engine/memory):00210         ;
                      (new-engine/memory):00211                 ; check room for a new free block
A75F CC0000           (new-engine/memory):00212 [3]             ldd   #0
     A760             (new-engine/memory):00213         @freeSize equ *-2
A762 10830008         (new-engine/memory):00214 [5]             cmpd  #sizeof{tlsf.blockHdr}
A766 2406             (new-engine/memory):00215 [3]             bhs   >                                       ; branch if enough room to build a new free block
A768 E3E4             (new-engine/memory):00216 [6]             addd  ,s                                      ; no room for a split, add requested size to free size
A76A ED5C             (new-engine/memory):00217 [6]             std   tlsf.blockHdr.size-tlsf.BHDR_OVERHEAD,u ; update size of currently allocated block
A76C 35B6             (new-engine/memory):00218 [13]            puls  d,x,y,pc                                ; return
                      (new-engine/memory):00219         !
                      (new-engine/memory):00220                 ; create a new free block
A76E ECE4             (new-engine/memory):00221 [5]             ldd   ,s                                      ; get requested size
A770 30CB             (new-engine/memory):00222 [8]             leax  d,u                                     ; [x] is now ptr to new free block header to create
A772 335C             (new-engine/memory):00223 [5]             leau  -tlsf.BHDR_OVERHEAD,u                   ; [u] is now ptr to header
A774 EF02             (new-engine/memory):00224 [6]             stu   tlsf.blockHdr.prev.phys,x               ; link new free block with previous physical
A776 ECE4             (new-engine/memory):00225 [5]             ldd   ,s                                      ; get requested size
A778 830001           (new-engine/memory):00226 [4]             subd  #1                                      ; size is stored as -1
A77B EDC4             (new-engine/memory):00227 [5]             std   tlsf.blockHdr.size,u                    ; update growthed bock to requested size
A77D FCA760           (new-engine/memory):00228 [6]             ldd   @freeSize
A780 830005           (new-engine/memory):00229 [4]             subd  #tlsf.BHDR_OVERHEAD+1
A783 8A80             (new-engine/memory):00230 [2]             ora   #tlsf.mask.FREE_BLOCK
A785 ED84             (new-engine/memory):00231 [5]             std   tlsf.blockHdr.size,x                    ; store size of new free block
A787 BFA520           (new-engine/memory):00232 [6]             stx   tlsf.insertBlock.location               ; setup parameter for block insertion
A78A FCA760           (new-engine/memory):00233 [6]             ldd   @freeSize
A78D 318B             (new-engine/memory):00234 [8]             leay  d,x                                     ; Y is now a ptr to next physical of free block
A78F 2708             (new-engine/memory):00235 [3]             beq   @nonext                                 ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A791 10BCA138         (new-engine/memory):00236 [8]                 cmpy  tlsf.memoryPool.end
A795 2402             (new-engine/memory):00237 [3]                 bhs   @nonext                             ; branch if no next of next physical block (beyond memorypool)
A797 AF22             (new-engine/memory):00238 [6]                     stx   tlsf.blockHdr.prev.phys,y       ; update the physical link
A799                  (new-engine/memory):00239         @nonext
A799 EC84             (new-engine/memory):00240 [5]             ldd   tlsf.blockHdr.size,x
A79B BDA4D6           (new-engine/memory):00241 [8]             jsr   tlsf.mappingFreeBlock
A79E BDA51F           (new-engine/memory):00242 [8]             jsr   tlsf.insertBlock
A7A1 CE0000           (new-engine/memory):00243 [3]             ldu   #0                                      ; restore allocated addr in u
     A7A2             (new-engine/memory):00244         @u      equ   *-2
A7A4 35B6             (new-engine/memory):00245 [13]            puls  d,x,y,pc
                      (C:\Users\bhrou\gi):00125                 INCLUDE   "new-engine/memory/memcpy/memcpy.asm"
                      (new-engine/memory):00001         ;-----------------------------------------------------------------
                      (new-engine/memory):00002         ; memcpy.uyd
                      (new-engine/memory):00003         ; input  REG : [U] source
                      (new-engine/memory):00004         ; input  REG : [Y] destination
                      (new-engine/memory):00005         ; input  REG : [D] nb of bytes to copy
                      (new-engine/memory):00006         ;-----------------------------------------------------------------
                      (new-engine/memory):00007         ; copy bytes from a memory location to another one
                      (new-engine/memory):00008         ;----------------------------------------------------------------- 
                      (new-engine/memory):00009         
A7A6                  (new-engine/memory):00010         memcpy.uyd
A7A6 3476             (new-engine/memory):00011 [13]            pshs  d,x,y,u
                      (new-engine/memory):00012         
                      (new-engine/memory):00013                 ; compute end of src data cmp
A7A8 30CB             (new-engine/memory):00014 [8]             leax d,u
A7AA BFA7D6           (new-engine/memory):00015 [6]             stx  @cmpu+2
                      (new-engine/memory):00016         ;
                      (new-engine/memory):00017                 ; is nb of bytes to copy an odd value ?
A7AD 54               (new-engine/memory):00018 [2]             lsrb
A7AE 2404             (new-engine/memory):00019 [3]             bcc  >
A7B0 3702             (new-engine/memory):00020 [6]             pulu a
A7B2 A7A0             (new-engine/memory):00021 [6]             sta  ,y+
                      (new-engine/memory):00022         !
                      (new-engine/memory):00023                 ; is nb of bytes to copy a multiple of 2 ?
A7B4 54               (new-engine/memory):00024 [2]             lsrb
A7B5 2404             (new-engine/memory):00025 [3]             bcc  >
A7B7 3710             (new-engine/memory):00026 [7]             pulu x
A7B9 AFA1             (new-engine/memory):00027 [8]             stx  ,y++
                      (new-engine/memory):00028         !
                      (new-engine/memory):00029                 ; is nb of bytes to copy a multiple of 4 ?
A7BB 54               (new-engine/memory):00030 [2]             lsrb
A7BC 2416             (new-engine/memory):00031 [3]             bcc  @cmpu
A7BE 3716             (new-engine/memory):00032 [9]             pulu d,x
A7C0 EDA1             (new-engine/memory):00033 [8]             std  ,y++
A7C2 AFA1             (new-engine/memory):00034 [8]             stx  ,y++
A7C4 200E             (new-engine/memory):00035 [3]             bra  @cmpu
                      (new-engine/memory):00036         ;
                      (new-engine/memory):00037                 ; process bytes by multiple of 8
A7C6 3716             (new-engine/memory):00038 [9]     !       pulu d,x
A7C8 EDA4             (new-engine/memory):00039 [5]             std  ,y  
A7CA AF22             (new-engine/memory):00040 [6]             stx  2,y 
A7CC 3716             (new-engine/memory):00041 [9]             pulu d,x 
A7CE ED24             (new-engine/memory):00042 [6]             std  4,y
A7D0 AF26             (new-engine/memory):00043 [6]             stx  6,y
A7D2 3128             (new-engine/memory):00044 [5]             leay 8,y
A7D4                  (new-engine/memory):00045         @cmpu
A7D4 11830000         (new-engine/memory):00046 [5]             cmpu #0  ; end ?
A7D8 26EC             (new-engine/memory):00047 [3]             bne  <   ; not yet ...
A7DA                  (new-engine/memory):00048         @rts 
A7DA 35F6             (new-engine/memory):00049 [15]            puls d,x,y,u,pc
                      (C:\Users\bhrou\gi):00126         
                      (C:\Users\bhrou\gi):00127         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00128         ; loader.scene.loadDefault
                      (C:\Users\bhrou\gi):00129         ;
                      (C:\Users\bhrou\gi):00130         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00131         ; Load and run the default scene at boot time
                      (C:\Users\bhrou\gi):00132         ; settings can be overided by defines at build time
                      (C:\Users\bhrou\gi):00133         ;-----------------------------------------------------------------
A7DC                  (C:\Users\bhrou\gi):00134         loader.scene.loadDefault
                      (C:\Users\bhrou\gi):00135         
                      (C:\Users\bhrou\gi):00136                 ; init allocator
A7DC CC1000           (C:\Users\bhrou\gi):00137 [3]             ldd   #loader.DEFAULT_DYNAMIC_MEMORY_SIZE
A7DF 8EAE9E           (C:\Users\bhrou\gi):00138 [3]             ldx   #loader.memoryPool
A7E2 BDA2D7           (C:\Users\bhrou\gi):00139 [8]             jsr   tlsf.init
                      (C:\Users\bhrou\gi):00140         
                      (C:\Users\bhrou\gi):00141                 ; load directory entries
A7E5 8600             (C:\Users\bhrou\gi):00142 [2]             lda   #loader.DEFAULT_SCENE_DIR_ID
A7E7 BDA935           (C:\Users\bhrou\gi):00143 [8]             jsr   loader.dir.load
                      (C:\Users\bhrou\gi):00144         
                      (C:\Users\bhrou\gi):00145                 ; load default scene file
A7EA 8E0003           (C:\Users\bhrou\gi):00146 [3]             ldx   #loader.DEFAULT_SCENE_FILE_ID
A7ED BDA7FB           (C:\Users\bhrou\gi):00147 [8]             jsr   loader.scene.load
                      (C:\Users\bhrou\gi):00148         
A7F0 C605             (C:\Users\bhrou\gi):00149 [2]             ldb   #loader.DEFAULT_SCENE_EXEC_PAGE
A7F2 CE0000           (C:\Users\bhrou\gi):00150 [3]             ldu   #loader.DEFAULT_SCENE_EXEC_ADDR
A7F5 BDAAFB           (C:\Users\bhrou\gi):00151 [8]             jsr   switchpage
A7F8 7E0000           (C:\Users\bhrou\gi):00152 [4]             jmp   loader.DEFAULT_SCENE_EXEC_ADDR
                      (C:\Users\bhrou\gi):00153         
                      (C:\Users\bhrou\gi):00154         
                      (C:\Users\bhrou\gi):00155         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00156         ; loader.scene.load
                      (C:\Users\bhrou\gi):00157         ;
                      (C:\Users\bhrou\gi):00158         ; input  REG : [X] scene file id
                      (C:\Users\bhrou\gi):00159         ;
                      (C:\Users\bhrou\gi):00160         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00161         ; Load a scene
                      (C:\Users\bhrou\gi):00162         ;-----------------------------------------------------------------
A7FB                  (C:\Users\bhrou\gi):00163         loader.scene.load
                      (C:\Users\bhrou\gi):00164         
                      (C:\Users\bhrou\gi):00165                 ; load default scene file
A7FB BDA825           (C:\Users\bhrou\gi):00166 [8]             jsr   loader.file.malloc
                      (C:\Users\bhrou\gi):00167         
A7FE C604             (C:\Users\bhrou\gi):00168 [2]             ldb   #loader.PAGE
A800 BDA9ED           (C:\Users\bhrou\gi):00169 [8]             jsr   loader.file.load
                      (C:\Users\bhrou\gi):00170         
                      (C:\Users\bhrou\gi):00171                 ; batch load files from disk, before decompression
                      (C:\Users\bhrou\gi):00172                 ; to benefit from sector interlacing
A803 8EA9ED           (C:\Users\bhrou\gi):00173 [3]             ldx   #loader.file.load
A806 BFA129           (C:\Users\bhrou\gi):00174 [6]             stx   loader.scene.routine
A809 BDA842           (C:\Users\bhrou\gi):00175 [8]             jsr   loader.scene.apply
                      (C:\Users\bhrou\gi):00176         
A80C 8EAB43           (C:\Users\bhrou\gi):00177 [3]             ldx   #loader.file.decompress
A80F BFA129           (C:\Users\bhrou\gi):00178 [6]             stx   loader.scene.routine
A812 BDA842           (C:\Users\bhrou\gi):00179 [8]             jsr   loader.scene.apply
                      (C:\Users\bhrou\gi):00180         
A815 8EACB3           (C:\Users\bhrou\gi):00181 [3]             ldx   #loader.file.linkData.load
A818 BFA129           (C:\Users\bhrou\gi):00182 [6]             stx   loader.scene.routine
A81B BDA842           (C:\Users\bhrou\gi):00183 [8]             jsr   loader.scene.apply
                      (C:\Users\bhrou\gi):00184         
                      (C:\Users\bhrou\gi):00185                 ; once all files are loaded, proceed to the link
A81E BDAD63           (C:\Users\bhrou\gi):00186 [8]             jsr   loader.file.link
                      (C:\Users\bhrou\gi):00187         
                      (C:\Users\bhrou\gi):00188                 ; free memory for default scene file
A821 BDA43A           (C:\Users\bhrou\gi):00189 [8]             jsr   tlsf.free
A824 39               (C:\Users\bhrou\gi):00190 [5]             rts
                      (C:\Users\bhrou\gi):00191         
                      (C:\Users\bhrou\gi):00192         
                      (C:\Users\bhrou\gi):00193         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00194         ; loader.file.malloc
                      (C:\Users\bhrou\gi):00195         ;
                      (C:\Users\bhrou\gi):00196         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00197         ; output REG : [U] ptr to allocated memory
                      (C:\Users\bhrou\gi):00198         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00199         ; Allocate memory for a file
                      (C:\Users\bhrou\gi):00200         ;-----------------------------------------------------------------
A825                  (C:\Users\bhrou\gi):00201         loader.file.malloc
A825 3410             (C:\Users\bhrou\gi):00202 [7]             pshs  x
A827 BDAB32           (C:\Users\bhrou\gi):00203 [8]             jsr   loader.dir.getFile
                      (C:\Users\bhrou\gi):00204         
A82A EC24             (C:\Users\bhrou\gi):00205 [6]             ldd   dir.entry.sizea,y  ; Check for empty file flag
A82C 1083FF00         (C:\Users\bhrou\gi):00206 [5]             cmpd  #$ff00
A830 2604             (C:\Users\bhrou\gi):00207 [3]             bne   >
A832 CE0000           (C:\Users\bhrou\gi):00208 [3]             ldu   #0                ; If file is empty, return 0
A835 39               (C:\Users\bhrou\gi):00209 [5]             rts
                      (C:\Users\bhrou\gi):00210         !
A836 ECA4             (C:\Users\bhrou\gi):00211 [5]             ldd   dir.entry.sizeu,y  ; Read file data size
A838 843F             (C:\Users\bhrou\gi):00212 [2]             anda  #%00111111        ; File size is stored in 14 bits
A83A C30001           (C:\Users\bhrou\gi):00213 [4]             addd  #1                ; File size is stored as size-1
A83D BDA37B           (C:\Users\bhrou\gi):00214 [8]             jsr   tlsf.malloc
A840 3590             (C:\Users\bhrou\gi):00215 [9]             puls  x,pc
                      (C:\Users\bhrou\gi):00216         
                      (C:\Users\bhrou\gi):00217         
                      (C:\Users\bhrou\gi):00218         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00219         ; loader.scene.apply
                      (C:\Users\bhrou\gi):00220         ;
                      (C:\Users\bhrou\gi):00221         ; input  REG : [U] ptr to scene data
                      (C:\Users\bhrou\gi):00222         ; input  VAR : [loader.scene.routine] routine to run against files
                      (C:\Users\bhrou\gi):00223         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00224         ; Apply a scene by loading files to RAM
                      (C:\Users\bhrou\gi):00225         ; 3 different entry types can be combined in a scene.
                      (C:\Users\bhrou\gi):00226         ; endmarker is type: %00
                      (C:\Users\bhrou\gi):00227         ;-----------------------------------------------------------------
A842                  (C:\Users\bhrou\gi):00228         loader.scene.apply
                      (C:\Users\bhrou\gi):00229                 ; parse scene data and load dir/files
A842 3454             (C:\Users\bhrou\gi):00230 [10]            pshs  b,x,u
A844 31C4             (C:\Users\bhrou\gi):00231 [4]             leay  ,u
                      (C:\Users\bhrou\gi):00232                 
                      (C:\Users\bhrou\gi):00233                 ; a scene contains a list of blocks with a certain type
                      (C:\Users\bhrou\gi):00234                 ; a block type of 0 is the end marker
A846                  (C:\Users\bhrou\gi):00235         @nextblock
A846 A6A4             (C:\Users\bhrou\gi):00236 [4]             lda   scene.header.type,y
A848 84C0             (C:\Users\bhrou\gi):00237 [2]             anda  #%11000000
A84A 2602             (C:\Users\bhrou\gi):00238 [3]             bne   >
A84C 35D4             (C:\Users\bhrou\gi):00239 [12]            puls  b,x,u,pc                  ; end marker %00 found, return
                      (C:\Users\bhrou\gi):00240         !
A84E 8140             (C:\Users\bhrou\gi):00241 [2]             cmpa  #%01000000
A850 2605             (C:\Users\bhrou\gi):00242 [3]             bne   >
A852 BDA865           (C:\Users\bhrou\gi):00243 [8]             jsr   loader.scene.apply.type01
A855 20EF             (C:\Users\bhrou\gi):00244 [3]             bra   @nextblock
A857 8180             (C:\Users\bhrou\gi):00245 [2]     !       cmpa  #%10000000
A859 2605             (C:\Users\bhrou\gi):00246 [3]             bne   >
A85B BDA886           (C:\Users\bhrou\gi):00247 [8]             jsr   loader.scene.apply.type10
A85E 20E6             (C:\Users\bhrou\gi):00248 [3]             bra   @nextblock
A860 BDA8CF           (C:\Users\bhrou\gi):00249 [8]     !       jsr   loader.scene.apply.type11
A863 20E1             (C:\Users\bhrou\gi):00250 [3]             bra   @nextblock
                      (C:\Users\bhrou\gi):00251         
                      (C:\Users\bhrou\gi):00252         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00253         ; loader.scene.apply.type01
                      (C:\Users\bhrou\gi):00254         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00255         ; type %01 | nb files (0-16383)
                      (C:\Users\bhrou\gi):00256         ; dest page \
                      (C:\Users\bhrou\gi):00257         ; dest addr  - n times (for each file)
                      (C:\Users\bhrou\gi):00258         ; file id   /
                      (C:\Users\bhrou\gi):00259         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00260         
A865                  (C:\Users\bhrou\gi):00261         loader.scene.apply.type01
A865 ECA4             (C:\Users\bhrou\gi):00262 [5]             ldd   scene.header.nbfiles,y
A867 3122             (C:\Users\bhrou\gi):00263 [5]             leay  sizeof{scene.header},y
A869 843F             (C:\Users\bhrou\gi):00264 [2]             anda  #%00111111
A86B FDA12B           (C:\Users\bhrou\gi):00265 [6]             std   loader.scene.fileCount
A86E                  (C:\Users\bhrou\gi):00266         @loop
A86E E6A4             (C:\Users\bhrou\gi):00267 [4]             ldb   scene.page,y
A870 EE21             (C:\Users\bhrou\gi):00268 [6]             ldu   scene.address,y
A872 AE23             (C:\Users\bhrou\gi):00269 [6]             ldx   scene.fileid,y
A874 AD9FA129         (C:\Users\bhrou\gi):00270 [12]            jsr   [loader.scene.routine]
A878 3125             (C:\Users\bhrou\gi):00271 [5]             leay  sizeof{scene},y
A87A FCA12B           (C:\Users\bhrou\gi):00272 [6]             ldd   loader.scene.fileCount
A87D 830001           (C:\Users\bhrou\gi):00273 [4]             subd  #1
A880 FDA12B           (C:\Users\bhrou\gi):00274 [6]             std   loader.scene.fileCount
A883 26E9             (C:\Users\bhrou\gi):00275 [3]             bne   @loop
A885 39               (C:\Users\bhrou\gi):00276 [5]             rts
                      (C:\Users\bhrou\gi):00277         
                      (C:\Users\bhrou\gi):00278         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00279         ; loader.scene.apply.type10
                      (C:\Users\bhrou\gi):00280         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00281         ; type %10 | nb files (0-16383)
                      (C:\Users\bhrou\gi):00282         ; dest page
                      (C:\Users\bhrou\gi):00283         ; dest addr
                      (C:\Users\bhrou\gi):00284         ; file id - n times (for each file)
                      (C:\Users\bhrou\gi):00285         ;-----------------------------------------------------------------
A886                  (C:\Users\bhrou\gi):00286         loader.scene.apply.type10
A886 ECA4             (C:\Users\bhrou\gi):00287 [5]             ldd   scene.header.nbfiles,y
A888 3122             (C:\Users\bhrou\gi):00288 [5]             leay  sizeof{scene.header},y
A88A 843F             (C:\Users\bhrou\gi):00289 [2]             anda  #%00111111
A88C FDA12B           (C:\Users\bhrou\gi):00290 [6]             std   loader.scene.fileCount
A88F E6A4             (C:\Users\bhrou\gi):00291 [4]             ldb   scene.page,y
A891 EE21             (C:\Users\bhrou\gi):00292 [6]             ldu   scene.address,y
A893 3123             (C:\Users\bhrou\gi):00293 [5]             leay  scene.fileid,y
A895                  (C:\Users\bhrou\gi):00294         @loop
A895 AEA1             (C:\Users\bhrou\gi):00295 [8]             ldx   ,y++               ; Read file id
A897 3424             (C:\Users\bhrou\gi):00296 [8]             pshs  b,y                ; Save page id [b] and current scene data cursor [y]
                      (C:\Users\bhrou\gi):00297         ;
A899 BDAB32           (C:\Users\bhrou\gi):00298 [8]             jsr   loader.dir.getFile
A89C ECA4             (C:\Users\bhrou\gi):00299 [5]             ldd   dir.entry.sizeu,y   ; Read file data size
A89E 843F             (C:\Users\bhrou\gi):00300 [2]             anda  #%00111111         ; File size is stored in 14 bits
A8A0 C30001           (C:\Users\bhrou\gi):00301 [4]             addd  #1                 ; File size is stored as size-1
A8A3 FDA8C0           (C:\Users\bhrou\gi):00302 [6]             std   @size
A8A6 31CB             (C:\Users\bhrou\gi):00303 [8]             leay  d,u                ; Will the file fit the page ?
A8A8 3504             (C:\Users\bhrou\gi):00304 [6]             puls  b                  ; Restore page id
A8AA 108C4000         (C:\Users\bhrou\gi):00305 [5]             cmpy  #$4000             ; Branch if data fits memory page
A8AE 230A             (C:\Users\bhrou\gi):00306 [3]             bls   >
A8B0 CE0000           (C:\Users\bhrou\gi):00307 [3]             ldu   #0                 ; else move to next page
A8B3 5C               (C:\Users\bhrou\gi):00308 [2]             incb
                      (C:\Users\bhrou\gi):00309          IFDEF boot.CHECK_MEMORY_EXT
A8B4 C11F             (C:\Users\bhrou\gi):00310 [2]             cmpb  #31
                      (C:\Users\bhrou\gi):00311          ELSE
                      (C:\Users\bhrou\gi):00312                 cmpb  #15
                      (C:\Users\bhrou\gi):00313          ENDC
A8B6 2302             (C:\Users\bhrou\gi):00314 [3]             bls   >
A8B8 20FE             (C:\Users\bhrou\gi):00315 [3]             bra   *                  ; no more memory !
                      (C:\Users\bhrou\gi):00316         !
A8BA AD9FA129         (C:\Users\bhrou\gi):00317 [12]            jsr   [loader.scene.routine]
A8BE 33C91234         (C:\Users\bhrou\gi):00318 [8]             leau  $1234,u
     A8C0             (C:\Users\bhrou\gi):00319         @size   equ   *-2
A8C2 3520             (C:\Users\bhrou\gi):00320 [7]             puls  y
                      (C:\Users\bhrou\gi):00321         ;
A8C4 BEA12B           (C:\Users\bhrou\gi):00322 [6]             ldx   loader.scene.fileCount
A8C7 301F             (C:\Users\bhrou\gi):00323 [5]             leax  -1,x
A8C9 BFA12B           (C:\Users\bhrou\gi):00324 [6]             stx   loader.scene.fileCount
A8CC 26C7             (C:\Users\bhrou\gi):00325 [3]             bne   @loop
A8CE 39               (C:\Users\bhrou\gi):00326 [5]             rts
                      (C:\Users\bhrou\gi):00327         
                      (C:\Users\bhrou\gi):00328         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00329         ; loader.scene.apply.type11
                      (C:\Users\bhrou\gi):00330         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00331         ; type %11 | nb files (0-16383)
                      (C:\Users\bhrou\gi):00332         ; dest page
                      (C:\Users\bhrou\gi):00333         ; dest addr
                      (C:\Users\bhrou\gi):00334         ; start file id
                      (C:\Users\bhrou\gi):00335         ;-----------------------------------------------------------------
A8CF                  (C:\Users\bhrou\gi):00336         loader.scene.apply.type11
A8CF ECA4             (C:\Users\bhrou\gi):00337 [5]             ldd   scene.header.nbfiles,y
A8D1 3122             (C:\Users\bhrou\gi):00338 [5]             leay  sizeof{scene.header},y
A8D3 843F             (C:\Users\bhrou\gi):00339 [2]             anda  #%00111111
A8D5 FDA12B           (C:\Users\bhrou\gi):00340 [6]             std   loader.scene.fileCount
A8D8 E6A4             (C:\Users\bhrou\gi):00341 [4]             ldb   scene.page,y
A8DA EE21             (C:\Users\bhrou\gi):00342 [6]             ldu   scene.address,y
A8DC AE23             (C:\Users\bhrou\gi):00343 [6]             ldx   scene.fileid,y
A8DE 3125             (C:\Users\bhrou\gi):00344 [5]             leay  sizeof{scene},y
A8E0 3420             (C:\Users\bhrou\gi):00345 [7]             pshs  y
A8E2                  (C:\Users\bhrou\gi):00346         @loop
A8E2 F7A8F9           (C:\Users\bhrou\gi):00347 [5]             stb   @b1                ; Save page id [b]
                      (C:\Users\bhrou\gi):00348         ;
A8E5 BDAB32           (C:\Users\bhrou\gi):00349 [8]             jsr   loader.dir.getFile
A8E8 10BFA914         (C:\Users\bhrou\gi):00350 [7]             sty   @y
A8EC ECA4             (C:\Users\bhrou\gi):00351 [5]             ldd   dir.entry.sizeu,y   ; Read file data size
A8EE 843F             (C:\Users\bhrou\gi):00352 [2]             anda  #%00111111         ; File size is stored in 14 bits
A8F0 C30001           (C:\Users\bhrou\gi):00353 [4]             addd  #1                 ; File size is stored as size-1
A8F3 FDA910           (C:\Users\bhrou\gi):00354 [6]             std   @size
A8F6 31CB             (C:\Users\bhrou\gi):00355 [8]             leay  d,u                ; Will the file fit the page ?
A8F8 C600             (C:\Users\bhrou\gi):00356 [2]             ldb   #0                 ; Restore page id
     A8F9             (C:\Users\bhrou\gi):00357         @b1     equ   *-1
A8FA 108C4000         (C:\Users\bhrou\gi):00358 [5]             cmpy  #$4000             ; Branch if data fits memory page
A8FE 230A             (C:\Users\bhrou\gi):00359 [3]             bls   >
A900 CE0000           (C:\Users\bhrou\gi):00360 [3]             ldu   #0                 ; else move to next page
A903 5C               (C:\Users\bhrou\gi):00361 [2]             incb
                      (C:\Users\bhrou\gi):00362          IFDEF boot.CHECK_MEMORY_EXT
A904 C11F             (C:\Users\bhrou\gi):00363 [2]             cmpb  #31
                      (C:\Users\bhrou\gi):00364          ELSE
                      (C:\Users\bhrou\gi):00365                 cmpb  #15
                      (C:\Users\bhrou\gi):00366          ENDC
A906 2302             (C:\Users\bhrou\gi):00367 [3]             bls   >
A908 20FE             (C:\Users\bhrou\gi):00368 [3]             bra   *                  ; no more memory !
                      (C:\Users\bhrou\gi):00369         !
A90A AD9FA129         (C:\Users\bhrou\gi):00370 [12]            jsr   [loader.scene.routine]
A90E 33C91234         (C:\Users\bhrou\gi):00371 [8]             leau  $1234,u
     A910             (C:\Users\bhrou\gi):00372         @size   equ   *-2
                      (C:\Users\bhrou\gi):00373         ;
A912 108E0000         (C:\Users\bhrou\gi):00374 [4]             ldy   #0
     A914             (C:\Users\bhrou\gi):00375         @y      equ   *-2
A916 F7A925           (C:\Users\bhrou\gi):00376 [5]             stb   @b
A919 C601             (C:\Users\bhrou\gi):00377 [2]             ldb   #1                ; move to next file id, offset of 1
A91B A6A4             (C:\Users\bhrou\gi):00378 [4]             lda   dir.entry.bitfld,y
A91D 48               (C:\Users\bhrou\gi):00379 [2]             lsla
A91E C900             (C:\Users\bhrou\gi):00380 [2]             adcb  #0                ; add one offset if file is compressed 
A920 48               (C:\Users\bhrou\gi):00381 [2]             lsla
A921 C900             (C:\Users\bhrou\gi):00382 [2]             adcb  #0                ; add one offset if file is dynamically linked
A923 3A               (C:\Users\bhrou\gi):00383 [3]             abx                     ; apply new file id
A924 C600             (C:\Users\bhrou\gi):00384 [2]             ldb   #0
     A925             (C:\Users\bhrou\gi):00385         @b      equ   *-1
                      (C:\Users\bhrou\gi):00386         ;
A926 7DA12C           (C:\Users\bhrou\gi):00387 [7]             tst   loader.scene.fileCount+1
A929 2603             (C:\Users\bhrou\gi):00388 [3]             bne   >
A92B 7AA12B           (C:\Users\bhrou\gi):00389 [7]             dec   loader.scene.fileCount
A92E 7AA12C           (C:\Users\bhrou\gi):00390 [7]     !       dec   loader.scene.fileCount+1
A931 26AF             (C:\Users\bhrou\gi):00391 [3]             bne   @loop
A933 35A0             (C:\Users\bhrou\gi):00392 [9]             puls  y,pc
                      (C:\Users\bhrou\gi):00393         
                      (C:\Users\bhrou\gi):00394         ;---------------------------------------
                      (C:\Users\bhrou\gi):00395         ; loader.dir.load
                      (C:\Users\bhrou\gi):00396         ;
                      (C:\Users\bhrou\gi):00397         ; input  REG : [A] diskId
                      (C:\Users\bhrou\gi):00398         ;---------------------------------------
                      (C:\Users\bhrou\gi):00399         ; Load directory entries
                      (C:\Users\bhrou\gi):00400         ;---------------------------------------
A935                  (C:\Users\bhrou\gi):00401         loader.dir.load
A935 B7A121           (C:\Users\bhrou\gi):00402 [5]             sta   >diskId             ; Save desired directory id for later check
A938 FEA125           (C:\Users\bhrou\gi):00403 [6]             ldu   >loader.dir
A93B 2708             (C:\Users\bhrou\gi):00404 [3]             beq   >
A93D A143             (C:\Users\bhrou\gi):00405 [5]             cmpa  dir.header.diskId,u
A93F 2601             (C:\Users\bhrou\gi):00406 [3]             bne   @free
A941 39               (C:\Users\bhrou\gi):00407 [5]             rts                       ; Requested diskId is already loaded, return
A942                  (C:\Users\bhrou\gi):00408         @free   
A942 BDA43A           (C:\Users\bhrou\gi):00409 [8]             jsr   tlsf.free           ; Requested diskId is different, free actual directory
                      (C:\Users\bhrou\gi):00410         !
A945 CCA021           (C:\Users\bhrou\gi):00411 [3]             ldd   #ptsec
A948 FDA125           (C:\Users\bhrou\gi):00412 [6]             std   >loader.dir
                      (C:\Users\bhrou\gi):00413         ; set default dir location on disk
A94B C601             (C:\Users\bhrou\gi):00414 [2]             ldb   #$01                ; D: [face]
A94D 8E0000           (C:\Users\bhrou\gi):00415 [3]             ldx   #$0000              ; X: [track] [sector]
                      (C:\Users\bhrou\gi):00416         ; read first directory sector
A950 B6A121           (C:\Users\bhrou\gi):00417 [5]             lda   >diskId
A953 810A             (C:\Users\bhrou\gi):00418 [2]             cmpa  #10                 ; This version handle the display of disk id range 0-9
A955 2504             (C:\Users\bhrou\gi):00419 [3]             blo   @ascii
A957 86A1             (C:\Users\bhrou\gi):00420 [2]             lda   #33+128             ; Print an esclamation when disk id is over 9
A959 2002             (C:\Users\bhrou\gi):00421 [3]             bra   >
A95B 8BB0             (C:\Users\bhrou\gi):00422 [2]     @ascii  adda  #48+128             ; Base index for ascii numbers plus end string bit flag
A95D B7AAFA           (C:\Users\bhrou\gi):00423 [5]     !       sta   >messdiskId         ; Update message string with id
A960 D749             (C:\Users\bhrou\gi):00424 [4]             stb   <map.DK.DRV         ; Set directory location
A962 1F10             (C:\Users\bhrou\gi):00425 [6]             tfr   x,d                 ; on floppy disk
A964 974B             (C:\Users\bhrou\gi):00426 [4]             sta   <map.DK.TRK+1       ; B is loaded with sector id
A966 10BEA125         (C:\Users\bhrou\gi):00427 [7]             ldy   >loader.dir    ; Loading address for
A96A 109F4F           (C:\Users\bhrou\gi):00428 [6]             sty   <map.DK.BUF         ; directory data
A96D 8602             (C:\Users\bhrou\gi):00429 [2]             lda   #$02                ; Read code
A96F 9748             (C:\Users\bhrou\gi):00430 [4]             sta   <map.DK.OPC         ; operation
A971 CEAA9A           (C:\Users\bhrou\gi):00431 [3]             ldu   #sclist             ; Interleave list
A974 8EAADD           (C:\Users\bhrou\gi):00432 [3]             ldx   #messIO             ; Info message
A977 A6C5             (C:\Users\bhrou\gi):00433 [5]             lda   b,u                 ; Get sector
A979 974C             (C:\Users\bhrou\gi):00434 [4]             sta   <map.DK.SEC         ; number
A97B BDE004           (C:\Users\bhrou\gi):00435 [8]     @retry  jsr   >map.DKCONT         ; Load sector
A97E 240A             (C:\Users\bhrou\gi):00436 [3]             bcc   >                   ; Skip if no error
A980 BDE004           (C:\Users\bhrou\gi):00437 [8]             jsr   >map.DKCONT         ; Reload sector
A983 2405             (C:\Users\bhrou\gi):00438 [3]             bcc   >                   ; Skip if no error
A985 BDAAC0           (C:\Users\bhrou\gi):00439 [8]     @info   jsr   >info               ; Error
A988 20F1             (C:\Users\bhrou\gi):00440 [3]             bra   @retry
                      (C:\Users\bhrou\gi):00441         ; check for directory tag match
A98A 8EAAEB           (C:\Users\bhrou\gi):00442 [3]     !       ldx   #messinsertdisk
A98D A6A4             (C:\Users\bhrou\gi):00443 [4]             lda   dir.header.tag,y
A98F 8149             (C:\Users\bhrou\gi):00444 [2]             cmpa  #'I'
A991 26F2             (C:\Users\bhrou\gi):00445 [3]             bne   @info
A993 A621             (C:\Users\bhrou\gi):00446 [5]             lda   dir.header.tag+1,y
A995 8144             (C:\Users\bhrou\gi):00447 [2]             cmpa  #'D'
A997 26EC             (C:\Users\bhrou\gi):00448 [3]             bne   @info
A999 A622             (C:\Users\bhrou\gi):00449 [5]             lda   dir.header.tag+2,y
A99B 8158             (C:\Users\bhrou\gi):00450 [2]             cmpa  #'X'
A99D 26E6             (C:\Users\bhrou\gi):00451 [3]             bne   @info
                      (C:\Users\bhrou\gi):00452         ; check for directory id match
A99F A623             (C:\Users\bhrou\gi):00453 [5]             lda   dir.header.diskId,y
A9A1 B1A121           (C:\Users\bhrou\gi):00454 [5]             cmpa  >diskId
A9A4 26DF             (C:\Users\bhrou\gi):00455 [3]             bne   @info
                      (C:\Users\bhrou\gi):00456         ; read remaining directory entries
A9A6 A624             (C:\Users\bhrou\gi):00457 [5]             lda   dir.header.nsector,y ; init nb sectors to read      
A9A8 B7A122           (C:\Users\bhrou\gi):00458 [5]             sta   >nsect
                      (C:\Users\bhrou\gi):00459         ; allocate memory
A9AB F7A9BA           (C:\Users\bhrou\gi):00460 [5]             stb   @b
A9AE 5F               (C:\Users\bhrou\gi):00461 [2]             clrb
A9AF BDA37B           (C:\Users\bhrou\gi):00462 [8]             jsr   tlsf.malloc
A9B2 FFA125           (C:\Users\bhrou\gi):00463 [6]             stu   >loader.dir
A9B5 31C90100         (C:\Users\bhrou\gi):00464 [8]             leay  256,u               ; First sector will be copied later
A9B9 C600             (C:\Users\bhrou\gi):00465 [2]             ldb   #0
     A9BA             (C:\Users\bhrou\gi):00466         @b      equ   *-1
A9BB CEAA9A           (C:\Users\bhrou\gi):00467 [3]             ldu   #sclist
A9BE 8EAADD           (C:\Users\bhrou\gi):00468 [3]             ldx   #messIO             ; Error message
A9C1 2011             (C:\Users\bhrou\gi):00469 [3]             bra   @next
A9C3 A6C5             (C:\Users\bhrou\gi):00470 [5]     @load   lda   b,u                 ; Get sector
A9C5 974C             (C:\Users\bhrou\gi):00471 [4]             sta   <map.DK.SEC         ; number
A9C7 BDE004           (C:\Users\bhrou\gi):00472 [8]             jsr   >map.DKCONT         ; Load sector
A9CA 2408             (C:\Users\bhrou\gi):00473 [3]             bcc   @next               ; Skip if no error
A9CC BDE004           (C:\Users\bhrou\gi):00474 [8]             jsr   >map.DKCONT         ; Reload sector
A9CF 2403             (C:\Users\bhrou\gi):00475 [3]             bcc   @next               ; Skip if no error
A9D1 7EAAAA           (C:\Users\bhrou\gi):00476 [4]             jmp   err                 ; Error
A9D4 0C4F             (C:\Users\bhrou\gi):00477 [6]     @next   inc   <map.DK.BUF         ; Move sector ptr
A9D6 5C               (C:\Users\bhrou\gi):00478 [2]             incb                      ; Sector+1
A9D7 7AA122           (C:\Users\bhrou\gi):00479 [7]             dec   >nsect              ; Next
A9DA 26E7             (C:\Users\bhrou\gi):00480 [3]             bne   @load               ; sector
                      (C:\Users\bhrou\gi):00481         ; copy first sector into allocated memory
A9DC 8680             (C:\Users\bhrou\gi):00482 [2]             lda   #128
A9DE 8EA021           (C:\Users\bhrou\gi):00483 [3]             ldx   #ptsec
A9E1 10BEA125         (C:\Users\bhrou\gi):00484 [7]             ldy   loader.dir
A9E5 EE81             (C:\Users\bhrou\gi):00485 [8]     !       ldu   ,x++               ; Read data
A9E7 EFA1             (C:\Users\bhrou\gi):00486 [8]             stu   ,y++               ; Write data
A9E9 4A               (C:\Users\bhrou\gi):00487 [2]             deca                     ; Until last
A9EA 26F9             (C:\Users\bhrou\gi):00488 [3]             bne   <                  ; data reached
A9EC 39               (C:\Users\bhrou\gi):00489 [5]             rts
                      (C:\Users\bhrou\gi):00490         
                      (C:\Users\bhrou\gi):00491         
                      (C:\Users\bhrou\gi):00492         ;---------------------------------------
                      (C:\Users\bhrou\gi):00493         ; loader.file.load
                      (C:\Users\bhrou\gi):00494         ;
                      (C:\Users\bhrou\gi):00495         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00496         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):00497         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):00498         ;
                      (C:\Users\bhrou\gi):00499         ; output REG : [D] $ff00 = empty file
                      (C:\Users\bhrou\gi):00500         ;---------------------------------------
                      (C:\Users\bhrou\gi):00501         ; Load a file from disk to RAM
                      (C:\Users\bhrou\gi):00502         ; by file id
                      (C:\Users\bhrou\gi):00503         ;---------------------------------------
A9ED                  (C:\Users\bhrou\gi):00504         loader.file.load
A9ED 347E             (C:\Users\bhrou\gi):00505 [14]            pshs  dp,d,x,y,u
A9EF BDAAFB           (C:\Users\bhrou\gi):00506 [8]             jsr   switchpage
                      (C:\Users\bhrou\gi):00507         * Prepare loading
A9F2 BDAB32           (C:\Users\bhrou\gi):00508 [8]             jsr   loader.dir.getFile
A9F5 EC24             (C:\Users\bhrou\gi):00509 [6]             ldd   dir.entry.sizea,y   ; check empty file flag
A9F7 1083FF00         (C:\Users\bhrou\gi):00510 [5]             cmpd  #$ff00
A9FB 2601             (C:\Users\bhrou\gi):00511 [3]             bne   >
A9FD 39               (C:\Users\bhrou\gi):00512 [5]             rts                      ; file is empty, exit
A9FE E6A4             (C:\Users\bhrou\gi):00513 [4]     !       ldb   dir.entry.bitfld,y  ; test if compressed data
AA00 2A08             (C:\Users\bhrou\gi):00514 [3]             bpl   >                  ; skip if not compressed
AA02 EC28             (C:\Users\bhrou\gi):00515 [6]             ldd   dir.entry.coffset,y ; get offset to write data
AA04 33CB             (C:\Users\bhrou\gi):00516 [8]             leau  d,u
AA06 2002             (C:\Users\bhrou\gi):00517 [3]             bra   >
                      (C:\Users\bhrou\gi):00518         
                      (C:\Users\bhrou\gi):00519         ;---------------------------------------
                      (C:\Users\bhrou\gi):00520         ; loader.file.loadByDir
                      (C:\Users\bhrou\gi):00521         ;
                      (C:\Users\bhrou\gi):00522         ; input  REG : [Y] ptr to file directory
                      (C:\Users\bhrou\gi):00523         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):00524         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):00525         ;---------------------------------------
                      (C:\Users\bhrou\gi):00526         ; Load a file from disk to RAM
                      (C:\Users\bhrou\gi):00527         ; by ptr to file directory
                      (C:\Users\bhrou\gi):00528         ;---------------------------------------
AA08                  (C:\Users\bhrou\gi):00529         loader.file.loadByDir
AA08 347E             (C:\Users\bhrou\gi):00530 [14]            pshs  dp,d,x,y,u
AA0A 8660             (C:\Users\bhrou\gi):00531 [2]     !       lda   #map.REG.DP
AA0C 1F8B             (C:\Users\bhrou\gi):00532 [6]             tfr   a,dp                ; Set DP
AA0E E626             (C:\Users\bhrou\gi):00533 [5]             ldb   dir.entry.nsector,y ; Get number of sectors
AA10 F7A122           (C:\Users\bhrou\gi):00534 [5]             stb   >nsect              ; Set sector count
AA13 EC22             (C:\Users\bhrou\gi):00535 [6]             ldd   dir.entry.track,y   ; Set track, face and
AA15 FDA123           (C:\Users\bhrou\gi):00536 [6]             std   >track              ; sector number
                      (C:\Users\bhrou\gi):00537         * First sector
AA18 E624             (C:\Users\bhrou\gi):00538 [5]             ldb   dir.entry.sizea,y   ; Skip if
AA1A 270C             (C:\Users\bhrou\gi):00539 [3]             beq   ld3                 ; full sect
AA1C 8EA021           (C:\Users\bhrou\gi):00540 [3]             ldx   #ptsec              ; Init buffer
AA1F 9F4F             (C:\Users\bhrou\gi):00541 [5]             stx   <map.DK.BUF         ; location
AA21 8D37             (C:\Users\bhrou\gi):00542 [7]             bsr   ldsec               ; Load sector
AA23 EC24             (C:\Users\bhrou\gi):00543 [6]             ldd   dir.entry.sizea,y   ; Read A:size, B:offset
AA25 3A               (C:\Users\bhrou\gi):00544 [3]             abx                       ; Adjust data ptr
AA26 8D2A             (C:\Users\bhrou\gi):00545 [7]             bsr   tfrxua              ; Copy data from buffer to RAM
                      (C:\Users\bhrou\gi):00546         * Intermediate sectors
AA28 DF4F             (C:\Users\bhrou\gi):00547 [5]     ld3     stu   <map.DK.BUF         ; Init dest location
AA2A F6A122           (C:\Users\bhrou\gi):00548 [5]     ld4     ldb   >nsect              ; Exit if
AA2D 2720             (C:\Users\bhrou\gi):00549 [3]             beq   ld7                 ; no sector
AA2F C101             (C:\Users\bhrou\gi):00550 [2]             cmpb  #1
AA31 2204             (C:\Users\bhrou\gi):00551 [3]             bhi   ld5                 ; Exit if
AA33 A627             (C:\Users\bhrou\gi):00552 [5]             lda   dir.entry.sizez,y   ; last sector
AA35 2606             (C:\Users\bhrou\gi):00553 [3]             bne   ld6
AA37 8D21             (C:\Users\bhrou\gi):00554 [7]     ld5     bsr   ldsec               ; Load sector
AA39 0C4F             (C:\Users\bhrou\gi):00555 [6]             inc   <map.DK.BUF         ; Update dest location MSB
AA3B 20ED             (C:\Users\bhrou\gi):00556 [3]             bra   ld4                 ; Next sector
                      (C:\Users\bhrou\gi):00557         * Last sector
AA3D F6A122           (C:\Users\bhrou\gi):00558 [5]     ld6     ldb   >nsect              ; Skip if
AA40 270D             (C:\Users\bhrou\gi):00559 [3]             beq   ld7                 ; no last sector
AA42 DE4F             (C:\Users\bhrou\gi):00560 [5]             ldu   <map.DK.BUF         ; Data pointer
AA44 8EA021           (C:\Users\bhrou\gi):00561 [3]             ldx   #ptsec              ; Init buffer
AA47 9F4F             (C:\Users\bhrou\gi):00562 [5]             stx   <map.DK.BUF         ; location
AA49 8D0F             (C:\Users\bhrou\gi):00563 [7]             bsr   ldsec               ; Load sector
AA4B A627             (C:\Users\bhrou\gi):00564 [5]             lda   dir.entry.sizez,y   ; Copy
AA4D 8D03             (C:\Users\bhrou\gi):00565 [7]             bsr   tfrxua              ; data
                      (C:\Users\bhrou\gi):00566         * Exit
AA4F 4F               (C:\Users\bhrou\gi):00567 [2]     ld7     clra                      ; file is not empty
AA50 35FE             (C:\Users\bhrou\gi):00568 [16]            puls  dp,d,x,y,u,pc
                      (C:\Users\bhrou\gi):00569         
                      (C:\Users\bhrou\gi):00570         * Copy memory space
AA52                  (C:\Users\bhrou\gi):00571         tfrxua
AA52 E680             (C:\Users\bhrou\gi):00572 [6]             ldb   ,x+                 ; Read data
AA54 E7C0             (C:\Users\bhrou\gi):00573 [6]             stb   ,u+                 ; Write data
AA56 4A               (C:\Users\bhrou\gi):00574 [2]             deca                      ; Until las
AA57 26F9             (C:\Users\bhrou\gi):00575 [3]             bne   tfrxua              ; data reached
AA59 39               (C:\Users\bhrou\gi):00576 [5]     return  rts
                      (C:\Users\bhrou\gi):00577         
                      (C:\Users\bhrou\gi):00578         * Load a sector
     AA5A             (C:\Users\bhrou\gi):00579         ldsec   equ   *
AA5A 3470             (C:\Users\bhrou\gi):00580 [11]            pshs  x,y,u
AA5C B6A123           (C:\Users\bhrou\gi):00581 [5]             lda   >track              ; [0000 000] track [0] drive
AA5F 0449             (C:\Users\bhrou\gi):00582 [6]             lsr   <map.DK.DRV         ; make room to drive id
AA61 44               (C:\Users\bhrou\gi):00583 [2]             lsra                      ; set cc with bit0 (drive) of track variable
AA62 0949             (C:\Users\bhrou\gi):00584 [6]             rol   <map.DK.DRV         ; set bit0 of drive id with cc
AA64 F6A123           (C:\Users\bhrou\gi):00585 [5]             ldb   >track
AA67 C406             (C:\Users\bhrou\gi):00586 [2]             andb  #$06                ; get skew based on track nb : 0, 2, 4, 6, 0, 2, 4, 6, ...
AA69 FBA124           (C:\Users\bhrou\gi):00587 [5]             addb  >sector             ; add sector to skew
AA6C C40F             (C:\Users\bhrou\gi):00588 [2]             andb  #$0f                ; loop the index
AA6E 8EAA9A           (C:\Users\bhrou\gi):00589 [3]             ldx   #sclist             ; interleave table
AA71 E685             (C:\Users\bhrou\gi):00590 [5]             ldb   b,x                 ; read sector number
AA73 0F4A             (C:\Users\bhrou\gi):00591 [6]             clr   <map.DK.TRK         ; init track msb (always 0)
AA75 DD4B             (C:\Users\bhrou\gi):00592 [5]             std   <map.DK.TRK+1       ; track/sector
AA77 BDE004           (C:\Users\bhrou\gi):00593 [8]             jsr   >map.DKCONT         ; load sector
AA7A 2407             (C:\Users\bhrou\gi):00594 [3]             bcc   ldsec1              ; skip if ok
AA7C BDE004           (C:\Users\bhrou\gi):00595 [8]             jsr   >map.DKCONT         ; reload sector
AA7F 1025F598         (C:\Users\bhrou\gi):00596 [5+?]           lbcs  error               ; I/O Error
                      (C:\Users\bhrou\gi):00597         * Next sector
AA83 FCA123           (C:\Users\bhrou\gi):00598 [6]     ldsec1  ldd   >track              ; read track/sect
AA86 C300F1           (C:\Users\bhrou\gi):00599 [4]             addd  #$f1                ; inc sector, move to next face and move to next track
AA89 C40F             (C:\Users\bhrou\gi):00600 [2]             andb  #$0f                ; keep only sector bits
AA8B FDA123           (C:\Users\bhrou\gi):00601 [6]             std   >track              ; save track/face/sector
AA8E 7AA122           (C:\Users\bhrou\gi):00602 [7]             dec   >nsect              ; counter-1
                      (C:\Users\bhrou\gi):00603         * Update load bar
AA91 BDA01E           (C:\Users\bhrou\gi):00604 [8]             jsr   >pulse              ; send sector pulse
AA94 35F0             (C:\Users\bhrou\gi):00605 [13]            puls  x,y,u,pc
                      (C:\Users\bhrou\gi):00606         
                      (C:\Users\bhrou\gi):00607         * Default exit if disk error
AA96 6E9FFFFE         (C:\Users\bhrou\gi):00608 [8]     dskerr  jmp   [$fffe]
                      (C:\Users\bhrou\gi):00609         
                      (C:\Users\bhrou\gi):00610         * Interleave 2 with a default disk format (interleave 7)
AA9A 010F0D0B         (C:\Users\bhrou\gi):00611         sclist  fcb   $01,$0f,$0d,$0b
AA9E 09070503         (C:\Users\bhrou\gi):00612                 fcb   $09,$07,$05,$03
AAA2 08060402         (C:\Users\bhrou\gi):00613                 fcb   $08,$06,$04,$02
AAA6 100E0C0A         (C:\Users\bhrou\gi):00614                 fcb   $10,$0e,$0c,$0a
                      (C:\Users\bhrou\gi):00615         
                      (C:\Users\bhrou\gi):00616         
                      (C:\Users\bhrou\gi):00617         ;---------------------------------------
                      (C:\Users\bhrou\gi):00618         ; Display messages
                      (C:\Users\bhrou\gi):00619         ;
                      (C:\Users\bhrou\gi):00620         ; X : [ptr to ascii string]
                      (C:\Users\bhrou\gi):00621         ;---------------------------------------
                      (C:\Users\bhrou\gi):00622         * Display error message
AAAA CEAACF           (C:\Users\bhrou\gi):00623 [3]     err     ldu   #messloc           ; Location
AAAD 8D08             (C:\Users\bhrou\gi):00624 [7]             bsr   err2               ; Display location
AAAF 3384             (C:\Users\bhrou\gi):00625 [4]             leau  ,x                 ; Message pointer
AAB1 8D04             (C:\Users\bhrou\gi):00626 [7]             bsr   err2               ; Display message
AAB3 20FE             (C:\Users\bhrou\gi):00627 [3]     err0    bra   err0               ; Infinite loop
                      (C:\Users\bhrou\gi):00628         
                      (C:\Users\bhrou\gi):00629         * Display message
AAB5 8D06             (C:\Users\bhrou\gi):00630 [7]     err1    bsr   err3               ; Display char
AAB7 E6C0             (C:\Users\bhrou\gi):00631 [6]     err2    ldb   ,u+                ; Read char
AAB9 2AFA             (C:\Users\bhrou\gi):00632 [3]             bpl   err1               ; Next if not last
AABB C47F             (C:\Users\bhrou\gi):00633 [2]             andb  #$7f               ; Mask char
AABD 7EE803           (C:\Users\bhrou\gi):00634 [4]     err3    jmp   map.PUTC           ; Display for TO - PUTC
                      (C:\Users\bhrou\gi):00635         
                      (C:\Users\bhrou\gi):00636         * Display info message and wait a keystroke
AAC0 CEAACF           (C:\Users\bhrou\gi):00637 [3]     info    ldu   #messloc           ; Location
AAC3 8DF2             (C:\Users\bhrou\gi):00638 [7]             bsr   err2               ; Display location
AAC5 3384             (C:\Users\bhrou\gi):00639 [4]             leau  ,x                 ; Message pointer
AAC7 8DEE             (C:\Users\bhrou\gi):00640 [7]             bsr   err2               ; Display message
AAC9 BDE809           (C:\Users\bhrou\gi):00641 [8]     !       jsr   map.KTST
AACC 24FB             (C:\Users\bhrou\gi):00642 [3]             bcc   <
AACE 39               (C:\Users\bhrou\gi):00643 [5]             rts
                      (C:\Users\bhrou\gi):00644         
                      (C:\Users\bhrou\gi):00645         * Location message
AACF 1F2121           (C:\Users\bhrou\gi):00646         messloc fcb   $1f,$21,$21
AAD2 1F1113           (C:\Users\bhrou\gi):00647                 fcb   $1f,$11,$13        ; 3 lines (11-13)
AAD5 1B47             (C:\Users\bhrou\gi):00648                 fcb   $1b,$47            ; font : white
AAD7 1B51             (C:\Users\bhrou\gi):00649                 fcb   $1b,$51            ; background : red
AAD9 0C               (C:\Users\bhrou\gi):00650                 fcb   $0c                ; cls
AADA 1F4CCB           (C:\Users\bhrou\gi):00651                 fcb   $1f,$4c,$4b+$80    ; locate for MO
                      (C:\Users\bhrou\gi):00652         
AADD 2020202020492F4F (C:\Users\bhrou\gi):00653         messIO         fcs   "     I/O|Error"
     7C4572726FF2
AAEB 202020496E736572 (C:\Users\bhrou\gi):00654         messinsertdisk fcs   "   Insert disk 0"
     74206469736B20B0
     AAFA             (C:\Users\bhrou\gi):00655         messdiskId     equ *-1
                      (C:\Users\bhrou\gi):00656         
                      (C:\Users\bhrou\gi):00657         
                      (C:\Users\bhrou\gi):00658         ;---------------------------------------
                      (C:\Users\bhrou\gi):00659         ; Switch page
                      (C:\Users\bhrou\gi):00660         ;
                      (C:\Users\bhrou\gi):00661         ; B: [destination - page number]
                      (C:\Users\bhrou\gi):00662         ; U: [destination - address]
                      (C:\Users\bhrou\gi):00663         ;---------------------------------------
AAFB                  (C:\Users\bhrou\gi):00664         switchpage
AAFB 1183A000         (C:\Users\bhrou\gi):00665 [5]             cmpu  #$A000             ; Skip if not data space
AAFF 250D             (C:\Users\bhrou\gi):00666 [3]             blo   >
AB01 8610             (C:\Users\bhrou\gi):00667 [2]             lda   #$10
AB03 9A81             (C:\Users\bhrou\gi):00668 [4]             ora   <$6081             ; Set RAM
AB05 9781             (C:\Users\bhrou\gi):00669 [4]             sta   <$6081             ; over data
AB07 B7E7E7           (C:\Users\bhrou\gi):00670 [5]             sta   >$e7e7             ; space
AB0A F7E7E5           (C:\Users\bhrou\gi):00671 [5]             stb   >map.CF74021.DATA  ; Switch RAM page
AB0D 39               (C:\Users\bhrou\gi):00672 [5]             rts
                      (C:\Users\bhrou\gi):00673         !
AB0E 11836000         (C:\Users\bhrou\gi):00674 [5]             cmpu  #$6000             ; Skip if not resident space
AB12 2501             (C:\Users\bhrou\gi):00675 [3]             blo   >
AB14 39               (C:\Users\bhrou\gi):00676 [5]             rts                      ; nothing to do ... it's resident memory
                      (C:\Users\bhrou\gi):00677         !
AB15 11834000         (C:\Users\bhrou\gi):00678 [5]             cmpu  #$4000             ; Skip if not video space
AB19 2509             (C:\Users\bhrou\gi):00679 [3]             blo   >
AB1B C401             (C:\Users\bhrou\gi):00680 [2]             andb  #$01               ; Keep only half page A or B
AB1D FAE7C3           (C:\Users\bhrou\gi):00681 [5]             orb   $E7C3              ; Merge register value
AB20 F7E7C3           (C:\Users\bhrou\gi):00682 [5]             stb   $E7C3              ; Set desired half page in video space
AB23 39               (C:\Users\bhrou\gi):00683 [5]             rts
                      (C:\Users\bhrou\gi):00684         !
AB24 1183E000         (C:\Users\bhrou\gi):00685 [5]             cmpu  #$E000             ; Skip if not valid address 
AB28 2406             (C:\Users\bhrou\gi):00686 [3]             bhs   >
AB2A CA60             (C:\Users\bhrou\gi):00687 [2]             orb   #$60               ; Set RAM over cartridge space
AB2C F7E7E6           (C:\Users\bhrou\gi):00688 [5]             stb   >map.CF74021.CART  ; Switch RAM page
AB2F 39               (C:\Users\bhrou\gi):00689 [5]             rts
AB30 20FE             (C:\Users\bhrou\gi):00690 [3]     !       bra   *                  ; error trap
                      (C:\Users\bhrou\gi):00691         
                      (C:\Users\bhrou\gi):00692         
                      (C:\Users\bhrou\gi):00693         ;---------------------------------------
                      (C:\Users\bhrou\gi):00694         ; loader.dir.getFile
                      (C:\Users\bhrou\gi):00695         ;
                      (C:\Users\bhrou\gi):00696         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00697         ; output REG : [Y] ptr to file dir.entry
                      (C:\Users\bhrou\gi):00698         ;---------------------------------------
                      (C:\Users\bhrou\gi):00699         ; Get file directory entry
                      (C:\Users\bhrou\gi):00700         ;
                      (C:\Users\bhrou\gi):00701         ; TODO : scale the file id in the builder,
                      (C:\Users\bhrou\gi):00702         ;        and saves a lot of instructions here
                      (C:\Users\bhrou\gi):00703         ;---------------------------------------
AB32                  (C:\Users\bhrou\gi):00704         loader.dir.getFile
AB32 10BEA125         (C:\Users\bhrou\gi):00705 [7]             ldy   >loader.dir
AB36 3125             (C:\Users\bhrou\gi):00706 [5]             leay  sizeof{dir.header},y 
AB38 1F10             (C:\Users\bhrou\gi):00707 [6]             tfr   x,d
                      (C:\Users\bhrou\gi):00708                 _lsld      ; Scale file id
AB3A 58               (            _lsld):00001 [2]             lslb
AB3B 49               (            _lsld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00709                 _lsld      ; to dir entry size
AB3C 58               (            _lsld):00001 [2]             lslb
AB3D 49               (            _lsld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00710                 _lsld
AB3E 58               (            _lsld):00001 [2]             lslb
AB3F 49               (            _lsld):00002 [2]             rola
AB40 31AB             (C:\Users\bhrou\gi):00711 [8]             leay  d,y  ; Y ptr to file dir.entry
AB42 39               (C:\Users\bhrou\gi):00712 [5]             rts
                      (C:\Users\bhrou\gi):00713         
                      (C:\Users\bhrou\gi):00714         
                      (C:\Users\bhrou\gi):00715         ;---------------------------------------
                      (C:\Users\bhrou\gi):00716         ; loader.file.decompress
                      (C:\Users\bhrou\gi):00717         ;
                      (C:\Users\bhrou\gi):00718         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00719         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):00720         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):00721         ;---------------------------------------
                      (C:\Users\bhrou\gi):00722         ; uncompress a file by using zx0
                      (C:\Users\bhrou\gi):00723         ;---------------------------------------
AB43                  (C:\Users\bhrou\gi):00724         loader.file.decompress
AB43 3476             (C:\Users\bhrou\gi):00725 [13]            pshs  d,x,y,u
AB45 BDAAFB           (C:\Users\bhrou\gi):00726 [8]             jsr   switchpage
AB48 BDAB32           (C:\Users\bhrou\gi):00727 [8]             jsr   loader.dir.getFile
AB4B E6A4             (C:\Users\bhrou\gi):00728 [4]             ldb   dir.entry.bitfld,y  ; test if compression flag
AB4D 2A12             (C:\Users\bhrou\gi):00729 [3]             bpl   @rts               ; no, exit
AB4F EC28             (C:\Users\bhrou\gi):00730 [6]             ldd   dir.entry.coffset,y ; get offset to write data
AB51 30CB             (C:\Users\bhrou\gi):00731 [8]             leax  d,u                ; set x to start of compressed data
AB53 3420             (C:\Users\bhrou\gi):00732 [7]             pshs  y
AB55 BDAB63           (C:\Users\bhrou\gi):00733 [8]             jsr   >zx0_decompress    ; decompress and set u to end of decompressed data
AB58 3520             (C:\Users\bhrou\gi):00734 [7]             puls  y
AB5A 8606             (C:\Users\bhrou\gi):00735 [2]             lda   #6                 ; copy last 6 bytes
AB5C 302A             (C:\Users\bhrou\gi):00736 [5]             leax  dir.entry.cdataz,y  ; set read ptr
AB5E BDAA52           (C:\Users\bhrou\gi):00737 [8]             jsr   tfrxua
AB61 35F6             (C:\Users\bhrou\gi):00738 [15]    @rts    puls  d,x,y,u,pc
                      (C:\Users\bhrou\gi):00739         
                      (C:\Users\bhrou\gi):00740          INCLUDE "new-engine/compression/zx0/zx0_6809_mega.asm"
                      (new-engine/compre):00001         ; zx0_6809_mega.asm - ZX0 decompressor for M6809 - 189 bytes
                      (new-engine/compre):00002         ; Written for the LWTOOLS assembler, http://www.lwtools.ca/.
                      (new-engine/compre):00003         ;
                      (new-engine/compre):00004         ; Copyright (c) 2021 Doug Masten
                      (new-engine/compre):00005         ; ZX0 compression (c) 2021 Einar Saukas, https://github.com/einar-saukas/ZX0
                      (new-engine/compre):00006         ;
                      (new-engine/compre):00007         ; This software is provided 'as-is', without any express or implied
                      (new-engine/compre):00008         ; warranty. In no event will the authors be held liable for any damages
                      (new-engine/compre):00009         ; arising from the use of this software.
                      (new-engine/compre):00010         ;
                      (new-engine/compre):00011         ; Permission is granted to anyone to use this software for any purpose,
                      (new-engine/compre):00012         ; including commercial applications, and to alter it and redistribute it
                      (new-engine/compre):00013         ; freely, subject to the following restrictions:
                      (new-engine/compre):00014         ;
                      (new-engine/compre):00015         ; 1. The origin of this software must not be misrepresented; you must not
                      (new-engine/compre):00016         ;    claim that you wrote the original software. If you use this software
                      (new-engine/compre):00017         ;    in a product, an acknowledgment in the product documentation would be
                      (new-engine/compre):00018         ;    appreciated but is not required.
                      (new-engine/compre):00019         ; 2. Altered source versions must be plainly marked as such, and must not be
                      (new-engine/compre):00020         ;    misrepresented as being the original software.
                      (new-engine/compre):00021         ; 3. This notice may not be removed or altered from any source distribution.
                      (new-engine/compre):00022         
                      (new-engine/compre):00023         
                      (new-engine/compre):00024         ; only get one bit from stream
AB63                  (new-engine/compre):00025         zx0_get_1bit       macro
                      (new-engine/compre):00026                            lsla                ; get next bit
                      (new-engine/compre):00027                            bne done@           ; is bit stream empty? no, branch
                      (new-engine/compre):00028                            lda ,x+             ; load another group of 8 bits
                      (new-engine/compre):00029                            rola                ; get next bit
AB63                  (new-engine/compre):00030         done@              equ *
                      (new-engine/compre):00031                            endm
                      (new-engine/compre):00032         
                      (new-engine/compre):00033         ; get elias value
AB63                  (new-engine/compre):00034         zx0_elias_bt       macro
                      (new-engine/compre):00035                            bcs done@
AB63                  (new-engine/compre):00036         loop@              lsla                ; get next bit
                      (new-engine/compre):00037                            rolb                ; rotate bit into elias value
                      (new-engine/compre):00038                            lsla                ; get next bit
                      (new-engine/compre):00039                            bcc loop@           ; loop until done
                      (new-engine/compre):00040                            bne done@           ; is bit stream empty? no, branch
                      (new-engine/compre):00041                            bsr zx0_reload      ; process rest of elias until done
AB63                  (new-engine/compre):00042         done@              equ *
                      (new-engine/compre):00043                            endm
                      (new-engine/compre):00044         
                      (new-engine/compre):00045         ;------------------------------------------------------------------------------
                      (new-engine/compre):00046         ; Function    : zx0_decompress
                      (new-engine/compre):00047         ; Entry       : Reg X = start of compressed data
                      (new-engine/compre):00048         ;             : Reg U = start of decompression buffer
                      (new-engine/compre):00049         ; Exit        : Reg X = end of compressed data + 1
                      (new-engine/compre):00050         ;             : Reg U = end of decompression buffer + 1
                      (new-engine/compre):00051         ; Destroys    : Regs D, Y
                      (new-engine/compre):00052         ; Description : Decompress ZX0 data (version 1)
                      (new-engine/compre):00053         ;------------------------------------------------------------------------------
                      (new-engine/compre):00054         ; Options:
                      (new-engine/compre):00055         ;
                      (new-engine/compre):00056         ;   ZX0_ONE_TIME_USE
                      (new-engine/compre):00057         ;     Defined variable to disable re-initialization of variables. Enable
                      (new-engine/compre):00058         ;     this option for one-time use of depacker for smaller code size.
                      (new-engine/compre):00059         ;       ex. ZX0_ONE_TIME_USE equ 1
                      (new-engine/compre):00060         ;
                      (new-engine/compre):00061         ;   ZX0_DISABLE_SAVE_REGS
                      (new-engine/compre):00062         ;     Defined variable to disable saving registers CC and DP. Enable
                      (new-engine/compre):00063         ;     this option for smaller code size and if calling program will take
                      (new-engine/compre):00064         ;     care of registers CC and DP.
                      (new-engine/compre):00065         ;       ex. ZX0_DISABLE_SAVE_REGS equ 1
                      (new-engine/compre):00066         ;
                      (new-engine/compre):00067         ;   ZX0_DISABLE_DISABLING_INTERRUPTS
                      (new-engine/compre):00068         ;     Defined variable to disable the disabling of interrupts. Enable
                      (new-engine/compre):00069         ;     this option if interrupts are already disable or if IRQ and FIRQ
                      (new-engine/compre):00070         ;     code won't mind register DP being changed.
                      (new-engine/compre):00071         ;       ex. ZX0_DISABLE_DISABLING_INTERRUPTS
                      (new-engine/compre):00072         ;
AB63                  (new-engine/compre):00073         zx0_decompress
                      (new-engine/compre):00074                            ifndef ZX0_DISABLE_SAVE_REGS
AB63 3409             (new-engine/compre):00075 [7]                        pshs cc,dp          ; save registers
                      (new-engine/compre):00076                            endc
                      (new-engine/compre):00077         
                      (new-engine/compre):00078                            ifndef ZX0_DISABLE_DISABLING_INTERRUPTS
AB65 1A50             (new-engine/compre):00079 [3]                        orcc #$50           ; disable interrupts
                      (new-engine/compre):00080                            endc
                      (new-engine/compre):00081         
                      (new-engine/compre):00082                            ifndef ZX0_ONE_TIME_USE
AB67 CCFFFF           (new-engine/compre):00083 [3]                        ldd #$ffff          ; init offset = -1
AB6A FDAC44           (new-engine/compre):00084 [6]                        std >zx0_offset+2
                      (new-engine/compre):00085                            endc
                      (new-engine/compre):00086         
                      (new-engine/compre):00087                            ifndef ZX0_DISABLE_ALIGN
AB6D 7EAC00           (new-engine/compre):00088 [4]                        jmp   zx0_start
AB70 0000000000000000 (new-engine/compre):00089                            align  (*/256)*256+256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (new-engine/compre):00090                            endc
                      (new-engine/compre):00091         
     00AC             (new-engine/compre):00092         zx0_dp             equ */256
AC00                  (new-engine/compre):00093         zx0_start
AC00 CC80AC           (new-engine/compre):00094 [3]                        ldd #($80*256)+zx0_dp  ; init bit stream and register DP
AC03 1F9B             (new-engine/compre):00095 [6]                        tfr b,dp
     AC               (new-engine/compre):00096                            setdp zx0_dp
AC05 204D             (new-engine/compre):00097 [3]                        bra zx0_literals    ; start with literals
                      (new-engine/compre):00098         
                      (new-engine/compre):00099                            ifndef ZX0_DISABLE_SAVE_REGS
AC07 3589             (new-engine/compre):00100 [9]     zx0_eof            puls cc,dp,pc       ; restore registers and exit
                      (new-engine/compre):00101                            else
AC09                  (new-engine/compre):00102         zx0_eof            equ zx0_rts         ; just exit
                      (new-engine/compre):00103                            endc
                      (new-engine/compre):00104         
                      (new-engine/compre):00105         
                      (new-engine/compre):00106         ; 1 - copy from new offset (repeat N bytes from new offset)
AC09 C601             (new-engine/compre):00107 [2]     zx0_new_offset     ldb #1              ; set elias = 1 (not necessary to set MSB)
                      (new-engine/compre):00108                            zx0_get_1bit        ; obtain MSB offset
AC0B 48               (     zx0_get_1bit):00001 [2]                        lsla                ; get next bit
AC0C 2603             (     zx0_get_1bit):00002 [3]                        bne done@           ; is bit stream empty? no, branch
AC0E A680             (     zx0_get_1bit):00003 [6]                        lda ,x+             ; load another group of 8 bits
AC10 49               (     zx0_get_1bit):00004 [2]                        rola                ; get next bit
     AC11             (     zx0_get_1bit):00005         done@              equ *
                      (new-engine/compre):00109                            zx0_elias_bt        ;  "      "   "
AC11 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AC13 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AC14 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AC15 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AC16 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AC18 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AC1A 8D76             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AC1C             (     zx0_elias_bt):00008         done@              equ *
AC1C 0F40             (new-engine/compre):00110 [6]                        clr <zx0_code+1     ; set MSB elias for below
AC1E 50               (new-engine/compre):00111 [2]                        negb                ; adjust for negative offset (set carry for RORB below)
AC1F 27E6             (new-engine/compre):00112 [3]                        beq zx0_eof         ; eof? (length = 256) if so exit
AC21 56               (new-engine/compre):00113 [2]                        rorb                ; last offset bit becomes first length bit
AC22 D744             (new-engine/compre):00114 [4]                        stb <zx0_offset+2   ; save MSB offset
AC24 E680             (new-engine/compre):00115 [6]                        ldb ,x+             ; load LSB offset
AC26 56               (new-engine/compre):00116 [2]                        rorb                ; last offset bit becomes first length bit
AC27 D745             (new-engine/compre):00117 [4]                        stb <zx0_offset+3   ; save LSB offset
AC29 C601             (new-engine/compre):00118 [2]                        ldb #1              ; set elias = 1
                      (new-engine/compre):00119                            zx0_elias_bt        ; get elias but skip first bit
AC2B 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AC2D 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AC2E 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AC2F 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AC30 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AC32 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AC34 8D5C             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AC36             (     zx0_elias_bt):00008         done@              equ *
AC36 5C               (new-engine/compre):00120 [2]     skip@              incb                ; elias = elias + 1
AC37 D741             (new-engine/compre):00121 [4]                        stb <zx0_code+2     ;  " "
AC39 2602             (new-engine/compre):00122 [3]                        bne zx0_copy        ;  " "
AC3B 0C40             (new-engine/compre):00123 [6]                        inc <zx0_code+1     ;  " "
AC3D 9F4F             (new-engine/compre):00124 [5]     zx0_copy           stx <save_x@+1      ; save reg X
AC3F 8EFFFF           (new-engine/compre):00125 [3]     zx0_code           ldx #$ffff          ; setup length
AC42 31C9FFFF         (new-engine/compre):00126 [8]     zx0_offset         leay >$ffff,u       ; calculate offset address
AC46 E6A0             (new-engine/compre):00127 [6]     loop@              ldb ,y+             ; copy match
AC48 E7C0             (new-engine/compre):00128 [6]                        stb ,u+             ;  "    "
AC4A 301F             (new-engine/compre):00129 [5]                        leax -1,x           ; decrement loop counter
AC4C 26F8             (new-engine/compre):00130 [3]                        bne loop@           ; loop until done
AC4E 8EFFFF           (new-engine/compre):00131 [3]     save_x@            ldx #$ffff          ; restore reg X
AC51 48               (new-engine/compre):00132 [2]                        lsla                ; get next bit
AC52 25B5             (new-engine/compre):00133 [3]                        bcs zx0_new_offset  ; branch if next block is new offset
                      (new-engine/compre):00134         
                      (new-engine/compre):00135         ; 0 - literal (copy next N bytes from compressed data)
AC54 C601             (new-engine/compre):00136 [2]     zx0_literals       ldb #1              ; set elias = 1
AC56 0F40             (new-engine/compre):00137 [6]                        clr <zx0_code+1     ;  "    "
                      (new-engine/compre):00138                            zx0_get_1bit        ; obtain length
AC58 48               (     zx0_get_1bit):00001 [2]                        lsla                ; get next bit
AC59 2603             (     zx0_get_1bit):00002 [3]                        bne done@           ; is bit stream empty? no, branch
AC5B A680             (     zx0_get_1bit):00003 [6]                        lda ,x+             ; load another group of 8 bits
AC5D 49               (     zx0_get_1bit):00004 [2]                        rola                ; get next bit
     AC5E             (     zx0_get_1bit):00005         done@              equ *
                      (new-engine/compre):00139                            zx0_elias_bt        ;  "      "
AC5E 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AC60 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AC61 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AC62 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AC63 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AC65 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AC67 8D29             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AC69             (     zx0_elias_bt):00008         done@              equ *
AC69 D741             (new-engine/compre):00140 [4]                        stb <zx0_code+2     ; save LSB elias
AC6B 109E40           (new-engine/compre):00141 [6]                        ldy <zx0_code+1     ; setup length
AC6E E680             (new-engine/compre):00142 [6]     loop@              ldb ,x+             ; copy literals
AC70 E7C0             (new-engine/compre):00143 [6]                        stb ,u+             ;  "    "
AC72 313F             (new-engine/compre):00144 [5]                        leay -1,y           ; decrement loop counter
AC74 26F8             (new-engine/compre):00145 [3]                        bne loop@           ; loop until done
AC76 48               (new-engine/compre):00146 [2]                        lsla                ; get next bit
AC77 2590             (new-engine/compre):00147 [3]                        bcs zx0_new_offset  ; branch if next block is new offset
                      (new-engine/compre):00148         
                      (new-engine/compre):00149         ; 0 - copy from last offset (repeat N bytes from last offset)
AC79 C601             (new-engine/compre):00150 [2]                        ldb #1              ; set elias = 1
AC7B 0F40             (new-engine/compre):00151 [6]                        clr <zx0_code+1     ;  "    "
                      (new-engine/compre):00152                            zx0_get_1bit        ; obtain length
AC7D 48               (     zx0_get_1bit):00001 [2]                        lsla                ; get next bit
AC7E 2603             (     zx0_get_1bit):00002 [3]                        bne done@           ; is bit stream empty? no, branch
AC80 A680             (     zx0_get_1bit):00003 [6]                        lda ,x+             ; load another group of 8 bits
AC82 49               (     zx0_get_1bit):00004 [2]                        rola                ; get next bit
     AC83             (     zx0_get_1bit):00005         done@              equ *
                      (new-engine/compre):00153                            zx0_elias_bt        ;  "      "
AC83 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AC85 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AC86 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AC87 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AC88 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AC8A 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AC8C 8D04             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AC8E             (     zx0_elias_bt):00008         done@              equ *
AC8E D741             (new-engine/compre):00154 [4]                        stb <zx0_code+2     ; save LSB elias
AC90 20AB             (new-engine/compre):00155 [3]                        bra zx0_copy        ; go copy last offset block
                      (new-engine/compre):00156         
                      (new-engine/compre):00157         ; interlaced elias gamma coding
AC92 A680             (new-engine/compre):00158 [6]     zx0_reload         lda ,x+             ; load another group of 8 bits
AC94 49               (new-engine/compre):00159 [2]                        rola                ; are we done?
AC95 251B             (new-engine/compre):00160 [3]                        bcs zx0_rts         ; yes, exit
AC97 48               (new-engine/compre):00161 [2]                        lsla                ; get next bit
AC98 59               (new-engine/compre):00162 [2]                        rolb                ; rotate bit into elias value
AC99 48               (new-engine/compre):00163 [2]                        lsla                ; are we done?
AC9A 2516             (new-engine/compre):00164 [3]                        bcs zx0_rts         ; yes, exit
AC9C 48               (new-engine/compre):00165 [2]                        lsla                ; get next bit
AC9D 59               (new-engine/compre):00166 [2]                        rolb                ; rotate bit into elias value
AC9E 48               (new-engine/compre):00167 [2]                        lsla                ; are we done?
AC9F 2511             (new-engine/compre):00168 [3]                        bcs zx0_rts         ; yes, exit
ACA1 48               (new-engine/compre):00169 [2]                        lsla                ; get next bit
ACA2 59               (new-engine/compre):00170 [2]                        rolb                ; rotate bit into elias value
ACA3 48               (new-engine/compre):00171 [2]                        lsla                ; are we done?
ACA4 250C             (new-engine/compre):00172 [3]                        bcs zx0_rts         ; yes, exit
                      (new-engine/compre):00173         
                      (new-engine/compre):00174         ; long elias gamma coding
ACA6 48               (new-engine/compre):00175 [2]     loop@              lsla                ; get next bit
ACA7 59               (new-engine/compre):00176 [2]                        rolb                ; rotate bit into elias value
ACA8 0940             (new-engine/compre):00177 [6]                        rol <zx0_code+1     ;  "      "   "    "     "
ACAA 48               (new-engine/compre):00178 [2]                        lsla                ; is bit stream empty?
ACAB 2603             (new-engine/compre):00179 [3]                        bne skip@           ; no, branch
ACAD A680             (new-engine/compre):00180 [6]                        lda ,x+             ; reload bit stream
ACAF 49               (new-engine/compre):00181 [2]                        rola                ; are we done?
ACB0 24F4             (new-engine/compre):00182 [3]     skip@              bcc loop@           ; no, loop again
ACB2 39               (new-engine/compre):00183 [5]     zx0_rts            rts                 ; return
                      (new-engine/compre):00184         
                      (new-engine/compre):00185         
                      (new-engine/compre):00186         ; safety check
     00AC             (new-engine/compre):00187         zx0_dp_end         equ */256
                      (new-engine/compre):00188                            ifne zx0_dp-zx0_dp_end
                      (new-engine/compre):00189                            error "zx0_decompress code crossed over DP memory space"
                      (new-engine/compre):00190                            endc
     FF               (C:\Users\bhrou\gi):00741          SETDP $ff
                      (C:\Users\bhrou\gi):00742         
                      (C:\Users\bhrou\gi):00743         
                      (C:\Users\bhrou\gi):00744         ;---------------------------------------
                      (C:\Users\bhrou\gi):00745         ; loader.file.linkData.load
                      (C:\Users\bhrou\gi):00746         ;
                      (C:\Users\bhrou\gi):00747         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00748         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):00749         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):00750         ;---------------------------------------
                      (C:\Users\bhrou\gi):00751         ; add load time link data to RAM
                      (C:\Users\bhrou\gi):00752         ; for a specified file
                      (C:\Users\bhrou\gi):00753         ;---------------------------------------
                      (C:\Users\bhrou\gi):00754         
                      (C:\Users\bhrou\gi):00755         ; linkDataIdx structure
                      (C:\Users\bhrou\gi):00756         ; -------------------
                      (C:\Users\bhrou\gi):00757         linkData.header STRUCT
0000s                 (C:\Users\bhrou\gi):00758         totalSlots    rmb types.WORD ; [0000 0000] [0000 0000] - [nb of total slots]
0002s                 (C:\Users\bhrou\gi):00759         occupiedSlots rmb types.WORD ; [0000 0000] [0000 0000] - [nb of occupied slots]
0004s                 (C:\Users\bhrou\gi):00760                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00761         
                      (C:\Users\bhrou\gi):00762         linkData.entry STRUCT
0000s                 (C:\Users\bhrou\gi):00763         diskId   rmb types.BYTE   ; [0000 0000]              - [disk id]
0001s                 (C:\Users\bhrou\gi):00764         fileId   rmb types.WORD   ; [0000 0000] [0000 0000]  - [file id]
0003s                 (C:\Users\bhrou\gi):00765         filePage rmb types.BYTE   ; [0000 0000]              - [file data page location]
0004s                 (C:\Users\bhrou\gi):00766         fileAddr rmb types.WORD   ; [0000 0000] [0000 0000]  - [file data address location]
0006s                 (C:\Users\bhrou\gi):00767         linkData rmb types.WORD   ; [0000 0000] [0000 0000]  - [ptr in memory pool to link data]
0008s                 (C:\Users\bhrou\gi):00768                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00769         
     0008             (C:\Users\bhrou\gi):00770         loader.file.linkData.POOL_QTY equ 8
                      (C:\Users\bhrou\gi):00771         
ACB3                  (C:\Users\bhrou\gi):00772         loader.file.linkData.load
ACB3 3476             (C:\Users\bhrou\gi):00773 [13]            pshs  d,x,y,u
ACB5 BDAB32           (C:\Users\bhrou\gi):00774 [8]             jsr   loader.dir.getFile
ACB8 E6A4             (C:\Users\bhrou\gi):00775 [4]             ldb   dir.entry.bitfld,y              ; Test if load time link flag
ACBA C440             (C:\Users\bhrou\gi):00776 [2]             andb  #%01000000
ACBC 2602             (C:\Users\bhrou\gi):00777 [3]             bne   >                               ; yes, continue
ACBE 35F6             (C:\Users\bhrou\gi):00778 [15]            puls  d,x,y,u,pc                      ; no, exit
                      (C:\Users\bhrou\gi):00779         !
                      (C:\Users\bhrou\gi):00780                 ; check link data size for this file, and allocate memory for loading
ACC0 ECA810           (C:\Users\bhrou\gi):00781 [6]             ldd   dir.entry.lsize,y               ; Read file data size
ACC3 2602             (C:\Users\bhrou\gi):00782 [3]             bne   >
ACC5 35F6             (C:\Users\bhrou\gi):00783 [15]            puls  d,x,y,u,pc                      ; Ignore empty link file
ACC7 10BFACD3         (C:\Users\bhrou\gi):00784 [7]     !       sty   @y
ACCB BDA37B           (C:\Users\bhrou\gi):00785 [8]             jsr   tlsf.malloc
ACCE FFAD4B           (C:\Users\bhrou\gi):00786 [6]             stu   @linkData
ACD1 108E0000         (C:\Users\bhrou\gi):00787 [4]             ldy   #0
     ACD3             (C:\Users\bhrou\gi):00788         @y      equ   *-2
                      (C:\Users\bhrou\gi):00789         ;
                      (C:\Users\bhrou\gi):00790                 ; load link data file
ACD5 E6A4             (C:\Users\bhrou\gi):00791 [4]             ldb   dir.entry.bitfld,y              ; test if compression flag
ACD7 2A02             (C:\Users\bhrou\gi):00792 [3]             bpl   >
ACD9 3128             (C:\Users\bhrou\gi):00793 [5]             leay  8,y                             ; skip compression block
ACDB 3128             (C:\Users\bhrou\gi):00794 [5]     !       leay  8,y                             ; skip file block
ACDD C604             (C:\Users\bhrou\gi):00795 [2]             ldb   #loader.PAGE
ACDF BDAA08           (C:\Users\bhrou\gi):00796 [8]             jsr   loader.file.loadByDir
                      (C:\Users\bhrou\gi):00797         ;
                      (C:\Users\bhrou\gi):00798                 ; store file location index on RAM (data and link data)
ACE2 FEA127           (C:\Users\bhrou\gi):00799 [6]             ldu   >loader.file.linkDataIdx
ACE5 2613             (C:\Users\bhrou\gi):00800 [3]             bne   >
ACE7 CC0044           (C:\Users\bhrou\gi):00801 [3]             ldd   #sizeof{linkData.header}+loader.file.linkData.POOL_QTY*sizeof{linkData.entry} ; a. First load of link data
ACEA BDA37B           (C:\Users\bhrou\gi):00802 [8]             jsr   tlsf.malloc                     ; Allocate a new set of slots
ACED FFA127           (C:\Users\bhrou\gi):00803 [6]             stu   >loader.file.linkDataIdx
ACF0 CC0008           (C:\Users\bhrou\gi):00804 [3]             ldd   #loader.file.linkData.POOL_QTY
ACF3 EDC4             (C:\Users\bhrou\gi):00805 [5]             std   linkData.header.totalSlots,u    ; init nb of allocated slots
ACF5 CC0001           (C:\Users\bhrou\gi):00806 [3]             ldd   #1
ACF8 202D             (C:\Users\bhrou\gi):00807 [3]             bra   @end
ACFA EC42             (C:\Users\bhrou\gi):00808 [6]     !       ldd   linkData.header.occupiedSlots,u ; b. Already loaded link data
ACFC 10A3C4           (C:\Users\bhrou\gi):00809 [7]             cmpd  linkData.header.totalSlots,u
ACFF 2405             (C:\Users\bhrou\gi):00810 [3]             bhs   >                               ; Branch if no more slot available
AD01 C30001           (C:\Users\bhrou\gi):00811 [4]             addd  #1                              ; c. Use a free slot
AD04 2021             (C:\Users\bhrou\gi):00812 [3]             bra   @end
AD06 ECC4             (C:\Users\bhrou\gi):00813 [5]     !       ldd   linkData.header.totalSlots,u    ; d. All slots are in use, reallocate
AD08 C30008           (C:\Users\bhrou\gi):00814 [4]             addd  #loader.file.linkData.POOL_QTY  ; add new bunch of blocks
AD0B FDAD1E           (C:\Users\bhrou\gi):00815 [6]             std   @d
                      (C:\Users\bhrou\gi):00816                 _asld
AD0E 58               (            _asld):00001 [2]             aslb
AD0F 49               (            _asld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00817                 _asld
AD10 58               (            _asld):00001 [2]             aslb
AD11 49               (            _asld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00818                 _asld                                 ; mult by struct size
AD12 58               (            _asld):00001 [2]             aslb
AD13 49               (            _asld):00002 [2]             rola
AD14 C30004           (C:\Users\bhrou\gi):00819 [4]             addd  #sizeof{linkData.header}        ; add header
AD17 BDA639           (C:\Users\bhrou\gi):00820 [8]             jsr   tlsf.realloc                    ; [d] : new size - [u] : ptr to allocated memory
AD1A FFA127           (C:\Users\bhrou\gi):00821 [6]             stu   >loader.file.linkDataIdx
AD1D CC0000           (C:\Users\bhrou\gi):00822 [3]             ldd   #0                              ; Update new block header
     AD1E             (C:\Users\bhrou\gi):00823         @d      equ   *-2
AD20 EDC4             (C:\Users\bhrou\gi):00824 [5]             std   linkData.header.totalSlots,u    ; Set max number of slots
AD22 EC42             (C:\Users\bhrou\gi):00825 [6]             ldd   linkData.header.occupiedSlots,u
AD24 C30001           (C:\Users\bhrou\gi):00826 [4]             addd  #1
AD27                  (C:\Users\bhrou\gi):00827         @end
AD27 ED42             (C:\Users\bhrou\gi):00828 [6]             std   linkData.header.occupiedSlots,u ; Set current slots in use
AD29 830001           (C:\Users\bhrou\gi):00829 [4]             subd  #1
                      (C:\Users\bhrou\gi):00830                 ; compute location of slot
                      (C:\Users\bhrou\gi):00831                 _asld
AD2C 58               (            _asld):00001 [2]             aslb
AD2D 49               (            _asld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00832                 _asld
AD2E 58               (            _asld):00001 [2]             aslb
AD2F 49               (            _asld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00833                 _asld                                 ; mult by struct size
AD30 58               (            _asld):00001 [2]             aslb
AD31 49               (            _asld):00002 [2]             rola
AD32 C30004           (C:\Users\bhrou\gi):00834 [4]             addd  #types.WORD*2                   ; add header
AD35 33CB             (C:\Users\bhrou\gi):00835 [8]             leau  d,u                             ; u is a ptr to slot
AD37 BEA125           (C:\Users\bhrou\gi):00836 [6]             ldx   >loader.dir
AD3A A603             (C:\Users\bhrou\gi):00837 [5]             lda   dir.header.diskId,x             ; load disk id
AD3C A7C4             (C:\Users\bhrou\gi):00838 [4]             sta   linkData.entry.diskId,u
AD3E EC62             (C:\Users\bhrou\gi):00839 [6]             ldd   2,s                             ; load file id
AD40 ED41             (C:\Users\bhrou\gi):00840 [6]             std   linkData.entry.fileId,u
AD42 E661             (C:\Users\bhrou\gi):00841 [5]             ldb   1,s                             ; load file dest page
AD44 E743             (C:\Users\bhrou\gi):00842 [5]             stb   linkData.entry.filePage,u
AD46 EC66             (C:\Users\bhrou\gi):00843 [6]             ldd   6,s                             ; load file dest addr
AD48 ED44             (C:\Users\bhrou\gi):00844 [6]             std   linkData.entry.fileAddr,u 
AD4A CC0000           (C:\Users\bhrou\gi):00845 [3]             ldd   #0                              ; load ptr to link data
     AD4B             (C:\Users\bhrou\gi):00846         @linkData equ *-2
AD4D ED46             (C:\Users\bhrou\gi):00847 [6]             std   linkData.entry.linkData,u
                      (C:\Users\bhrou\gi):00848                 ; relocate the binary
AD4F 10BEAD4B         (C:\Users\bhrou\gi):00849 [7]             ldy   @linkData                       ; set y as ptr to file link data
AD53 BDADA0           (C:\Users\bhrou\gi):00850 [8]             jsr   linkData.content.exportAbs.skip ; skip export link data
AD56 BDADA0           (C:\Users\bhrou\gi):00851 [8]             jsr   linkData.content.exportRel.skip
AD59 E661             (C:\Users\bhrou\gi):00852 [5]             ldb   1,s                             ; load file dest page
AD5B EE66             (C:\Users\bhrou\gi):00853 [6]             ldu   6,s                             ; load file dest addr
AD5D BDADAC           (C:\Users\bhrou\gi):00854 [8]             jsr   loader.file.intern.link
AD60 35F6             (C:\Users\bhrou\gi):00855 [15]    @rts    puls  d,x,y,u,pc
                      (C:\Users\bhrou\gi):00856         
                      (C:\Users\bhrou\gi):00857         
                      (C:\Users\bhrou\gi):00858         ;---------------------------------------
                      (C:\Users\bhrou\gi):00859         ; loader.file.linkData.unload
                      (C:\Users\bhrou\gi):00860         ;
                      (C:\Users\bhrou\gi):00861         ; input  REG : [B] directory id
                      (C:\Users\bhrou\gi):00862         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00863         ;---------------------------------------
                      (C:\Users\bhrou\gi):00864         ; remove load time link data from RAM
                      (C:\Users\bhrou\gi):00865         ; for a specified file
                      (C:\Users\bhrou\gi):00866         ;---------------------------------------
AD62                  (C:\Users\bhrou\gi):00867         loader.file.linkData.unload
                      (C:\Users\bhrou\gi):00868                 ; TODO
                      (C:\Users\bhrou\gi):00869                 ; search for dir/file id in loader.file.linkData
                      (C:\Users\bhrou\gi):00870                 ; move following linkdata one slot ahead
                      (C:\Users\bhrou\gi):00871                 ; decrement nb of occupied slots
                      (C:\Users\bhrou\gi):00872                 ; reallocate if total slots - occupied slots = 8
AD62 39               (C:\Users\bhrou\gi):00873 [5]             rts
                      (C:\Users\bhrou\gi):00874         
                      (C:\Users\bhrou\gi):00875         
                      (C:\Users\bhrou\gi):00876         ;---------------------------------------
                      (C:\Users\bhrou\gi):00877         ; loader.file.link
                      (C:\Users\bhrou\gi):00878         ;
                      (C:\Users\bhrou\gi):00879         ;---------------------------------------
                      (C:\Users\bhrou\gi):00880         ; load time link using lwasm simplified
                      (C:\Users\bhrou\gi):00881         ; obj data (not all link features are
                      (C:\Users\bhrou\gi):00882         ; implemented, just a single ADD op)
                      (C:\Users\bhrou\gi):00883         ;---------------------------------------
                      (C:\Users\bhrou\gi):00884         
                      (C:\Users\bhrou\gi):00885         ; linkData.content structures
                      (C:\Users\bhrou\gi):00886         ; ---------------------------
                      (C:\Users\bhrou\gi):00887         
                      (C:\Users\bhrou\gi):00888         linkData.content.header    STRUCT ; this header is ahead of each content type
0000s                 (C:\Users\bhrou\gi):00889         size    rmb types.WORD            ; number of items
0002s                 (C:\Users\bhrou\gi):00890                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00891         
                      (C:\Users\bhrou\gi):00892         linkData.content.exportAbs STRUCT ; export absolute : export a 16 bit constant (will be processed as a 8 or 16 bits extern when applying value)
0000s                 (C:\Users\bhrou\gi):00893         key     rmb types.WORD            ; key of symbol
0002s                 (C:\Users\bhrou\gi):00894         value   rmb types.WORD            ; value of symbol
0004s                 (C:\Users\bhrou\gi):00895                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00896         
                      (C:\Users\bhrou\gi):00897         linkData.content.exportRel STRUCT ; export relative : export a 16 bit relative constant (will be processed as a 8 or 16 bits extern when applying value)
0000s                 (C:\Users\bhrou\gi):00898         key     rmb types.WORD            ; key of symbol
0002s                 (C:\Users\bhrou\gi):00899         value   rmb types.WORD            ; value of symbol (should add section base address of export to this value before applying)
0004s                 (C:\Users\bhrou\gi):00900                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00901         
                      (C:\Users\bhrou\gi):00902         linkData.content.intern    STRUCT ; relocation of local variables - example : extern 8bit ( FLAGS=01 ES=ymm.NO_LOOP ) @ 0014
0000s                 (C:\Users\bhrou\gi):00903         offset  rmb types.WORD            ; offset to symbol
0002s                 (C:\Users\bhrou\gi):00904         operand rmb types.WORD            ; PLUS operand
0004s                 (C:\Users\bhrou\gi):00905                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00906         
                      (C:\Users\bhrou\gi):00907         linkData.content.extern8   STRUCT ; link to extern 8 bit variables - example : intern ( I16=195 IS=\02code OP=PLUS ) @ 0162
0000s                 (C:\Users\bhrou\gi):00908         offset  rmb types.WORD            ; offset to symbol
0002s                 (C:\Users\bhrou\gi):00909         operand rmb types.WORD            ; PLUS operand
0004s                 (C:\Users\bhrou\gi):00910         symbol  rmb types.WORD            ; symbol id
0006s                 (C:\Users\bhrou\gi):00911                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00912         
                      (C:\Users\bhrou\gi):00913         linkData.content.extern16  STRUCT ; link to extern 16 bit variables - examples : extern ( I16=-12 ES=Obj_Index_Address OP=PLUS ) @ 0001, extern ( ES=ymm.music.processFrame ) @ 003E
0000s                 (C:\Users\bhrou\gi):00914         offset  rmb types.WORD            ; offset to symbol
0002s                 (C:\Users\bhrou\gi):00915         operand rmb types.WORD            ; PLUS operand
0004s                 (C:\Users\bhrou\gi):00916         symbol  rmb types.WORD            ; symbol id
0006s                 (C:\Users\bhrou\gi):00917                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00918         
AD63                  (C:\Users\bhrou\gi):00919         loader.file.link
AD63 3476             (C:\Users\bhrou\gi):00920 [13]            pshs  d,x,y,u
                      (C:\Users\bhrou\gi):00921                 ; parse each file of loader.file.linkDataIdx
AD65 BEA127           (C:\Users\bhrou\gi):00922 [6]             ldx   >loader.file.linkDataIdx
AD68 2734             (C:\Users\bhrou\gi):00923 [3]             beq   @rts                            ; branch if link data has never been created
AD6A EC02             (C:\Users\bhrou\gi):00924 [6]             ldd   linkData.header.occupiedSlots,x
AD6C 3004             (C:\Users\bhrou\gi):00925 [5]             leax  sizeof{linkData.header},x
AD6E FDAD94           (C:\Users\bhrou\gi):00926 [6]             std   @counter
AD71 272B             (C:\Users\bhrou\gi):00927 [3]             beq   @rts                            ; branch if link data was created, but all slots were removed
AD73                  (C:\Users\bhrou\gi):00928         @next
                      (C:\Users\bhrou\gi):00929                 ; set RAM page to make file visible
AD73 EC01             (C:\Users\bhrou\gi):00930 [6]             ldd   linkData.entry.fileId,x
AD75 FDA12D           (C:\Users\bhrou\gi):00931 [6]             std   linkData.currentFile
AD78 E603             (C:\Users\bhrou\gi):00932 [5]             ldb   linkData.entry.filePage,x
AD7A EE04             (C:\Users\bhrou\gi):00933 [6]             ldu   linkData.entry.fileAddr,x
AD7C BDAAFB           (C:\Users\bhrou\gi):00934 [8]             jsr   switchpage
AD7F 10AE06           (C:\Users\bhrou\gi):00935 [7]             ldy   linkData.entry.linkData,x
AD82 BDADA0           (C:\Users\bhrou\gi):00936 [8]             jsr   linkData.content.exportAbs.skip
AD85 BDADA0           (C:\Users\bhrou\gi):00937 [8]             jsr   linkData.content.exportRel.skip
AD88 BDADA0           (C:\Users\bhrou\gi):00938 [8]             jsr   linkData.content.intern.skip
AD8B BDADD5           (C:\Users\bhrou\gi):00939 [8]             jsr   loader.file.extern8.link
AD8E BDAE04           (C:\Users\bhrou\gi):00940 [8]             jsr   loader.file.extern16.link
AD91 3008             (C:\Users\bhrou\gi):00941 [5]             leax  sizeof{linkData.entry},x        ; move to next file
AD93 CC0000           (C:\Users\bhrou\gi):00942 [3]             ldd   #0
     AD94             (C:\Users\bhrou\gi):00943         @counter equ *-2
AD96 830001           (C:\Users\bhrou\gi):00944 [4]             subd  #1
AD99 FDAD94           (C:\Users\bhrou\gi):00945 [6]             std   @counter
AD9C 26D5             (C:\Users\bhrou\gi):00946 [3]             bne   @next                           ; check if more file to process
AD9E 35F6             (C:\Users\bhrou\gi):00947 [15]    @rts    puls  d,x,y,u,pc
                      (C:\Users\bhrou\gi):00948         
                      (C:\Users\bhrou\gi):00949         
                      (C:\Users\bhrou\gi):00950         ;---------------------------------------
                      (C:\Users\bhrou\gi):00951         ; linkData.content.<xxx>.skip
                      (C:\Users\bhrou\gi):00952         ;
                      (C:\Users\bhrou\gi):00953         ; input  REG : [Y] position in link data
                      (C:\Users\bhrou\gi):00954         ; output REG : [Y] position in link data
                      (C:\Users\bhrou\gi):00955         ;---------------------------------------
                      (C:\Users\bhrou\gi):00956         ; relocate file binary with link data
                      (C:\Users\bhrou\gi):00957         ;---------------------------------------
                      (C:\Users\bhrou\gi):00958         
ADA0                  (C:\Users\bhrou\gi):00959         linkData.content.exportAbs.skip
ADA0                  (C:\Users\bhrou\gi):00960         linkData.content.exportRel.skip
ADA0                  (C:\Users\bhrou\gi):00961         linkData.content.intern.skip
ADA0 ECA4             (C:\Users\bhrou\gi):00962 [5]             ldd   linkData.content.header.size,y
                      (C:\Users\bhrou\gi):00963                 _asld
ADA2 58               (            _asld):00001 [2]             aslb
ADA3 49               (            _asld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00964                 _asld
ADA4 58               (            _asld):00001 [2]             aslb
ADA5 49               (            _asld):00002 [2]             rola
ADA6 C30002           (C:\Users\bhrou\gi):00965 [4]             addd  #sizeof{linkData.content.header}
ADA9 31AB             (C:\Users\bhrou\gi):00966 [8]             leay  d,y
ADAB 39               (C:\Users\bhrou\gi):00967 [5]             rts
                      (C:\Users\bhrou\gi):00968         
                      (C:\Users\bhrou\gi):00969         
                      (C:\Users\bhrou\gi):00970         ;---------------------------------------
                      (C:\Users\bhrou\gi):00971         ; loader.file.intern.link
                      (C:\Users\bhrou\gi):00972         ;
                      (C:\Users\bhrou\gi):00973         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):00974         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):00975         ; input  REG : [Y] position in link data
                      (C:\Users\bhrou\gi):00976         ; output REG : [Y] position in link data
                      (C:\Users\bhrou\gi):00977         ;---------------------------------------
                      (C:\Users\bhrou\gi):00978         ; relocate file binary with link data
                      (C:\Users\bhrou\gi):00979         ;---------------------------------------
ADAC                  (C:\Users\bhrou\gi):00980         loader.file.intern.link
ADAC 3456             (C:\Users\bhrou\gi):00981 [11]            pshs  d,x,u
                      (C:\Users\bhrou\gi):00982         
                      (C:\Users\bhrou\gi):00983                 ; parse all INTERN symbols
ADAE ECA4             (C:\Users\bhrou\gi):00984 [5]             ldd   linkData.content.header.size,y
ADB0 3122             (C:\Users\bhrou\gi):00985 [5]             leay  sizeof{linkData.content.header},y
ADB2 FDADC9           (C:\Users\bhrou\gi):00986 [6]             std   @counter
ADB5 2602             (C:\Users\bhrou\gi):00987 [3]             bne   >
ADB7 35D6             (C:\Users\bhrou\gi):00988 [13]            puls  d,x,u,pc
                      (C:\Users\bhrou\gi):00989         !
ADB9 E661             (C:\Users\bhrou\gi):00990 [5]             ldb   1,s                               ; restore file page number
ADBB BDAAFB           (C:\Users\bhrou\gi):00991 [8]             jsr   switchpage
                      (C:\Users\bhrou\gi):00992         !
ADBE EC22             (C:\Users\bhrou\gi):00993 [6]             ldd   linkData.content.intern.operand,y ; load plus operand
ADC0 30CB             (C:\Users\bhrou\gi):00994 [8]             leax  d,u                               ; add file binary location
ADC2 ECA4             (C:\Users\bhrou\gi):00995 [5]             ldd   linkData.content.intern.offset,y  ; load offset to symbol reference
ADC4 AFCB             (C:\Users\bhrou\gi):00996 [9]             stx   d,u                               ; update address
ADC6 3124             (C:\Users\bhrou\gi):00997 [5]             leay  sizeof{linkData.content.intern},y ; move to next symbol
ADC8 CC0000           (C:\Users\bhrou\gi):00998 [3]             ldd   #0
     ADC9             (C:\Users\bhrou\gi):00999         @counter equ *-2
ADCB 830001           (C:\Users\bhrou\gi):01000 [4]             subd  #1
ADCE FDADC9           (C:\Users\bhrou\gi):01001 [6]             std   @counter
ADD1 26EB             (C:\Users\bhrou\gi):01002 [3]             bne   <                                 ; check if more elements to process
                      (C:\Users\bhrou\gi):01003         
ADD3 35D6             (C:\Users\bhrou\gi):01004 [13]            puls  d,x,u,pc
                      (C:\Users\bhrou\gi):01005         
                      (C:\Users\bhrou\gi):01006         
                      (C:\Users\bhrou\gi):01007         ;---------------------------------------
                      (C:\Users\bhrou\gi):01008         ; loader.file.extern8.link
                      (C:\Users\bhrou\gi):01009         ;
                      (C:\Users\bhrou\gi):01010         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):01011         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):01012         ; input  REG : [Y] position in link data
                      (C:\Users\bhrou\gi):01013         ; output REG : [Y] position in link data
                      (C:\Users\bhrou\gi):01014         ;---------------------------------------
                      (C:\Users\bhrou\gi):01015         ; resolve external 8 bits symbols
                      (C:\Users\bhrou\gi):01016         ;---------------------------------------
ADD5                  (C:\Users\bhrou\gi):01017         loader.file.extern8.link
ADD5 3456             (C:\Users\bhrou\gi):01018 [11]            pshs  d,x,u
                      (C:\Users\bhrou\gi):01019         
                      (C:\Users\bhrou\gi):01020                 ; parse all EXTERN8 symbols
ADD7 ECA4             (C:\Users\bhrou\gi):01021 [5]             ldd   linkData.content.header.size,y
ADD9 3122             (C:\Users\bhrou\gi):01022 [5]             leay  sizeof{linkData.content.header},y
ADDB FDADF8           (C:\Users\bhrou\gi):01023 [6]             std   @counter
ADDE 2602             (C:\Users\bhrou\gi):01024 [3]             bne   >
ADE0 35D6             (C:\Users\bhrou\gi):01025 [13]            puls  d,x,u,pc
                      (C:\Users\bhrou\gi):01026         !
                      (C:\Users\bhrou\gi):01027                 ; find symbol by searching in all file's linkData 
ADE2 EC24             (C:\Users\bhrou\gi):01028 [6]             ldd   linkData.content.extern8.symbol,y
ADE4 FDA12F           (C:\Users\bhrou\gi):01029 [6]             std   linkData.currentSymbol
ADE7 BDAE30           (C:\Users\bhrou\gi):01030 [8]             jsr   linkData.symbol.search
ADEA E322             (C:\Users\bhrou\gi):01031 [7]             addd  linkData.content.extern8.operand,y ; add external symbol value to plus operand
ADEC AEA4             (C:\Users\bhrou\gi):01032 [5]             ldx   linkData.content.extern8.offset,y  ; load offset to symbol reference
ADEE BFADF3           (C:\Users\bhrou\gi):01033 [6]             stx   @addr
ADF1 E7C904D2         (C:\Users\bhrou\gi):01034 [8]             stb   1234,u                             ; update address
     ADF3             (C:\Users\bhrou\gi):01035         @addr   equ   *-2
ADF5 3126             (C:\Users\bhrou\gi):01036 [5]             leay  sizeof{linkData.content.extern8},y ; move to next symbol
ADF7 CC0000           (C:\Users\bhrou\gi):01037 [3]             ldd   #0
     ADF8             (C:\Users\bhrou\gi):01038         @counter equ *-2
ADFA 830001           (C:\Users\bhrou\gi):01039 [4]             subd  #1
ADFD FDADF8           (C:\Users\bhrou\gi):01040 [6]             std   @counter
AE00 26E0             (C:\Users\bhrou\gi):01041 [3]             bne   <                                 ; check if more elements to process
AE02 35D6             (C:\Users\bhrou\gi):01042 [13]            puls  d,x,u,pc
                      (C:\Users\bhrou\gi):01043         
                      (C:\Users\bhrou\gi):01044         
                      (C:\Users\bhrou\gi):01045         ;---------------------------------------
                      (C:\Users\bhrou\gi):01046         ; loader.file.extern16.link
                      (C:\Users\bhrou\gi):01047         ;
                      (C:\Users\bhrou\gi):01048         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):01049         ; input  REG : [Y] position in link data
                      (C:\Users\bhrou\gi):01050         ; output REG : [Y] position in link data
                      (C:\Users\bhrou\gi):01051         ;---------------------------------------
                      (C:\Users\bhrou\gi):01052         ; resolve external 16 bits symbols
                      (C:\Users\bhrou\gi):01053         ;---------------------------------------
AE04                  (C:\Users\bhrou\gi):01054         loader.file.extern16.link
AE04 3456             (C:\Users\bhrou\gi):01055 [11]            pshs  d,x,u
                      (C:\Users\bhrou\gi):01056         
                      (C:\Users\bhrou\gi):01057                 ; parse all EXTERN16 symbols
AE06 ECA4             (C:\Users\bhrou\gi):01058 [5]             ldd   linkData.content.header.size,y
AE08 3122             (C:\Users\bhrou\gi):01059 [5]             leay  sizeof{linkData.content.header},y
AE0A FDAE24           (C:\Users\bhrou\gi):01060 [6]             std   @counter
AE0D 2602             (C:\Users\bhrou\gi):01061 [3]             bne   >
AE0F 35D6             (C:\Users\bhrou\gi):01062 [13]            puls  d,x,u,pc
                      (C:\Users\bhrou\gi):01063         !
                      (C:\Users\bhrou\gi):01064                 ; find symbol by searching in all file's linkData 
AE11 EC24             (C:\Users\bhrou\gi):01065 [6]             ldd   linkData.content.extern16.symbol,y
AE13 FDA12F           (C:\Users\bhrou\gi):01066 [6]             std   linkData.currentSymbol
AE16 BDAE30           (C:\Users\bhrou\gi):01067 [8]             jsr   linkData.symbol.search
AE19 AE22             (C:\Users\bhrou\gi):01068 [6]             ldx   linkData.content.extern16.operand,y ; load plus operand
AE1B 308B             (C:\Users\bhrou\gi):01069 [8]             leax  d,x                                 ; add external symbol value
AE1D ECA4             (C:\Users\bhrou\gi):01070 [5]             ldd   linkData.content.extern16.offset,y  ; load offset to symbol reference
AE1F AFCB             (C:\Users\bhrou\gi):01071 [9]             stx   d,u                                 ; update address
AE21 3126             (C:\Users\bhrou\gi):01072 [5]             leay  sizeof{linkData.content.extern8},y  ; move to next symbol
AE23 CC0000           (C:\Users\bhrou\gi):01073 [3]             ldd   #0
     AE24             (C:\Users\bhrou\gi):01074         @counter equ *-2
AE26 830001           (C:\Users\bhrou\gi):01075 [4]             subd  #1
AE29 FDAE24           (C:\Users\bhrou\gi):01076 [6]             std   @counter
AE2C 26E3             (C:\Users\bhrou\gi):01077 [3]             bne   <                                 ; check if more elements to process
AE2E 35D6             (C:\Users\bhrou\gi):01078 [13]            puls  d,x,u,pc
                      (C:\Users\bhrou\gi):01079         
                      (C:\Users\bhrou\gi):01080         
AE30                  (C:\Users\bhrou\gi):01081         linkData.symbol.search
AE30 3460             (C:\Users\bhrou\gi):01082 [9]             pshs  y,u
                      (C:\Users\bhrou\gi):01083                 ; parse each file of loader.file.linkDataIdx
AE32 BEA127           (C:\Users\bhrou\gi):01084 [6]             ldx   >loader.file.linkDataIdx
AE35 EC02             (C:\Users\bhrou\gi):01085 [6]             ldd   linkData.header.occupiedSlots,x
AE37 FDAE92           (C:\Users\bhrou\gi):01086 [6]             std   @fileCounter
AE3A 3004             (C:\Users\bhrou\gi):01087 [5]             leax  sizeof{linkData.header},x
AE3C                  (C:\Users\bhrou\gi):01088         @fileLoop
                      (C:\Users\bhrou\gi):01089                 ; exclude from search the current file being resolved
AE3C EC01             (C:\Users\bhrou\gi):01090 [6]             ldd   linkData.entry.fileId,x
AE3E 10B3A12D         (C:\Users\bhrou\gi):01091 [8]             cmpd  linkData.currentFile
AE42 274B             (C:\Users\bhrou\gi):01092 [3]             beq   @nextFile
                      (C:\Users\bhrou\gi):01093         ;
                      (C:\Users\bhrou\gi):01094                 ; set RAM page to make file visible
AE44 EE04             (C:\Users\bhrou\gi):01095 [6]             ldu   linkData.entry.fileAddr,x
AE46 10AE06           (C:\Users\bhrou\gi):01096 [7]             ldy   linkData.entry.linkData,x
                      (C:\Users\bhrou\gi):01097         ;
                      (C:\Users\bhrou\gi):01098                 ; parse all absolute symbols
AE49 ECA4             (C:\Users\bhrou\gi):01099 [5]             ldd   linkData.content.header.size,y
AE4B 3122             (C:\Users\bhrou\gi):01100 [5]             leay  sizeof{linkData.content.header},y
AE4D FDAE61           (C:\Users\bhrou\gi):01101 [6]             std   @absSymbolCounter
AE50 2719             (C:\Users\bhrou\gi):01102 [3]             beq   @parseRelSymbol
AE52                  (C:\Users\bhrou\gi):01103         @absSymbolLoop
AE52 ECA4             (C:\Users\bhrou\gi):01104 [5]             ldd   linkData.content.exportAbs.key,y
AE54 10B3A12F         (C:\Users\bhrou\gi):01105 [8]             cmpd  linkData.currentSymbol
AE58 2604             (C:\Users\bhrou\gi):01106 [3]             bne   >
AE5A EC22             (C:\Users\bhrou\gi):01107 [6]             ldd   linkData.content.exportAbs.value,y ; this value is absolute
AE5C 35E0             (C:\Users\bhrou\gi):01108 [11]            puls  y,u,pc
AE5E 3124             (C:\Users\bhrou\gi):01109 [5]     !       leay  sizeof{linkData.content.intern},y  ; move to next symbol
AE60 CC0000           (C:\Users\bhrou\gi):01110 [3]             ldd   #0
     AE61             (C:\Users\bhrou\gi):01111         @absSymbolCounter equ *-2
AE63 830001           (C:\Users\bhrou\gi):01112 [4]             subd  #1
AE66 FDAE61           (C:\Users\bhrou\gi):01113 [6]             std   @absSymbolCounter
AE69 26E7             (C:\Users\bhrou\gi):01114 [3]             bne   @absSymbolLoop                     ; check if more elements to process
AE6B                  (C:\Users\bhrou\gi):01115         @parseRelSymbol
                      (C:\Users\bhrou\gi):01116                 ; parse all relative symbols
AE6B ECA4             (C:\Users\bhrou\gi):01117 [5]             ldd   linkData.content.header.size,y
AE6D 3122             (C:\Users\bhrou\gi):01118 [5]             leay  sizeof{linkData.content.header},y
AE6F FDAE85           (C:\Users\bhrou\gi):01119 [6]             std   @relSymbolCounter
AE72 271B             (C:\Users\bhrou\gi):01120 [3]             beq   @nextFile
AE74                  (C:\Users\bhrou\gi):01121         @relSymbolLoop
AE74 ECA4             (C:\Users\bhrou\gi):01122 [5]             ldd   linkData.content.exportRel.key,y
AE76 10B3A12F         (C:\Users\bhrou\gi):01123 [8]             cmpd  linkData.currentSymbol
AE7A 2606             (C:\Users\bhrou\gi):01124 [3]             bne   >
AE7C 1F30             (C:\Users\bhrou\gi):01125 [6]             tfr   u,d                                ; get base section offset
AE7E E322             (C:\Users\bhrou\gi):01126 [7]             addd  linkData.content.exportRel.value,y ; add symbol value (relative address)
AE80 35E0             (C:\Users\bhrou\gi):01127 [11]            puls  y,u,pc
AE82 3124             (C:\Users\bhrou\gi):01128 [5]     !       leay  sizeof{linkData.content.intern},y  ; move to next symbol
AE84 CC0000           (C:\Users\bhrou\gi):01129 [3]             ldd   #0
     AE85             (C:\Users\bhrou\gi):01130         @relSymbolCounter equ *-2
AE87 830001           (C:\Users\bhrou\gi):01131 [4]             subd  #1
AE8A FDAE85           (C:\Users\bhrou\gi):01132 [6]             std   @relSymbolCounter
AE8D 26E5             (C:\Users\bhrou\gi):01133 [3]             bne   @relSymbolLoop                     ; check if more elements to process
AE8F                  (C:\Users\bhrou\gi):01134         @nextFile
AE8F 3008             (C:\Users\bhrou\gi):01135 [5]             leax  sizeof{linkData.entry},x           ; move to next file
AE91 CC0000           (C:\Users\bhrou\gi):01136 [3]             ldd   #0
     AE92             (C:\Users\bhrou\gi):01137         @fileCounter equ *-2
AE94 830001           (C:\Users\bhrou\gi):01138 [4]             subd  #1
AE97 FDAE92           (C:\Users\bhrou\gi):01139 [6]             std   @fileCounter
AE9A 26A0             (C:\Users\bhrou\gi):01140 [3]             bne   @fileLoop                          ; check if more file to process
AE9C 20FE             (C:\Users\bhrou\gi):01141 [3]             bra   *                                  ; unresolved symbol
                      (C:\Users\bhrou\gi):01142         
     AE9E             (C:\Users\bhrou\gi):01143         loader.memoryPool equ *
                      (C:\Users\bhrou\gi):01144         
