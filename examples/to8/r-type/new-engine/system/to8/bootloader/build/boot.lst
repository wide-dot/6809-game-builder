                      (C:\Users\bhrou\gi):00001         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00002         ; FD Boot loader
                      (C:\Users\bhrou\gi):00003         ; Original code from Prehisto
                      (C:\Users\bhrou\gi):00004         ; Benoit Rousseau 07/2023 (memory ext. check)
                      (C:\Users\bhrou\gi):00005         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00006         ; A fully featured boot loader
                      (C:\Users\bhrou\gi):00007         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00008         
                      (C:\Users\bhrou\gi):00009                 INCLUDE "new-engine/6809/types.const.asm"
                      (new-engine/6809/t):00001          IFNDEF types.const.asm
     0001             (new-engine/6809/t):00002         types.const.asm  equ 1
                      (new-engine/6809/t):00003         
     0001             (new-engine/6809/t):00004         types.BYTE      equ 1
     0008             (new-engine/6809/t):00005         types.BYTE_BITS equ 8*types.BYTE
     0002             (new-engine/6809/t):00006         types.WORD      equ 2*types.BYTE
     0010             (new-engine/6809/t):00007         types.WORD_BITS equ 8*types.WORD
                      (new-engine/6809/t):00008          ENDC
                      (C:\Users\bhrou\gi):00010                 INCLUDE "new-engine/system/to8/map.const.asm"
                      (new-engine/system):00001         ;*******************************************************************************
                      (new-engine/system):00002         ; Thomson TO8 - Memory map
                      (new-engine/system):00003         ; ------------------------------------------------------------------------------
                      (new-engine/system):00004         ;
                      (new-engine/system):00005         ; system addresses
                      (new-engine/system):00006         ;*******************************************************************************
                      (new-engine/system):00007         
                      (new-engine/system):00008          IFNDEF map.const.asm
     0001             (new-engine/system):00009         map.const.asm equ 1
                      (new-engine/system):00010         
                      (new-engine/system):00011         ; mc6846
     E7C0             (new-engine/system):00012         map.MC6846.CSR      equ $E7C0 ; (bit2) set mute
     E7C1             (new-engine/system):00013         map.MC6846.CRC      equ $E7C1
     E7C2             (new-engine/system):00014         map.MC6846.DDRC     equ $E7C2
     E7C3             (new-engine/system):00015         map.MC6846.PRC      equ $E7C3 ; (bit0) set half ram page 0 (low or high) in video area ($4000-$5FFF)
     E7C4             (new-engine/system):00016         map.MC6846.CSR2     equ $E7C4
     E7C5             (new-engine/system):00017         map.MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (new-engine/system):00018         map.MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (new-engine/system):00019         map.MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (new-engine/system):00020         
                      (new-engine/system):00021         ; mc6821 system
     E7C8             (new-engine/system):00022         map.MC6821.PRA      equ $E7C8
     E7C9             (new-engine/system):00023         map.MC6821.PRB      equ $E7C9
     E7CA             (new-engine/system):00024         map.MC6821.CRA      equ $E7CA
     E7CB             (new-engine/system):00025         map.MC6821.CRB      equ $E7CB
                      (new-engine/system):00026         
                      (new-engine/system):00027         ; mc6821 music and game
     E7CC             (new-engine/system):00028         map.MC6821.PRA1     equ $E7CC
     E7CD             (new-engine/system):00029         map.MC6821.PRA2     equ $E7CD
     E7CE             (new-engine/system):00030         map.MC6821.CRA1     equ $E7CE
     E7CF             (new-engine/system):00031         map.MC6821.CRA2     equ $E7CF
                      (new-engine/system):00032         
                      (new-engine/system):00033         ; thmfc01 gate controler floppy disk
     E7D0             (new-engine/system):00034         map.THMFC01.STAT0   equ $E7D0
     E7D0             (new-engine/system):00035         map.THMFC01.CMD0    equ $E7D0
     E7D1             (new-engine/system):00036         map.THMFC01.STAT1   equ $E7D1
     E7D1             (new-engine/system):00037         map.THMFC01.CMD1    equ $E7D1
     E7D2             (new-engine/system):00038         map.THMFC01.CMD2    equ $E7D2
     E7D3             (new-engine/system):00039         map.THMFC01.WDATA   equ $E7D3
     E7D3             (new-engine/system):00040         map.THMFC01.RDATA   equ $E7D3
     E7D4             (new-engine/system):00041         map.THMFC01.WCLK    equ $E7D4
     E7D5             (new-engine/system):00042         map.THMFC01.WSECT   equ $E7D5
     E7D6             (new-engine/system):00043         map.THMFC01.TRCK    equ $E7D6
     E7D7             (new-engine/system):00044         map.THMFC01.CELL    equ $E7D7
                      (new-engine/system):00045         
                      (new-engine/system):00046         ; ef9369 palette
     E7DA             (new-engine/system):00047         map.EF9369.D        equ $E7DA
     E7DB             (new-engine/system):00048         map.EF9369.A        equ $E7DB
                      (new-engine/system):00049         
                      (new-engine/system):00050         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (new-engine/system):00051         map.CF74021.LGAMOD  equ $E7DC
     E7DD             (new-engine/system):00052         map.CF74021.SYS2    equ $E7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     E7E4             (new-engine/system):00053         map.CF74021.COM     equ $E7E4
     E7E5             (new-engine/system):00054         map.CF74021.DATA    equ $E7E5 ; (bit0-4) set ram page in data area ($A000-$DFFF)
     E7E6             (new-engine/system):00055         map.CF74021.CART    equ $E7E6 ; (bit0-4) set page in cartridge area ($0000-$3FFF), (bit5) set ram over cartridge, (bit6) enable write
     E7E7             (new-engine/system):00056         map.CF74021.SYS1    equ $E7E7 ; (bit4) set ram over data area
                      (new-engine/system):00057         
                      (new-engine/system):00058         ; extension port
     00E7             (new-engine/system):00059         map.EXTPORT         equ $E7
     E7F0             (new-engine/system):00060         map.IEEE488         equ $E7F0 ; to E7F7
     E7F2             (new-engine/system):00061         map.EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (new-engine/system):00062         map.EF5860.TX       equ $E7F3 ; MIDI
     E7FE             (new-engine/system):00063         map.MEA8000.D       equ $E7FE ; Vocal synth
     E7FF             (new-engine/system):00064         map.MEA8000.A       equ $E7FF : Vocal synth
                      (new-engine/system):00065         
                      (new-engine/system):00066         ; ROM routines
     E004             (new-engine/system):00067         map.DKCONT          equ $E004 ; TO:DKCO, MO:SWI $26
     E007             (new-engine/system):00068         map.DKBOOT          equ $E007 ; boot
     E00A             (new-engine/system):00069         map.DKFMT           equ $E00A ; format
     E00D             (new-engine/system):00070         map.LECFA           equ $E00D ; read FAT
     E010             (new-engine/system):00071         map.RECFI           equ $E010 ; search file
     E010             (new-engine/system):00072         map.RECUP           equ $E010 ; clear file
     E010             (new-engine/system):00073         map.ECRSE           equ $E010 ; sector write
     E019             (new-engine/system):00074         map.ALLOD           equ $E019 ; catalog file allocation
     E01C             (new-engine/system):00075         map.ALLOB           equ $E01C ; bloc allocation
     E01F             (new-engine/system):00076         map.MAJCL           equ $E01F ; cluster update
     E022             (new-engine/system):00077         map.FINTR           equ $E022 ; transfert end
     E025             (new-engine/system):00078         map.QDDSTD          equ $E025 ; QDD std functions
     E028             (new-engine/system):00079         map.QDDSYS          equ $E028 ; QDD sys functions
                      (new-engine/system):00080         
     E803             (new-engine/system):00081         map.PUTC            equ $E803
     E806             (new-engine/system):00082         map.GETC            equ $E806
     E809             (new-engine/system):00083         map.KTST            equ $E809
     E82A             (new-engine/system):00084         map.DKCO            equ $E82A ; read or write floppy disk routine
     E830             (new-engine/system):00085         map.IRQ.EXIT        equ $E830 ; to exit an irq
                      (new-engine/system):00086         
                      (new-engine/system):00087         ; system monitor registers
     0060             (new-engine/system):00088         map.REG.DP          equ $60   ; direct page for system monitor registers
     6019             (new-engine/system):00089         map.STATUS          equ $6019 ; status bitfield
     6048             (new-engine/system):00090         map.DK.OPC          equ $6048 ; operation
     6049             (new-engine/system):00091         map.DK.DRV          equ $6049 ; drive
     604C             (new-engine/system):00092         map.DK.SEC          equ $604C ; sector
     604A             (new-engine/system):00093         map.DK.TRK          equ $604A ; $604B ; track
     604E             (new-engine/system):00094         map.DK.STA          equ $604E ; return status
     604F             (new-engine/system):00095         map.DK.BUF          equ $604F ; $6050 ; data write location
     6023             (new-engine/system):00096         map.FIRQPT          equ $6023 ; routine firq
     6027             (new-engine/system):00097         map.TIMERPT         equ $6027 ; routine irq timer
     6081             (new-engine/system):00098         map.CF74021.SYS1.R  equ $6081 ; reading value for map.CF74021.SYS1
                      (new-engine/system):00099         
                      (new-engine/system):00100         ; -----------------------------------------------------------------------------
                      (new-engine/system):00101         ; constants
                      (new-engine/system):00102         
     0035             (new-engine/system):00103         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (new-engine/system):00104         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
                      (new-engine/system):00105         
                      (new-engine/system):00106         ; -----------------------------------------------------------------------------
                      (new-engine/system):00107         ; mapping to generic names
                      (new-engine/system):00108         
     E7CD             (new-engine/system):00109         map.DAC            equ map.MC6821.PRA2
     E7C6             (new-engine/system):00110         map.RND            equ map.MC6846.TMSB
                      (new-engine/system):00111             ENDC
                      (C:\Users\bhrou\gi):00011                 INCLUDE "new-engine/system/to8/bootloader/loader.const.asm"
                      (new-engine/system):00001          IFNDEF loader.PAGE
0000                  (new-engine/system):00002         loader.PAGE equ 4
                      (new-engine/system):00003          ENDC
                      (new-engine/system):00004         
                      (new-engine/system):00005          IFNDEF loader.ADDRESS
0000                  (new-engine/system):00006         loader.ADDRESS equ $A000
                      (new-engine/system):00007          ENDC
                      (new-engine/system):00008         
                      (new-engine/system):00009          IFNDEF loader.DEFAULT_DYNAMIC_MEMORY_SIZE
0000                  (new-engine/system):00010         loader.DEFAULT_DYNAMIC_MEMORY_SIZE equ loader.ADDRESS-loader.memoryPool+$4000
                      (new-engine/system):00011          ENDC
                      (new-engine/system):00012         
                      (new-engine/system):00013          IFNDEF loader.DEFAULT_SCENE_DIR_ID
     0000             (new-engine/system):00014         loader.DEFAULT_SCENE_DIR_ID equ 0
                      (new-engine/system):00015          ENDC
                      (new-engine/system):00016         
                      (new-engine/system):00017          IFNDEF loader.DEFAULT_SCENE_FILE_ID
     0000             (new-engine/system):00018         loader.DEFAULT_SCENE_FILE_ID equ 0
                      (new-engine/system):00019          ENDC
                      (new-engine/system):00020         
                      (new-engine/system):00021          IFNDEF loader.DEFAULT_SCENE_EXEC_PAGE
     0005             (new-engine/system):00022         loader.DEFAULT_SCENE_EXEC_PAGE equ 5
                      (new-engine/system):00023          ENDC
                      (new-engine/system):00024         
                      (new-engine/system):00025          IFNDEF loader.DEFAULT_SCENE_EXEC_ADDR
     6100             (new-engine/system):00026         loader.DEFAULT_SCENE_EXEC_ADDR equ $6100
                      (new-engine/system):00027          ENDC
                      (C:\Users\bhrou\gi):00012         
                      (C:\Users\bhrou\gi):00013         ; Disk boot
                      (C:\Users\bhrou\gi):00014                 org    $6200
     60               (C:\Users\bhrou\gi):00015                 setdp  map.REG.DP
                      (C:\Users\bhrou\gi):00016         
                      (C:\Users\bhrou\gi):00017         ; Freeze interrupts
6200 1A50             (C:\Users\bhrou\gi):00018                 orcc  #$50
                      (C:\Users\bhrou\gi):00019         
                      (C:\Users\bhrou\gi):00020         ; Check computer type
6202 308C7C           (C:\Users\bhrou\gi):00021                 leax  <mess1,pcr          ; Error message
6205 8602             (C:\Users\bhrou\gi):00022                 lda   #$02                ; Load code
6207 B1FFF0           (C:\Users\bhrou\gi):00023                 cmpa  >$fff0              ; Check machine code
620A 244F             (C:\Users\bhrou\gi):00024                 bhs   err                 ; Error if not TO+
                      (C:\Users\bhrou\gi):00025         
                      (C:\Users\bhrou\gi):00026         ; Check computer memory
                      (C:\Users\bhrou\gi):00027                 IFDEF boot.CHECK_MEMORY_EXT
620C 8E6293           (C:\Users\bhrou\gi):00028                 ldx   #mess2              ; Error message
620F 8610             (C:\Users\bhrou\gi):00029                 lda   #$10
6211 B7E7E5           (C:\Users\bhrou\gi):00030                 sta   map.CF74021.DATA
6214 CEA000           (C:\Users\bhrou\gi):00031                 ldu   #$A000
6217 8655             (C:\Users\bhrou\gi):00032                 lda   #$55
6219 A7C4             (C:\Users\bhrou\gi):00033                 sta   ,u
621B A1C4             (C:\Users\bhrou\gi):00034                 cmpa  ,u
621D 263C             (C:\Users\bhrou\gi):00035                 bne   err                 ; Error if no memory ext.
                      (C:\Users\bhrou\gi):00036                 ENDC
                      (C:\Users\bhrou\gi):00037         
                      (C:\Users\bhrou\gi):00038         ; Load loader sectors
                      (C:\Users\bhrou\gi):00039          IFGE loader.ADDRESS-$A000        ; Skip if not data space
621F 8610             (C:\Users\bhrou\gi):00040                 lda   #$10
6221 9A81             (C:\Users\bhrou\gi):00041                 ora   <map.CF74021.SYS1.R ; Set RAM
6223 9781             (C:\Users\bhrou\gi):00042                 sta   <map.CF74021.SYS1.R ; over data
6225 B7E7E7           (C:\Users\bhrou\gi):00043                 sta   >map.CF74021.SYS1   ; space
6228 C604             (C:\Users\bhrou\gi):00044                 ldb   #loader.PAGE        ; Load RAM page
622A F7E7E5           (C:\Users\bhrou\gi):00045                 stb   >map.CF74021.DATA   ; Switch RAM page
                      (C:\Users\bhrou\gi):00046          ELSE
                      (C:\Users\bhrou\gi):00047           IFGE loader.ADDRESS-$6000       ; Skip if not resident space
                      (C:\Users\bhrou\gi):00048           ELSE
                      (C:\Users\bhrou\gi):00049            IFGE loader.ADDRESS-$4000      ; Skip if not video space
                      (C:\Users\bhrou\gi):00050                 ldb   #loader.PAGE        ; Load RAM page
                      (C:\Users\bhrou\gi):00051                 andb  #$01                ; Keep only half page A or B
                      (C:\Users\bhrou\gi):00052                 orb   map.MC6846.PRC      ; Merge register value
                      (C:\Users\bhrou\gi):00053                 stb   map.MC6846.PRC      ; Set desired half page in video space
                      (C:\Users\bhrou\gi):00054            ELSE
                      (C:\Users\bhrou\gi):00055                 ldb   #loader.PAGE        ; Load RAM page
                      (C:\Users\bhrou\gi):00056                 orb   #$60                ; Set RAM over cartridge space
                      (C:\Users\bhrou\gi):00057                 stb   >map.CF74021.CART   ; Switch RAM page
                      (C:\Users\bhrou\gi):00058            ENDC
                      (C:\Users\bhrou\gi):00059           ENDC
                      (C:\Users\bhrou\gi):00060          ENDC
622D CCA000           (C:\Users\bhrou\gi):00061                 ldd   #loader.ADDRESS    ; Loading
6230 DD4F             (C:\Users\bhrou\gi):00062                 std   <map.DK.BUF        ; address
                      (C:\Users\bhrou\gi):00063                 IFGT loader.ADDRESS-((loader.ADDRESS/256)*256)
                      (C:\Users\bhrou\gi):00064                 ERROR "loader.ADDRESS is expected to be a multiple of 256 bytes. Ex: $A000, $6100, ..."
                      (C:\Users\bhrou\gi):00065                 ENDC                     ; b register is always 0
6232 D7FF             (C:\Users\bhrou\gi):00066                 stb   <$60ff             ; Cold reset
6234 8602             (C:\Users\bhrou\gi):00067                 lda   #$02               ; >read code
6236 DD48             (C:\Users\bhrou\gi):00068                 std   <map.DK.OPC        ; Read/Head 0
6238 CE62C2           (C:\Users\bhrou\gi):00069                 ldu   #blist             ; Interleave list
623B 8E62A6           (C:\Users\bhrou\gi):00070                 ldx   #mess3             ; Error message
623E A6C5             (C:\Users\bhrou\gi):00071         boot2   lda   b,u                ; Get sector
6240 974C             (C:\Users\bhrou\gi):00072                 sta   <map.DK.SEC        ; number
6242 BDE004           (C:\Users\bhrou\gi):00073                 jsr   >map.DKCONT        ; Load sector
6245 2405             (C:\Users\bhrou\gi):00074                 bcc   boot3              ; Skip if no error
6247 BDE004           (C:\Users\bhrou\gi):00075                 jsr   >map.DKCONT        ; Reload sector
624A 250F             (C:\Users\bhrou\gi):00076                 bcs   err                ; Skip if error
624C 0C4F             (C:\Users\bhrou\gi):00077         boot3   inc   <map.DK.BUF        ; Move sector ptr
624E 5C               (C:\Users\bhrou\gi):00078                 incb                     ; Sector+1
624F 7A6280           (C:\Users\bhrou\gi):00079                 dec   >secnbr            ; Next
6252 26EA             (C:\Users\bhrou\gi):00080                 bne   boot2              ; sector
6254 10CE9F00         (C:\Users\bhrou\gi):00081                 lds   #$9F00             ; Set system stack
6258 7EA000           (C:\Users\bhrou\gi):00082                 jmp   >loader.ADDRESS
                      (C:\Users\bhrou\gi):00083         
                      (C:\Users\bhrou\gi):00084         ; Display error message
625B 338C56           (C:\Users\bhrou\gi):00085         err     leau  <mess0,pcr         ; Location
625E 8D08             (C:\Users\bhrou\gi):00086                 bsr   err2               ; Display location
6260 3384             (C:\Users\bhrou\gi):00087                 leau  ,x                 ; Message pointer
6262 8D04             (C:\Users\bhrou\gi):00088                 bsr   err2               ; Display message
6264 20FE             (C:\Users\bhrou\gi):00089         err0    bra   err0               ; Infinite loop
                      (C:\Users\bhrou\gi):00090         
                      (C:\Users\bhrou\gi):00091         ; Display message
6266 8D06             (C:\Users\bhrou\gi):00092         err1    bsr   err3               ; Display char
6268 E6C0             (C:\Users\bhrou\gi):00093         err2    ldb   ,u+                ; Read char
626A 2AFA             (C:\Users\bhrou\gi):00094                 bpl   err1               ; Next if not last
626C C47F             (C:\Users\bhrou\gi):00095                 andb  #$7f               ; Mask char
626E 1FB8             (C:\Users\bhrou\gi):00096         err3    tfr   dp,a               ; Read DP
6270 48               (C:\Users\bhrou\gi):00097                 asla                     ; Check if MO or TO
6271 102B858E         (C:\Users\bhrou\gi):00098                 lbmi  map.PUTC           ; Display for TO - PUTC
6275 3F               (C:\Users\bhrou\gi):00099                 swi                      ; Display for MO
6276 82               (C:\Users\bhrou\gi):00100                 fcb   $82                ; Display for MO - PUTC parameter
                      (C:\Users\bhrou\gi):00101         
                      (C:\Users\bhrou\gi):00102                 IFGT *-$6278
                      (C:\Users\bhrou\gi):00103                 ERROR "boot code part 1 is too large !"
                      (C:\Users\bhrou\gi):00104                 ENDC
                      (C:\Users\bhrou\gi):00105         
6277 00               (C:\Users\bhrou\gi):00106                 align $6278
6278                  (C:\Users\bhrou\gi):00107         @magicNumber
6278 42415349433200   (C:\Users\bhrou\gi):00108                 fcn   "BASIC2"
627F 00               (C:\Users\bhrou\gi):00109                 fcb   $00                               ; checksum (set at build stage)
6280 0F               (C:\Users\bhrou\gi):00110         secnbr  fcb   (builder.lwasm.size.loader/256)+1 ; number of sectors to read
                      (C:\Users\bhrou\gi):00111         
                      (C:\Users\bhrou\gi):00112         ; Error messages
6281 4F6E6C7920666F72 (C:\Users\bhrou\gi):00113         mess1   fcs   "Only for TO8/8D/9+"
     20544F382F38442F
     39AB
6293 5265717569726573 (C:\Users\bhrou\gi):00114         mess2   fcs   "Requires 256Ko ext."
     203235364B6F2065
     7874AE
62A6 2020202020492F4F (C:\Users\bhrou\gi):00115         mess3   fcs   "     I/O|Error"
     7C4572726FF2
                      (C:\Users\bhrou\gi):00116         
                      (C:\Users\bhrou\gi):00117         ; Location message
62B4 1F2121           (C:\Users\bhrou\gi):00118         mess0   fcb   $1f,$21,$21
62B7 1F1113           (C:\Users\bhrou\gi):00119                 fcb   $1f,$11,$13        ; 3 lines (11-13)
62BA 1B47             (C:\Users\bhrou\gi):00120                 fcb   $1b,$47            ; font : white
62BC 1B51             (C:\Users\bhrou\gi):00121                 fcb   $1b,$51            ; background : red
62BE 0C               (C:\Users\bhrou\gi):00122                 fcb   $0c                ; cls
62BF 1F4CCB           (C:\Users\bhrou\gi):00123                 fcb   $1f,$4c,$4b+$80    ; locate for MO
                      (C:\Users\bhrou\gi):00124         
                      (C:\Users\bhrou\gi):00125         ; Interleave table
62C2 0F0D0B           (C:\Users\bhrou\gi):00126         blist   fcb   $0f,$0d,$0b        ; first value is omitted ($01 : boot sector)
62C5 09070503         (C:\Users\bhrou\gi):00127                 fcb   $09,$07,$05,$03
62C9 08060402         (C:\Users\bhrou\gi):00128                 fcb   $08,$06,$04,$02
62CD 100E0C0A         (C:\Users\bhrou\gi):00129                 fcb   $10,$0e,$0c,$0a
                      (C:\Users\bhrou\gi):00130         
                      (C:\Users\bhrou\gi):00131                 IFGT *-$6300
                      (C:\Users\bhrou\gi):00132                 ERROR "boot code part 2 is too large !"
                      (C:\Users\bhrou\gi):00133                 ENDC
