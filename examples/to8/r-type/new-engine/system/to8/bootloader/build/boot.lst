                      (C:\Users\bhrou\gi):00001         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00002         ; FD Boot loader
                      (C:\Users\bhrou\gi):00003         ; Original code from Prehisto
                      (C:\Users\bhrou\gi):00004         ; Benoit Rousseau 07/2023 (memory ext. check)
                      (C:\Users\bhrou\gi):00005         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00006         ; A fully featured boot loader
                      (C:\Users\bhrou\gi):00007         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00008         
                      (C:\Users\bhrou\gi):00009                 INCLUDE "engine/constants.asm"
                      (engine/constants.):00001         * ---------------------------------------------------------------------------
                      (engine/constants.):00002         * Constants
                      (engine/constants.):00003         *
                      (engine/constants.):00004         * Naming convention
                      (engine/constants.):00005         * -----------------
                      (engine/constants.):00006         * - lower case
                      (engine/constants.):00007         * - underscore-separated names
                      (engine/constants.):00008         *
                      (engine/constants.):00009         * ---------------------------------------------------------------------------
                      (engine/constants.):00010         
                      (engine/constants.):00011          ifndef constants.asm
     0001             (engine/constants.):00012         constants.asm equ 1
                      (engine/constants.):00013         
                      (engine/constants.):00014         * ===========================================================================
                      (engine/constants.):00015         * TO8 Registers
                      (engine/constants.):00016         * ===========================================================================
                      (engine/constants.):00017         
                      (engine/constants.):00018         ; Disk routine registers (ROM)
                      (engine/constants.):00019         
     6049             (engine/constants.):00020         dk_drive                      equ $6049
     604A             (engine/constants.):00021         dk_track                      equ $604A
     604B             (engine/constants.):00022         dk_track_lsb                  equ $604B
     604C             (engine/constants.):00023         dk_sector                     equ $604C
     604F             (engine/constants.):00024         dk_write_location             equ $604F
                      (engine/constants.):00025         
                      (engine/constants.):00026         * ===========================================================================
                      (engine/constants.):00027         * Globals
                      (engine/constants.):00028         * ===========================================================================
                      (engine/constants.):00029         
                      (engine/constants.):00030         ; WARNING - BuildSprite allow to cross $A000 limit by glb_camera_x_offset/4
                      (engine/constants.):00031         ; Graphics routines using S to write may cross by 12 bytes
                      (engine/constants.):00032         ; be sure to compile with enough margin here
     9FF4             (engine/constants.):00033         glb_ram_end                   equ $A000-12
                      (engine/constants.):00034         
                      (engine/constants.):00035         ; compilated sprite
     9FF2             (engine/constants.):00036         glb_register_s                equ glb_ram_end-2             ; reverved space to store S from ROM routines
                      (engine/constants.):00037         
                      (engine/constants.):00038         ; DrawSprites
     9FF0             (engine/constants.):00039         glb_screen_location_1         equ glb_register_s-2          ; start address for rendering of current sprite Part1     
     9FEE             (engine/constants.):00040         glb_screen_location_2         equ glb_screen_location_1-2   ; start address for rendering of current sprite Part2 (DEPENDENCY Must follow Part1)
                      (engine/constants.):00041         
     9FEC             (engine/constants.):00042         glb_camera_height             equ glb_screen_location_2-2
     9FEA             (engine/constants.):00043         glb_camera_width              equ glb_camera_height-2
     9FE8             (engine/constants.):00044         glb_camera_x_pos_coarse       equ glb_camera_width-2        ; ((glb_camera_x_pos - 64) / 64) * 64
     9FE6             (engine/constants.):00045         glb_camera_x_pos              equ glb_camera_x_pos_coarse-2 ; 16.8 camera x position in palyfield coordinates
     9FE5             (engine/constants.):00046         glb_camera_x_sub              equ glb_camera_x_pos-1        ; 
     9FE4             (engine/constants.):00047         glb_camera_y_pos              equ glb_camera_x_pos-2        ; 16.8 camera y position in palyfield coordinates
     9FE3             (engine/constants.):00048         glb_camera_y_sub              equ glb_camera_y_pos-1        ;
     9FE2             (engine/constants.):00049         glb_camera_x_min_pos          equ glb_camera_y_pos-2
     9FE0             (engine/constants.):00050         glb_camera_y_min_pos          equ glb_camera_x_min_pos-2
     9FDE             (engine/constants.):00051         glb_camera_x_max_pos          equ glb_camera_y_min_pos-2
     9FDC             (engine/constants.):00052         glb_camera_y_max_pos          equ glb_camera_x_max_pos-2
     9FDA             (engine/constants.):00053         glb_camera_x_offset           equ glb_camera_y_max_pos-2
     9FD8             (engine/constants.):00054         glb_camera_y_offset           equ glb_camera_x_offset-2
     9FD7             (engine/constants.):00055         glb_force_sprite_refresh      equ glb_camera_y_offset-1
     9FD6             (engine/constants.):00056         glb_camera_move               equ glb_force_sprite_refresh-1
     9FD5             (engine/constants.):00057         glb_alphaTiles                equ glb_camera_move-1
     9FD4             (engine/constants.):00058         glb_timer_second              equ glb_alphaTiles-1
     9FD3             (engine/constants.):00059         glb_timer_minute              equ glb_timer_second-1
     9FD3             (engine/constants.):00060         glb_timer                     equ glb_timer_minute
     9FD2             (engine/constants.):00061         glb_timer_frame               equ glb_timer-1
                      (engine/constants.):00062         
                      (engine/constants.):00063         ; BankSwitch
     9FD1             (engine/constants.):00064         glb_Page                      equ glb_timer_frame-1
     9FB3             (engine/constants.):00065         dp_engine                     equ glb_Page-30  ; engine routines tmp var space
     9F97             (engine/constants.):00066         dp_extreg                     equ dp_engine-28 ; extra register space (user and engine common)
     9F00             (engine/constants.):00067         dp                            equ $9F00        ; user space (149 bytes max)
     9F00             (engine/constants.):00068         glb_system_stack              equ dp
                      (engine/constants.):00069         
                      (engine/constants.):00070         ; generic direct page extra registers
                      (engine/constants.):00071         ; -----------------------------------
     9F97             (engine/constants.):00072         glb_d0   equ   dp_extreg
     9F98             (engine/constants.):00073         glb_d0_b equ   dp_extreg+1
                      (engine/constants.):00074         ; must be a free byte here for 24bits computation
     9F9A             (engine/constants.):00075         glb_d1   equ   dp_extreg+3
     9F9B             (engine/constants.):00076         glb_d1_b equ   dp_extreg+4
                      (engine/constants.):00077         ; must be a free byte here for 24bits computation
     9F9D             (engine/constants.):00078         glb_d2   equ   dp_extreg+6
     9F9E             (engine/constants.):00079         glb_d2_b equ   dp_extreg+7
                      (engine/constants.):00080         ; must be a free byte here for 24bits computation
     9FA0             (engine/constants.):00081         glb_d3   equ   dp_extreg+9
     9FA1             (engine/constants.):00082         glb_d3_b equ   dp_extreg+10
                      (engine/constants.):00083         ; must be a free byte here for 24bits computation
     9FA3             (engine/constants.):00084         glb_d4   equ   dp_extreg+12
     9FA4             (engine/constants.):00085         glb_d4_b equ   dp_extreg+13
     9FA5             (engine/constants.):00086         glb_d5   equ   dp_extreg+14
     9FA6             (engine/constants.):00087         glb_d5_b equ   dp_extreg+15
     9FA7             (engine/constants.):00088         glb_d6   equ   dp_extreg+16
     9FA8             (engine/constants.):00089         glb_d6_b equ   dp_extreg+17
     9FA9             (engine/constants.):00090         glb_a0   equ   dp_extreg+18
     9FAA             (engine/constants.):00091         glb_a0_b equ   dp_extreg+19
     9FAB             (engine/constants.):00092         glb_a1   equ   dp_extreg+20
     9FAC             (engine/constants.):00093         glb_a1_b equ   dp_extreg+21
     9FAD             (engine/constants.):00094         glb_a2   equ   dp_extreg+22
     9FAE             (engine/constants.):00095         glb_a2_b equ   dp_extreg+23
     9FAF             (engine/constants.):00096         glb_a3   equ   dp_extreg+24
     9FB0             (engine/constants.):00097         glb_a3_b equ   dp_extreg+25
     9FB1             (engine/constants.):00098         glb_a4   equ   dp_extreg+26
     9FB2             (engine/constants.):00099         glb_a4_b equ   dp_extreg+27
                      (engine/constants.):00100         
                      (engine/constants.):00101         * ===========================================================================
                      (engine/constants.):00102         * Display Constants
                      (engine/constants.):00103         * ===========================================================================
                      (engine/constants.):00104         
     00A0             (engine/constants.):00105         screen_width                  equ 160             ; in pixel
     00C8             (engine/constants.):00106         screen_height                 equ 200             ; in pixel
     001C             (engine/constants.):00107         screen_top                    equ (256-200)/2     ; in pixel
     00E3             (engine/constants.):00108         screen_bottom                 equ screen_top+199  ; in pixel
     0030             (engine/constants.):00109         screen_left                   equ (256-160)/2     ; in pixel
     00CF             (engine/constants.):00110         screen_right                  equ screen_left+159 ; in pixel
     0008             (engine/constants.):00111         nb_priority_levels            equ 8               ; number of priority levels (need code change if modified)
                      (engine/constants.):00112         
                      (engine/constants.):00113         * ===========================================================================
                      (engine/constants.):00114         * Images Constants
                      (engine/constants.):00115         * ===========================================================================
                      (engine/constants.):00116         
     0004             (engine/constants.):00117         image_x_size                  equ 4
     0005             (engine/constants.):00118         image_y_size                  equ 5
     0006             (engine/constants.):00119         image_center_offset           equ 6
                      (engine/constants.):00120         
     0004             (engine/constants.):00121         image_subset_x1_offset        equ 4
     0005             (engine/constants.):00122         image_subset_y1_offset        equ 5
                      (engine/constants.):00123         
     0000             (engine/constants.):00124         page_draw_routine             equ 0
     0001             (engine/constants.):00125         draw_routine                  equ 1
     0003             (engine/constants.):00126         page_erase_routine            equ 3
     0004             (engine/constants.):00127         erase_routine                 equ 4
     0006             (engine/constants.):00128         erase_nb_cell                 equ 6
                      (engine/constants.):00129         
                      (engine/constants.):00130         * ===========================================================================
                      (engine/constants.):00131         * Sound Constants
                      (engine/constants.):00132         * ===========================================================================
                      (engine/constants.):00133         
     0000             (engine/constants.):00134         sound_page        equ 0
     0001             (engine/constants.):00135         sound_start_addr  equ 1
     0003             (engine/constants.):00136         sound_end_addr    equ 3
     0005             (engine/constants.):00137         sound_meta_size   equ 5
                      (engine/constants.):00138         
                      (engine/constants.):00139         * ===========================================================================
                      (engine/constants.):00140         * Object Constants
                      (engine/constants.):00141         * ===========================================================================
                      (engine/constants.):00142         
                      (engine/constants.):00143         ; ext_variables_size should be declared in game source code
                      (engine/constants.):00144         
     0026             (engine/constants.):00145         object_base_size              equ 38  ; the size of an object without rsvd and ext_vars
                      (engine/constants.):00146          ifndef OverlayMode
     003B             (engine/constants.):00147         object_rsvd_size              equ 59
                      (engine/constants.):00148          else
0000                  (engine/constants.):00149         object_rsvd_size              equ 5
                      (engine/constants.):00150          endc
                      (engine/constants.):00151         
     ????             (engine/constants.):00152         object_rsvd                   equ object_base_size+ext_variables_size
     ????             (engine/constants.):00153         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     ????             (engine/constants.):00154         next_object                   equ object_size
     0026             (engine/constants.):00155         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (engine/constants.):00156         
     0000             (engine/constants.):00157         id                            equ 0   ; reference to object model id (ObjID_) (0: free slot)
     0001             (engine/constants.):00158         subtype                       equ 1   ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0001             (engine/constants.):00159         subtype_w                     equ 1   ; reference to object subtype (Sub_) takes 2 bytes and overlap render_flags DEPENDENCY subtype must follow id
     0002             (engine/constants.):00160         render_flags                  equ 2
     0003             (engine/constants.):00161         run_object_prev               equ 3   ; previous object to update when deleting current object
     0005             (engine/constants.):00162         run_object_next               equ 5   ; next object to run by RunObjects
                      (engine/constants.):00163         
                      (engine/constants.):00164          ifndef OverlayMode
                      (engine/constants.):00165         * --- render_flags bitfield variables --- background erase pack
     0001             (engine/constants.):00166         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (engine/constants.):00167         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
     0004             (engine/constants.):00168         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
     0008             (engine/constants.):00169         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (engine/constants.):00170         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (engine/constants.):00171         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
     0040             (engine/constants.):00172         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (engine/constants.):00173         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (engine/constants.):00174          else
                      (engine/constants.):00175         ; --- render_flags bitfield variables --- overlay pack
0000                  (engine/constants.):00176         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
0000                  (engine/constants.):00177         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
                      (engine/constants.):00178         
0000                  (engine/constants.):00179         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
0000                  (engine/constants.):00180         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
0000                  (engine/constants.):00181         render_no_range_ctrl_mask     equ $20 ; (bit 5) tell display engine to skip out of range controls (this may lead to memory corruption BEWARE)
0000                  (engine/constants.):00182         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
0000                  (engine/constants.):00183         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (engine/constants.):00184          endc
                      (engine/constants.):00185         
     0007             (engine/constants.):00186         priority                      equ 7           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0008             (engine/constants.):00187         anim                          equ 8  ; and 9  ; reference to current animation (Ani_)
     000A             (engine/constants.):00188         prev_anim                     equ 10 ; and 11 ; reference to previous animation (Ani_)
     000A             (engine/constants.):00189         sub_anim                      equ 10 ; and 11 ; reference to sub animation
     000C             (engine/constants.):00190         anim_frame                    equ 12          ; index of current frame in animation
     000D             (engine/constants.):00191         anim_frame_duration           equ 13          ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000E             (engine/constants.):00192         anim_flags                    equ 14          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (engine/constants.):00193         
                      (engine/constants.):00194         * --- anim_flags bitfield variables ---
     0004             (engine/constants.):00195         anim_link_mask                equ $04 ; (bit 2) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (engine/constants.):00196         
     000E             (engine/constants.):00197         status_flags                  equ 14          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (engine/constants.):00198         
                      (engine/constants.):00199         * --- status_flags bitfield variables ---
     0001             (engine/constants.):00200         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (engine/constants.):00201         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (engine/constants.):00202         
     0010             (engine/constants.):00203         image_set                     equ 16 ; and 17 ; reference to current image (Img_) (0000 if no image)
     0012             (engine/constants.):00204         x_pos                         equ 18 ; and 19 ; x playfield coordinate
     0014             (engine/constants.):00205         x_sub                         equ 20          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0015             (engine/constants.):00206         y_pos                         equ 21 ; and 22 ; y playfield coordinate
     0017             (engine/constants.):00207         y_sub                         equ 23          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0018             (engine/constants.):00208         xy_pixel                      equ 24          ; x and y screen coordinate
     0018             (engine/constants.):00209         x_pixel                       equ 24          ; x screen coordinate
     0019             (engine/constants.):00210         y_pixel                       equ 25          ; y screen coordinate, must follow x_pixel
     001A             (engine/constants.):00211         x_vel                         equ 26 ; and 27 ; s8.8 horizontal velocity
     001C             (engine/constants.):00212         y_vel                         equ 28 ; and 29 ; s8.8 vertical velocity
     001E             (engine/constants.):00213         x_acl                         equ 30 ; and 31 ; s8.8 horizontal gravity
     0020             (engine/constants.):00214         y_acl                         equ 32 ; and 33 ; s8.8 vertical gravity
     0022             (engine/constants.):00215         routine                       equ 34          ; index of current object routine
     0023             (engine/constants.):00216         routine_secondary             equ 35          ; index of current secondary routine
     0024             (engine/constants.):00217         routine_tertiary              equ 36          ; index of current tertiary routine
     0025             (engine/constants.):00218         routine_quaternary            equ 37          ; index of current quaternary routine
                      (engine/constants.):00219         
                      (engine/constants.):00220          ifndef OverlayMode
                      (engine/constants.):00221         * ---------------------------------------------------------------------------
                      (engine/constants.):00222         * reserved variables (read/write by engine)
                      (engine/constants.):00223         
     ????             (engine/constants.):00224         rsv_render_flags              equ object_rsvd
                      (engine/constants.):00225         
                      (engine/constants.):00226         * --- rsv_render_flags bitfield variables ---
     0001             (engine/constants.):00227         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
     0002             (engine/constants.):00228         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
     0004             (engine/constants.):00229         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
     0008             (engine/constants.):00230         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
     0080             (engine/constants.):00231         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (engine/constants.):00232         
     ????             (engine/constants.):00233         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
     ????             (engine/constants.):00234         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
     ????             (engine/constants.):00235         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
     ????             (engine/constants.):00236         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
     ????             (engine/constants.):00237         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
     ????             (engine/constants.):00238         rsv_page_draw_routine         equ object_rsvd+9 ; b
     ????             (engine/constants.):00239         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
     ????             (engine/constants.):00240         rsv_page_erase_routine        equ object_rsvd+12 ; b
     ????             (engine/constants.):00241         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
     ????             (engine/constants.):00242         rsv_xy1_pixel                 equ object_rsvd+15 ;
     ????             (engine/constants.):00243         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
     ????             (engine/constants.):00244         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
     ????             (engine/constants.):00245         rsv_xy2_pixel                 equ object_rsvd+17 ;
     ????             (engine/constants.):00246         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
     ????             (engine/constants.):00247         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (engine/constants.):00248         
                      (engine/constants.):00249         * ---------------------------------------------------------------------------
                      (engine/constants.):00250         * reserved variables (engine) - buffer specific
                      (engine/constants.):00251         
     ????             (engine/constants.):00252         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
     ????             (engine/constants.):00253         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
     ????             (engine/constants.):00254         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (engine/constants.):00255         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (engine/constants.):00256         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and +25 ; reference to previous image in video buffer 0 w
     ????             (engine/constants.):00257         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
     ????             (engine/constants.):00258         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
     ????             (engine/constants.):00259         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and +29 ; w
     ????             (engine/constants.):00260         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
     ????             (engine/constants.):00261         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
     ????             (engine/constants.):00262         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
     ????             (engine/constants.):00263         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00264         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
     ????             (engine/constants.):00265         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
     ????             (engine/constants.):00266         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
     ????             (engine/constants.):00267         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
     ????             (engine/constants.):00268         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
     ????             (engine/constants.):00269         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
     ????             (engine/constants.):00270         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (engine/constants.):00271         * --- rsv_prev_render_flags_0 bitfield variables ---
     0001             (engine/constants.):00272         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
     0080             (engine/constants.):00273         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (engine/constants.):00274         
     ????             (engine/constants.):00275         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
     ????             (engine/constants.):00276         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
     ????             (engine/constants.):00277         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (engine/constants.):00278         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (engine/constants.):00279         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
     ????             (engine/constants.):00280         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
     ????             (engine/constants.):00281         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
     ????             (engine/constants.):00282         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
     ????             (engine/constants.):00283         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
     ????             (engine/constants.):00284         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
     ????             (engine/constants.):00285         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
     ????             (engine/constants.):00286         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00287         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
     ????             (engine/constants.):00288         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
     ????             (engine/constants.):00289         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00290         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
     ????             (engine/constants.):00291         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
     ????             (engine/constants.):00292         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00293         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (engine/constants.):00294         
     0000             (engine/constants.):00295         buf_priority                  equ 0  ; offset for each rsv_buffer variables
     0001             (engine/constants.):00296         buf_priority_prev_obj         equ 1  ;
     0003             (engine/constants.):00297         buf_priority_next_obj         equ 3  ;
     0005             (engine/constants.):00298         buf_prev_mapping_frame        equ 5  ;
     0007             (engine/constants.):00299         buf_erase_nb_cell             equ 7  ;
     0008             (engine/constants.):00300         buf_page_erase_routine        equ 8 ;
     0009             (engine/constants.):00301         buf_erase_routine             equ 9 ;
     000B             (engine/constants.):00302         buf_bgdata                    equ 11 ;
     000D             (engine/constants.):00303         buf_prev_xy_pixel             equ 13 ;
     000D             (engine/constants.):00304         buf_prev_x_pixel              equ 13 ;
     000E             (engine/constants.):00305         buf_prev_y_pixel              equ 14 ;
     000F             (engine/constants.):00306         buf_prev_xy1_pixel            equ 15 ;
     000F             (engine/constants.):00307         buf_prev_x1_pixel             equ 15 ;
     0010             (engine/constants.):00308         buf_prev_y1_pixel             equ 16 ;
     0011             (engine/constants.):00309         buf_prev_xy2_pixel            equ 17 ;
     0011             (engine/constants.):00310         buf_prev_x2_pixel             equ 17 ;
     0012             (engine/constants.):00311         buf_prev_y2_pixel             equ 18 ;
     0013             (engine/constants.):00312         buf_prev_render_flags         equ 19 ;
                      (engine/constants.):00313          else
                      (engine/constants.):00314         * ---------------------------------------------------------------------------
                      (engine/constants.):00315         * reserved variables (engine) - buffer specific - overlay pack
                      (engine/constants.):00316         
0000                  (engine/constants.):00317         rsv_priority                  equ object_rsvd   ; internal value that hold priority in video buffer 0
0000                  (engine/constants.):00318         rsv_priority_prev_obj         equ object_rsvd+1 ; and +2 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (engine/constants.):00319         rsv_priority_next_obj         equ object_rsvd+3 ; and +4 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
                      (engine/constants.):00320         
                      (engine/constants.):00321         ; ---------------------------------------------------------------------------
                      (engine/constants.):00322         ; when childsprites are activated (i.e. bit #6 of render_flags set)
                      (engine/constants.):00323         ; object_base_size+ext_variables_size should cover at least 7+56 bytes 
                      (engine/constants.):00324         ; subtype is recovered
0000                  (engine/constants.):00325         mainspr_childsprites    equ   subtype         ; amount of child sprites
0000                  (engine/constants.):00326         mainspr_width           equ   run_object_next+2
0000                  (engine/constants.):00327         mainspr_height          equ   run_object_next+3
0000                  (engine/constants.):00328         mainspr_x_pos           equ   mainspr_height+1
0000                  (engine/constants.):00329         mainspr_y_pos           equ   mainspr_height+3
0000                  (engine/constants.):00330         mainspr_mapframe        equ   mainspr_height+5
0000                  (engine/constants.):00331         sub2_x_pos              equ   mainspr_x_pos+6
0000                  (engine/constants.):00332         sub2_y_pos              equ   mainspr_y_pos+6
0000                  (engine/constants.):00333         sub2_mapframe           equ   mainspr_mapframe+6
0000                  (engine/constants.):00334         sub3_x_pos              equ   sub2_x_pos+6
0000                  (engine/constants.):00335         sub3_y_pos              equ   sub2_y_pos+6
0000                  (engine/constants.):00336         sub3_mapframe           equ   sub2_mapframe+6
0000                  (engine/constants.):00337         sub4_x_pos              equ   sub3_x_pos+6
0000                  (engine/constants.):00338         sub4_y_pos              equ   sub3_y_pos+6
0000                  (engine/constants.):00339         sub4_mapframe           equ   sub3_mapframe+6
0000                  (engine/constants.):00340         sub5_x_pos              equ   sub4_x_pos+6
0000                  (engine/constants.):00341         sub5_y_pos              equ   sub4_y_pos+6
0000                  (engine/constants.):00342         sub5_mapframe           equ   sub4_mapframe+6
0000                  (engine/constants.):00343         sub6_x_pos              equ   sub5_x_pos+6
0000                  (engine/constants.):00344         sub6_y_pos              equ   sub5_y_pos+6
0000                  (engine/constants.):00345         sub6_mapframe           equ   sub5_mapframe+6
0000                  (engine/constants.):00346         sub7_x_pos              equ   sub6_x_pos+6
0000                  (engine/constants.):00347         sub7_y_pos              equ   sub6_y_pos+6
0000                  (engine/constants.):00348         sub7_mapframe           equ   sub6_mapframe+6
0000                  (engine/constants.):00349         sub8_x_pos              equ   sub7_x_pos+6
0000                  (engine/constants.):00350         sub8_y_pos              equ   sub7_y_pos+6
0000                  (engine/constants.):00351         sub8_mapframe           equ   sub7_mapframe+6
0000                  (engine/constants.):00352         sub9_x_pos              equ   sub8_x_pos+6
0000                  (engine/constants.):00353         sub9_y_pos              equ   sub8_y_pos+6
0000                  (engine/constants.):00354         sub9_mapframe           equ   sub8_mapframe+6
0000                  (engine/constants.):00355         next_subspr             equ   6 ; size of a subsprite data
                      (engine/constants.):00356          endc
                      (engine/constants.):00357          endc
                      (C:\Users\bhrou\gi):00010                 INCLUDE "engine/system/to8/map.const.asm"
                      (engine/system/to8):00001         ; Thomson TO8 - Memory map
                      (engine/system/to8):00002         
                      (engine/system/to8):00003         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00004         ; system addresses
                      (engine/system/to8):00005         
                      (engine/system/to8):00006         ; mc6846
     E7C0             (engine/system/to8):00007         map.MC6846.CSR      equ $E7C0 ; (bit2) set mute
     E7C1             (engine/system/to8):00008         map.MC6846.CRC      equ $E7C1
     E7C2             (engine/system/to8):00009         map.MC6846.DDRC     equ $E7C2
     E7C3             (engine/system/to8):00010         map.MC6846.PRC      equ $E7C3 ; (bit0) set half ram page 0 (low or high) in video area ($4000-$5FFF)
     E7C4             (engine/system/to8):00011         map.MC6846.CSR2     equ $E7C4
     E7C5             (engine/system/to8):00012         map.MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (engine/system/to8):00013         map.MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (engine/system/to8):00014         map.MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (engine/system/to8):00015         
                      (engine/system/to8):00016         ; mc6821 system
     E7C8             (engine/system/to8):00017         map.MC6821.PRA      equ $E7C8
     E7C9             (engine/system/to8):00018         map.MC6821.PRB      equ $E7C9
     E7CA             (engine/system/to8):00019         map.MC6821.CRA      equ $E7CA
     E7CB             (engine/system/to8):00020         map.MC6821.CRB      equ $E7CB
                      (engine/system/to8):00021         
                      (engine/system/to8):00022         ; mc6821 music and game
     E7CC             (engine/system/to8):00023         map.MC6821.PRA1     equ $E7CC
     E7CD             (engine/system/to8):00024         map.MC6821.PRA2     equ $E7CD
     E7CE             (engine/system/to8):00025         map.MC6821.CRA1     equ $E7CE
     E7CF             (engine/system/to8):00026         map.MC6821.CRA2     equ $E7CF
                      (engine/system/to8):00027         
                      (engine/system/to8):00028         ; thmfc01 gate controler floppy disk
     E7D0             (engine/system/to8):00029         map.THMFC01.STAT0   equ $E7D0
     E7D0             (engine/system/to8):00030         map.THMFC01.CMD0    equ $E7D0
     E7D1             (engine/system/to8):00031         map.THMFC01.STAT1   equ $E7D1
     E7D1             (engine/system/to8):00032         map.THMFC01.CMD1    equ $E7D1
     E7D2             (engine/system/to8):00033         map.THMFC01.CMD2    equ $E7D2
     E7D3             (engine/system/to8):00034         map.THMFC01.WDATA   equ $E7D3
     E7D3             (engine/system/to8):00035         map.THMFC01.RDATA   equ $E7D3
     E7D4             (engine/system/to8):00036         map.THMFC01.WCLK    equ $E7D4
     E7D5             (engine/system/to8):00037         map.THMFC01.WSECT   equ $E7D5
     E7D6             (engine/system/to8):00038         map.THMFC01.TRCK    equ $E7D6
     E7D7             (engine/system/to8):00039         map.THMFC01.CELL    equ $E7D7
                      (engine/system/to8):00040         
                      (engine/system/to8):00041         ; ef9369 palette
     E7DA             (engine/system/to8):00042         map.EF9369.D        equ $E7DA
     E7DB             (engine/system/to8):00043         map.EF9369.A        equ $E7DB
                      (engine/system/to8):00044         
                      (engine/system/to8):00045         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (engine/system/to8):00046         map.CF74021.LGAMOD  equ $E7DC
     E7DD             (engine/system/to8):00047         map.CF74021.SYS2    equ $E7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     E7E4             (engine/system/to8):00048         map.CF74021.COM     equ $E7E4
     E7E5             (engine/system/to8):00049         map.CF74021.DATA    equ $E7E5 ; (bit0-4) set ram page in data area ($A000-$DFFF)
     E7E6             (engine/system/to8):00050         map.CF74021.CART    equ $E7E6 ; (bit0-4) set page in cartridge area ($0000-$3FFF), (bit5) set ram over cartridge, (bit6) enable write
     E7E7             (engine/system/to8):00051         map.CF74021.SYS1    equ $E7E7 ; (bit4) set ram over data area
                      (engine/system/to8):00052         
                      (engine/system/to8):00053         ; extension port
     00E7             (engine/system/to8):00054         map.EXTPORT         equ $E7
     E7F0             (engine/system/to8):00055         map.IEEE488         equ $E7F0 ; to E7F7
     E7F2             (engine/system/to8):00056         map.EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (engine/system/to8):00057         map.EF5860.TX       equ $E7F3 ; MIDI
                      (engine/system/to8):00058          ifndef SOUND_CARD_PROTOTYPE
     E7FC             (engine/system/to8):00059         map.YM2413.A        equ $E7FC
     E7FD             (engine/system/to8):00060         map.YM2413.D        equ $E7FD
                      (engine/system/to8):00061          ifndef SN76489_JUMPER_LOW
     E7F7             (engine/system/to8):00062         map.SN76489.D       equ $E7F7
                      (engine/system/to8):00063          else
0000                  (engine/system/to8):00064         map.SN76489.D       equ $E7F6
                      (engine/system/to8):00065          endc
                      (engine/system/to8):00066          else
0000                  (engine/system/to8):00067         map.YM2413.A        equ $E7FC
0000                  (engine/system/to8):00068         map.YM2413.D        equ $E7FD
                      (engine/system/to8):00069          ifndef SN76489_JUMPER_LOW
0000                  (engine/system/to8):00070         map.SN76489.D       equ $E7FF
                      (engine/system/to8):00071          else
0000                  (engine/system/to8):00072         map.SN76489.D       equ $E7FE
                      (engine/system/to8):00073          endc
                      (engine/system/to8):00074          endc
     E7FE             (engine/system/to8):00075         map.MEA8000.D       equ $E7FE
     E7FF             (engine/system/to8):00076         map.MEA8000.A       equ $E7FF
                      (engine/system/to8):00077         
                      (engine/system/to8):00078         ; ROM routines
     E004             (engine/system/to8):00079         map.DKCONT          equ $E004 ; TO:DKCO, MO:SWI $26
     E007             (engine/system/to8):00080         map.DKBOOT          equ $E007 ; boot
     E00A             (engine/system/to8):00081         map.DKFMT           equ $E00A ; format
     E00D             (engine/system/to8):00082         map.LECFA           equ $E00D ; read FAT
     E010             (engine/system/to8):00083         map.RECFI           equ $E010 ; search file
     E010             (engine/system/to8):00084         map.RECUP           equ $E010 ; clear file
     E010             (engine/system/to8):00085         map.ECRSE           equ $E010 ; sector write
     E019             (engine/system/to8):00086         map.ALLOD           equ $E019 ; catalog file allocation
     E01C             (engine/system/to8):00087         map.ALLOB           equ $E01C ; bloc allocation
     E01F             (engine/system/to8):00088         map.MAJCL           equ $E01F ; cluster update
     E022             (engine/system/to8):00089         map.FINTR           equ $E022 ; transfert end
     E025             (engine/system/to8):00090         map.QDDSTD          equ $E025 ; QDD std functions
     E028             (engine/system/to8):00091         map.QDDSYS          equ $E028 ; QDD sys functions
                      (engine/system/to8):00092         
     E803             (engine/system/to8):00093         map.PUTC            equ $E803
     E806             (engine/system/to8):00094         map.GETC            equ $E806
     E809             (engine/system/to8):00095         map.KTST            equ $E809
     E82A             (engine/system/to8):00096         map.DKCO            equ $E82A ; read or write floppy disk routine
     E830             (engine/system/to8):00097         map.IRQ.EXIT        equ $E830 ; to exit an irq
                      (engine/system/to8):00098         
                      (engine/system/to8):00099         ; system monitor registers
     0060             (engine/system/to8):00100         map.REG.DP          equ $60   ; direct page for system monitor registers
     6019             (engine/system/to8):00101         map.STATUS          equ $6019 ; status bitfield
     6048             (engine/system/to8):00102         map.DK.OPC          equ $6048 ; operation
     6049             (engine/system/to8):00103         map.DK.DRV          equ $6049 ; drive
     604C             (engine/system/to8):00104         map.DK.SEC          equ $604C ; sector
     604A             (engine/system/to8):00105         map.DK.TRK          equ $604A ; $604B ; track
     604E             (engine/system/to8):00106         map.DK.STA          equ $604E ; return status
     604F             (engine/system/to8):00107         map.DK.BUF          equ $604F ; $6050 ; data write location
     6023             (engine/system/to8):00108         map.FIRQPT          equ $6023 ; routine firq
     6027             (engine/system/to8):00109         map.TIMERPT         equ $6027 ; routine irq timer
     6081             (engine/system/to8):00110         map.CF74021.SYS1.R  equ $6081 ; reading value for map.CF74021.SYS1
                      (engine/system/to8):00111         
                      (engine/system/to8):00112         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00113         ; constants
                      (engine/system/to8):00114         
     0035             (engine/system/to8):00115         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (engine/system/to8):00116         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (engine/system/to8):00117         map.IRQ.ONE_FRAME     equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (engine/system/to8):00118         
                      (engine/system/to8):00119         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00120         ; mapping to generic names
                      (engine/system/to8):00121         
     E7CD             (engine/system/to8):00122         map.DAC            equ map.MC6821.PRA2
     E7C6             (engine/system/to8):00123         map.RND            equ map.MC6846.TMSB
                      (C:\Users\bhrou\gi):00011                 INCLUDE "new-engine/system/to8/bootloader/loader.const.asm"
                      (new-engine/system):00001          IFNDEF loader.PAGE
0000                  (new-engine/system):00002         loader.PAGE equ 4
                      (new-engine/system):00003          ENDC
                      (new-engine/system):00004         
                      (new-engine/system):00005          IFNDEF loader.ADDRESS
0000                  (new-engine/system):00006         loader.ADDRESS equ $A000
                      (new-engine/system):00007          ENDC
                      (new-engine/system):00008         
                      (new-engine/system):00009          IFNDEF loader.DEFAULT_DYNAMIC_MEMORY_SIZE
0000                  (new-engine/system):00010         loader.DEFAULT_DYNAMIC_MEMORY_SIZE equ loader.ADDRESS-loader.memoryPool+$4000
                      (new-engine/system):00011          ENDC
                      (new-engine/system):00012         
                      (new-engine/system):00013          IFNDEF loader.DEFAULT_SCENE_DIR_ID
     0000             (new-engine/system):00014         loader.DEFAULT_SCENE_DIR_ID equ 0
                      (new-engine/system):00015          ENDC
                      (new-engine/system):00016         
                      (new-engine/system):00017          IFNDEF loader.DEFAULT_SCENE_FILE_ID
     0000             (new-engine/system):00018         loader.DEFAULT_SCENE_FILE_ID equ 0
                      (new-engine/system):00019          ENDC
                      (new-engine/system):00020         
                      (new-engine/system):00021          IFNDEF loader.DEFAULT_SCENE_EXEC_PAGE
     0005             (new-engine/system):00022         loader.DEFAULT_SCENE_EXEC_PAGE equ 5
                      (new-engine/system):00023          ENDC
                      (new-engine/system):00024         
                      (new-engine/system):00025          IFNDEF loader.DEFAULT_SCENE_EXEC_ADDR
     6100             (new-engine/system):00026         loader.DEFAULT_SCENE_EXEC_ADDR equ $6100
                      (new-engine/system):00027          ENDC
                      (C:\Users\bhrou\gi):00012         
                      (C:\Users\bhrou\gi):00013         ; Disk boot
                      (C:\Users\bhrou\gi):00014                 org    $6200
     60               (C:\Users\bhrou\gi):00015                 setdp  map.REG.DP
                      (C:\Users\bhrou\gi):00016         
                      (C:\Users\bhrou\gi):00017         ; Freeze interrupts
6200 1A50             (C:\Users\bhrou\gi):00018                 orcc  #$50
                      (C:\Users\bhrou\gi):00019         
                      (C:\Users\bhrou\gi):00020         ; Check computer type
6202 308C7C           (C:\Users\bhrou\gi):00021                 leax  <mess1,pcr          ; Error message
6205 8602             (C:\Users\bhrou\gi):00022                 lda   #$02                ; Load code
6207 B1FFF0           (C:\Users\bhrou\gi):00023                 cmpa  >$fff0              ; Check machine code
620A 244F             (C:\Users\bhrou\gi):00024                 bhs   err                 ; Error if not TO+
                      (C:\Users\bhrou\gi):00025         
                      (C:\Users\bhrou\gi):00026         ; Check computer memory
                      (C:\Users\bhrou\gi):00027                 IFDEF boot.CHECK_MEMORY_EXT
620C 8E6293           (C:\Users\bhrou\gi):00028                 ldx   #mess2              ; Error message
620F 8610             (C:\Users\bhrou\gi):00029                 lda   #$10
6211 B7E7E5           (C:\Users\bhrou\gi):00030                 sta   map.CF74021.DATA
6214 CEA000           (C:\Users\bhrou\gi):00031                 ldu   #$A000
6217 8655             (C:\Users\bhrou\gi):00032                 lda   #$55
6219 A7C4             (C:\Users\bhrou\gi):00033                 sta   ,u
621B A1C4             (C:\Users\bhrou\gi):00034                 cmpa  ,u
621D 263C             (C:\Users\bhrou\gi):00035                 bne   err                 ; Error if no memory ext.
                      (C:\Users\bhrou\gi):00036                 ENDC
                      (C:\Users\bhrou\gi):00037         
                      (C:\Users\bhrou\gi):00038         ; Load loader sectors
                      (C:\Users\bhrou\gi):00039          IFGE loader.ADDRESS-$A000        ; Skip if not data space
621F 8610             (C:\Users\bhrou\gi):00040                 lda   #$10
6221 9A81             (C:\Users\bhrou\gi):00041                 ora   <map.CF74021.SYS1.R ; Set RAM
6223 9781             (C:\Users\bhrou\gi):00042                 sta   <map.CF74021.SYS1.R ; over data
6225 B7E7E7           (C:\Users\bhrou\gi):00043                 sta   >map.CF74021.SYS1   ; space
6228 C604             (C:\Users\bhrou\gi):00044                 ldb   #loader.PAGE        ; Load RAM page
622A F7E7E5           (C:\Users\bhrou\gi):00045                 stb   >map.CF74021.DATA   ; Switch RAM page
                      (C:\Users\bhrou\gi):00046          ELSE
                      (C:\Users\bhrou\gi):00047           IFGE loader.ADDRESS-$6000       ; Skip if not resident space
                      (C:\Users\bhrou\gi):00048           ELSE
                      (C:\Users\bhrou\gi):00049            IFGE loader.ADDRESS-$4000      ; Skip if not video space
                      (C:\Users\bhrou\gi):00050                 ldb   #loader.PAGE        ; Load RAM page
                      (C:\Users\bhrou\gi):00051                 andb  #$01                ; Keep only half page A or B
                      (C:\Users\bhrou\gi):00052                 orb   map.MC6846.PRC      ; Merge register value
                      (C:\Users\bhrou\gi):00053                 stb   map.MC6846.PRC      ; Set desired half page in video space
                      (C:\Users\bhrou\gi):00054            ELSE
                      (C:\Users\bhrou\gi):00055                 ldb   #loader.PAGE        ; Load RAM page
                      (C:\Users\bhrou\gi):00056                 orb   #$60                ; Set RAM over cartridge space
                      (C:\Users\bhrou\gi):00057                 stb   >map.CF74021.CART   ; Switch RAM page
                      (C:\Users\bhrou\gi):00058            ENDC
                      (C:\Users\bhrou\gi):00059           ENDC
                      (C:\Users\bhrou\gi):00060          ENDC
622D CCA000           (C:\Users\bhrou\gi):00061                 ldd   #loader.ADDRESS    ; Loading
6230 DD4F             (C:\Users\bhrou\gi):00062                 std   <map.DK.BUF        ; address
                      (C:\Users\bhrou\gi):00063                 IFGT loader.ADDRESS-((loader.ADDRESS/256)*256)
                      (C:\Users\bhrou\gi):00064                 ERROR "loader.ADDRESS is expected to be a multiple of 256 bytes. Ex: $A000, $6100, ..."
                      (C:\Users\bhrou\gi):00065                 ENDC                     ; b register is always 0
6232 D7FF             (C:\Users\bhrou\gi):00066                 stb   <$60ff             ; Cold reset
6234 8602             (C:\Users\bhrou\gi):00067                 lda   #$02               ; >read code
6236 DD48             (C:\Users\bhrou\gi):00068                 std   <map.DK.OPC        ; Read/Head 0
6238 CE62C2           (C:\Users\bhrou\gi):00069                 ldu   #blist             ; Interleave list
623B 8E62A6           (C:\Users\bhrou\gi):00070                 ldx   #mess3             ; Error message
623E A6C5             (C:\Users\bhrou\gi):00071         boot2   lda   b,u                ; Get sector
6240 974C             (C:\Users\bhrou\gi):00072                 sta   <map.DK.SEC        ; number
6242 BDE004           (C:\Users\bhrou\gi):00073                 jsr   >map.DKCONT        ; Load sector
6245 2405             (C:\Users\bhrou\gi):00074                 bcc   boot3              ; Skip if no error
6247 BDE004           (C:\Users\bhrou\gi):00075                 jsr   >map.DKCONT        ; Reload sector
624A 250F             (C:\Users\bhrou\gi):00076                 bcs   err                ; Skip if error
624C 0C4F             (C:\Users\bhrou\gi):00077         boot3   inc   <map.DK.BUF        ; Move sector ptr
624E 5C               (C:\Users\bhrou\gi):00078                 incb                     ; Sector+1
624F 7A6280           (C:\Users\bhrou\gi):00079                 dec   >secnbr            ; Next
6252 26EA             (C:\Users\bhrou\gi):00080                 bne   boot2              ; sector
6254 10CE9F00         (C:\Users\bhrou\gi):00081                 lds   #$9F00             ; Set system stack
6258 7EA000           (C:\Users\bhrou\gi):00082                 jmp   >loader.ADDRESS
                      (C:\Users\bhrou\gi):00083         
                      (C:\Users\bhrou\gi):00084         ; Display error message
625B 338C56           (C:\Users\bhrou\gi):00085         err     leau  <mess0,pcr         ; Location
625E 8D08             (C:\Users\bhrou\gi):00086                 bsr   err2               ; Display location
6260 3384             (C:\Users\bhrou\gi):00087                 leau  ,x                 ; Message pointer
6262 8D04             (C:\Users\bhrou\gi):00088                 bsr   err2               ; Display message
6264 20FE             (C:\Users\bhrou\gi):00089         err0    bra   err0               ; Infinite loop
                      (C:\Users\bhrou\gi):00090         
                      (C:\Users\bhrou\gi):00091         ; Display message
6266 8D06             (C:\Users\bhrou\gi):00092         err1    bsr   err3               ; Display char
6268 E6C0             (C:\Users\bhrou\gi):00093         err2    ldb   ,u+                ; Read char
626A 2AFA             (C:\Users\bhrou\gi):00094                 bpl   err1               ; Next if not last
626C C47F             (C:\Users\bhrou\gi):00095                 andb  #$7f               ; Mask char
626E 1FB8             (C:\Users\bhrou\gi):00096         err3    tfr   dp,a               ; Read DP
6270 48               (C:\Users\bhrou\gi):00097                 asla                     ; Check if MO or TO
6271 102B858E         (C:\Users\bhrou\gi):00098                 lbmi  map.PUTC           ; Display for TO - PUTC
6275 3F               (C:\Users\bhrou\gi):00099                 swi                      ; Display for MO
6276 82               (C:\Users\bhrou\gi):00100                 fcb   $82                ; Display for MO - PUTC parameter
                      (C:\Users\bhrou\gi):00101         
                      (C:\Users\bhrou\gi):00102                 IFGT *-$6278
                      (C:\Users\bhrou\gi):00103                 ERROR "boot code part 1 is too large !"
                      (C:\Users\bhrou\gi):00104                 ENDC
                      (C:\Users\bhrou\gi):00105         
6277 00               (C:\Users\bhrou\gi):00106                 align $6278
6278                  (C:\Users\bhrou\gi):00107         @magicNumber
6278 42415349433200   (C:\Users\bhrou\gi):00108                 fcn   "BASIC2"
627F 00               (C:\Users\bhrou\gi):00109                 fcb   $00                               ; checksum (set at build stage)
6280 0F               (C:\Users\bhrou\gi):00110         secnbr  fcb   (builder.lwasm.size.loader/256)+1 ; number of sectors to read
                      (C:\Users\bhrou\gi):00111         
                      (C:\Users\bhrou\gi):00112         ; Error messages
6281 4F6E6C7920666F72 (C:\Users\bhrou\gi):00113         mess1   fcs   "Only for TO8/8D/9+"
     20544F382F38442F
     39AB
6293 5265717569726573 (C:\Users\bhrou\gi):00114         mess2   fcs   "Requires 256Ko ext."
     203235364B6F2065
     7874AE
62A6 2020202020492F4F (C:\Users\bhrou\gi):00115         mess3   fcs   "     I/O|Error"
     7C4572726FF2
                      (C:\Users\bhrou\gi):00116         
                      (C:\Users\bhrou\gi):00117         ; Location message
62B4 1F2121           (C:\Users\bhrou\gi):00118         mess0   fcb   $1f,$21,$21
62B7 1F1113           (C:\Users\bhrou\gi):00119                 fcb   $1f,$11,$13        ; 3 lines (11-13)
62BA 1B47             (C:\Users\bhrou\gi):00120                 fcb   $1b,$47            ; font : white
62BC 1B51             (C:\Users\bhrou\gi):00121                 fcb   $1b,$51            ; background : red
62BE 0C               (C:\Users\bhrou\gi):00122                 fcb   $0c                ; cls
62BF 1F4CCB           (C:\Users\bhrou\gi):00123                 fcb   $1f,$4c,$4b+$80    ; locate for MO
                      (C:\Users\bhrou\gi):00124         
                      (C:\Users\bhrou\gi):00125         ; Interleave table
62C2 0F0D0B           (C:\Users\bhrou\gi):00126         blist   fcb   $0f,$0d,$0b        ; first value is omitted ($01 : boot sector)
62C5 09070503         (C:\Users\bhrou\gi):00127                 fcb   $09,$07,$05,$03
62C9 08060402         (C:\Users\bhrou\gi):00128                 fcb   $08,$06,$04,$02
62CD 100E0C0A         (C:\Users\bhrou\gi):00129                 fcb   $10,$0e,$0c,$0a
                      (C:\Users\bhrou\gi):00130         
                      (C:\Users\bhrou\gi):00131                 IFGT *-$6300
                      (C:\Users\bhrou\gi):00132                 ERROR "boot code part 2 is too large !"
                      (C:\Users\bhrou\gi):00133                 ENDC
