                      (C:\Users\bhrou\gi):00001         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00002         ; YM2413 VGM playback system for 6809
                      (C:\Users\bhrou\gi):00003         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00004         ; Play a compressed (ZX0) stream of ym2413 vgm data
                      (C:\Users\bhrou\gi):00005         ;
                      (C:\Users\bhrou\gi):00006         ; by Bentoc December 2022
                      (C:\Users\bhrou\gi):00007         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00008         
                      (C:\Users\bhrou\gi):00009         irq.on       EXTERNAL
                      (C:\Users\bhrou\gi):00010         irq.off      EXTERNAL
                      (C:\Users\bhrou\gi):00011         map.YM2413.A EXTERNAL
                      (C:\Users\bhrou\gi):00012         map.YM2413.D EXTERNAL
                      (C:\Users\bhrou\gi):00013         
                      (C:\Users\bhrou\gi):00014         ymm.play       EXPORT
                      (C:\Users\bhrou\gi):00015         ymm.obj.play   EXPORT
                      (C:\Users\bhrou\gi):00016         ymm.frame.play EXPORT
                      (C:\Users\bhrou\gi):00017         
                      (C:\Users\bhrou\gi):00018                 INCLUDE "engine/sound/ym2413.macro.asm"
                      (engine/sound/ym24):00001         
0000                  (engine/sound/ym24):00002         _ym2413.init MACRO
                      (engine/sound/ym24):00003                 jsr   ym2413.init
                      (engine/sound/ym24):00004          ENDM
                      (C:\Users\bhrou\gi):00019                 INCLUDE "engine/sound/ym2413.asm"
                      (engine/sound/ym24):00001         
                      (engine/sound/ym24):00002         ; Init YM2413 sound chip to a default (silent) state
                      (engine/sound/ym24):00003         ; ----------------------------------------------------
                      (engine/sound/ym24):00004         
                      (engine/sound/ym24):00005         ym2413.init EXPORT
                      (engine/sound/ym24):00006         
                      (engine/sound/ym24):00007         map.YM2413.A EXTERNAL
                      (engine/sound/ym24):00008         map.YM2413.D EXTERNAL
                      (engine/sound/ym24):00009         
                      (engine/sound/ym24):00010          SECTION code
                      (engine/sound/ym24):00011         
0000                  (engine/sound/ym24):00012         ym2413.init
0000 CC200E           (engine/sound/ym24):00013                 ldd   #$200E
0003 F70000           (engine/sound/ym24):00014                 stb   map.YM2413.A
0006 12               (engine/sound/ym24):00015                 nop                            ; (wait of 2 cycles)
0007 C600             (engine/sound/ym24):00016                 ldb   #0                       ; (wait of 2 cycles)
0009 B70000           (engine/sound/ym24):00017                 sta   map.YM2413.D             ; note off for all drums     
000C 8620             (engine/sound/ym24):00018                 lda   #$20                     ; (wait of 2 cycles)
000E 21FE             (engine/sound/ym24):00019                 brn   *                        ; (wait of 3 cycles)
0010 1E89             (engine/sound/ym24):00020         @c      exg   a,b                      ; (wait of 8 cycles)                                      
0012 1E89             (engine/sound/ym24):00021                 exg   a,b                      ; (wait of 8 cycles)                                      
0014 B70000           (engine/sound/ym24):00022                 sta   map.YM2413.A
0017 12               (engine/sound/ym24):00023                 nop
0018 4C               (engine/sound/ym24):00024                 inca
0019 F70000           (engine/sound/ym24):00025                 stb   map.YM2413.D
001C 8129             (engine/sound/ym24):00026                 cmpa  #$29                     ; (wait of 2 cycles)
001E 26F0             (engine/sound/ym24):00027                 bne   @c                       ; (wait of 3 cycles)
0020 39               (engine/sound/ym24):00028                 rts
                      (engine/sound/ym24):00029         
                      (engine/sound/ym24):00030          ENDSECTION
                      (C:\Users\bhrou\gi):00020                 INCLUDE "engine/sound/ymm.const.asm"
     0000             (engine/sound/ymm.):00001         ymm.NO_CALLBACK      equ   0
     0000             (engine/sound/ymm.):00002         ymm.NO_LOOP          equ   0
     0001             (engine/sound/ymm.):00003         ymm.LOOP             equ   1
                      (C:\Users\bhrou\gi):00021         
                      (C:\Users\bhrou\gi):00022          SECTION code
                      (C:\Users\bhrou\gi):00023         
                      (C:\Users\bhrou\gi):00024                 INCLUDE "engine/6809/macros.asm"
                      (engine/6809/macro):00001         ;*******************************************************************************
                      (engine/6809/macro):00002         ; macros
                      (engine/6809/macro):00003         ; ------------------------------------------------------------------------------
                      (engine/6809/macro):00004         ;
                      (engine/6809/macro):00005         ; 6809 macros
                      (engine/6809/macro):00006         ;
                      (engine/6809/macro):00007         ; TODO : move engine macros in dedicated files xxx.macro.asm
                      (engine/6809/macro):00008         ; old naming convention, should be migrated
                      (engine/6809/macro):00009         ;*******************************************************************************
                      (engine/6809/macro):00010         
0021                  (engine/6809/macro):00011         _ldd MACRO
                      (engine/6809/macro):00012                 ldd   #((\1)*256)+\2
                      (engine/6809/macro):00013          ENDM
                      (engine/6809/macro):00014          
0021                  (engine/6809/macro):00015         _ldx MACRO
                      (engine/6809/macro):00016                 ldx   #((\1)*256)+\2
                      (engine/6809/macro):00017          ENDM
                      (engine/6809/macro):00018          
0021                  (engine/6809/macro):00019         _ldy MACRO
                      (engine/6809/macro):00020                 ldy   #((\1)*256)+\2
                      (engine/6809/macro):00021          ENDM
                      (engine/6809/macro):00022          
0021                  (engine/6809/macro):00023         _ldu MACRO
                      (engine/6809/macro):00024                 ldu   #((\1)*256)+\2
                      (engine/6809/macro):00025          ENDM  
                      (engine/6809/macro):00026          
0021                  (engine/6809/macro):00027         _lds MACRO
                      (engine/6809/macro):00028                 lds   #((\1)*256)+\2
                      (engine/6809/macro):00029          ENDM   
                      (engine/6809/macro):00030          
0021                  (engine/6809/macro):00031         _SetCartPageA MACRO
                      (engine/6809/macro):00032          IFDEF T2
                      (engine/6809/macro):00033                 jsr   SetCartPageA
                      (engine/6809/macro):00034          ELSE
                      (engine/6809/macro):00035                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (engine/6809/macro):00036          ENDC
                      (engine/6809/macro):00037          ENDM      
                      (engine/6809/macro):00038          
0021                  (engine/6809/macro):00039         _GetCartPageA MACRO
                      (engine/6809/macro):00040          IFDEF T2
                      (engine/6809/macro):00041                 jsr   GetCartPageA
                      (engine/6809/macro):00042          ELSE
                      (engine/6809/macro):00043                 lda   $E7E6
                      (engine/6809/macro):00044          ENDC
                      (engine/6809/macro):00045          ENDM
                      (engine/6809/macro):00046         
0021                  (engine/6809/macro):00047         _SetCartPageB MACRO
                      (engine/6809/macro):00048          IFDEF T2
                      (engine/6809/macro):00049                 jsr   SetCartPageB
                      (engine/6809/macro):00050          ELSE
                      (engine/6809/macro):00051                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (engine/6809/macro):00052          ENDC
                      (engine/6809/macro):00053          ENDM      
                      (engine/6809/macro):00054          
0021                  (engine/6809/macro):00055         _GetCartPageB MACRO
                      (engine/6809/macro):00056          IFDEF T2
                      (engine/6809/macro):00057                 jsr   GetCartPageB
                      (engine/6809/macro):00058          ELSE
                      (engine/6809/macro):00059                 ldb   $E7E6
                      (engine/6809/macro):00060          ENDC
                      (engine/6809/macro):00061          ENDM     
                      (engine/6809/macro):00062         
0021                  (engine/6809/macro):00063         _RunObjectSwap MACRO
                      (engine/6809/macro):00064                 ; param 1 : ObjID_
                      (engine/6809/macro):00065                 ; param 2 : Object data RAM address
                      (engine/6809/macro):00066                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (engine/6809/macro):00067                 lda   Obj_Index_Page+\1
                      (engine/6809/macro):00068                 sta   PSR_Page   
                      (engine/6809/macro):00069                 ldd   Obj_Index_Address+2*\1
                      (engine/6809/macro):00070                 std   PSR_Address       
                      (engine/6809/macro):00071                 ldu   \2             
                      (engine/6809/macro):00072                 jsr   RunPgSubRoutine
                      (engine/6809/macro):00073          ENDM    
                      (engine/6809/macro):00074         
0021                  (engine/6809/macro):00075         _RunObjectSwapRoutine MACRO
                      (engine/6809/macro):00076                 ; param 1 : ObjID_
                      (engine/6809/macro):00077                 ; param 2 : Object routine
                      (engine/6809/macro):00078                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (engine/6809/macro):00079                 lda   Obj_Index_Page+\1   
                      (engine/6809/macro):00080                 sta   PSR_Page   
                      (engine/6809/macro):00081                 ldd   Obj_Index_Address+2*\1
                      (engine/6809/macro):00082                 std   PSR_Address       
                      (engine/6809/macro):00083                 ldb   \2        
                      (engine/6809/macro):00084                 jsr   RunPgSubRoutine
                      (engine/6809/macro):00085          ENDM 
                      (engine/6809/macro):00086          
0021                  (engine/6809/macro):00087         _MountObject MACRO 
                      (engine/6809/macro):00088                 ; param 1 : ObjID_
                      (engine/6809/macro):00089                 ; manual mount of an object from the resident page 1
                      (engine/6809/macro):00090                 lda   Obj_Index_Page+\1
                      (engine/6809/macro):00091                 _SetCartPageA
                      (engine/6809/macro):00092                 ldx   Obj_Index_Address+2*\1
                      (engine/6809/macro):00093          ENDM
                      (engine/6809/macro):00094         
0021                  (engine/6809/macro):00095         _RunObject MACRO 
                      (engine/6809/macro):00096                 ; param 1 : ObjID_
                      (engine/6809/macro):00097                 ; param 2 : Object data RAM address
                      (engine/6809/macro):00098                 ; manual launch of an object from the resident page 1
                      (engine/6809/macro):00099                 _MountObject \1
                      (engine/6809/macro):00100                 ldu   \2        
                      (engine/6809/macro):00101                 jsr   ,x
                      (engine/6809/macro):00102          ENDM
                      (engine/6809/macro):00103         
0021                  (engine/6809/macro):00104         _RunObjectRoutineA MACRO 
                      (engine/6809/macro):00105                 ; param 1 : ObjID_
                      (engine/6809/macro):00106                 ; param 2 : Object routine
                      (engine/6809/macro):00107                 ; manual launch of an object from the resident page 1
                      (engine/6809/macro):00108                 ; this object does not need or have a data structure for this routine
                      (engine/6809/macro):00109                 _MountObject \1
                      (engine/6809/macro):00110                 lda   \2        
                      (engine/6809/macro):00111                 jsr   ,x
                      (engine/6809/macro):00112          ENDM
                      (engine/6809/macro):00113         
0021                  (engine/6809/macro):00114         _RunObjectRoutineB MACRO 
                      (engine/6809/macro):00115                 ; param 1 : ObjID_
                      (engine/6809/macro):00116                 ; param 2 : Object routine
                      (engine/6809/macro):00117                 ; manual launch of an object from the resident page 1
                      (engine/6809/macro):00118                 ; this object does not need or have a data structure for this routine
                      (engine/6809/macro):00119                 _MountObject \1
                      (engine/6809/macro):00120                 ldb   \2        
                      (engine/6809/macro):00121                 jsr   ,x
                      (engine/6809/macro):00122          ENDM
                      (engine/6809/macro):00123         
0021                  (engine/6809/macro):00124         _SwitchScreenBuffer MACRO
                      (engine/6809/macro):00125                 ldb   $E7E5
                      (engine/6809/macro):00126                 eorb  #1                       ; switch btw page 2 and 3
                      (engine/6809/macro):00127                 orb   #$02
                      (engine/6809/macro):00128                 stb   $E7E5
                      (engine/6809/macro):00129          ENDM
                      (engine/6809/macro):00130         
0021                  (engine/6809/macro):00131         _asld MACRO
                      (engine/6809/macro):00132                 aslb
                      (engine/6809/macro):00133                 rola
                      (engine/6809/macro):00134          ENDM        
                      (engine/6809/macro):00135          
0021                  (engine/6809/macro):00136         _asrd MACRO
                      (engine/6809/macro):00137                 asra
                      (engine/6809/macro):00138                 rorb
                      (engine/6809/macro):00139          ENDM      
                      (engine/6809/macro):00140          
0021                  (engine/6809/macro):00141         _lsld MACRO
                      (engine/6809/macro):00142                 lslb
                      (engine/6809/macro):00143                 rola
                      (engine/6809/macro):00144          ENDM        
                      (engine/6809/macro):00145          
0021                  (engine/6809/macro):00146         _lsrd MACRO
                      (engine/6809/macro):00147                 lsra
                      (engine/6809/macro):00148                 rorb
                      (engine/6809/macro):00149          ENDM
                      (engine/6809/macro):00150          
0021                  (engine/6809/macro):00151         _rold MACRO
                      (engine/6809/macro):00152                 rolb
                      (engine/6809/macro):00153                 rola
                      (engine/6809/macro):00154          ENDM    
                      (engine/6809/macro):00155          
0021                  (engine/6809/macro):00156         _rord MACRO
                      (engine/6809/macro):00157                 rora
                      (engine/6809/macro):00158                 rorb
                      (engine/6809/macro):00159          ENDM
                      (engine/6809/macro):00160         
0021                  (engine/6809/macro):00161         _negd MACRO
                      (engine/6809/macro):00162                 nega
                      (engine/6809/macro):00163                 negb
                      (engine/6809/macro):00164                 sbca  #0
                      (engine/6809/macro):00165          ENDM
                      (engine/6809/macro):00166         
0021                  (engine/6809/macro):00167         _cba MACRO
                      (engine/6809/macro):00168                 pshs  b
                      (engine/6809/macro):00169                 cmpa  ,s+
                      (engine/6809/macro):00170          ENDM
                      (engine/6809/macro):00171         
0021                  (engine/6809/macro):00172         _aba MACRO
                      (engine/6809/macro):00173                 pshs  b
                      (engine/6809/macro):00174                 adda  ,s+
                      (engine/6809/macro):00175          ENDM
                      (engine/6809/macro):00176         
0021                  (engine/6809/macro):00177         _sba MACRO
                      (engine/6809/macro):00178                 pshs  b
                      (engine/6809/macro):00179                 suba  ,s+
                      (engine/6809/macro):00180          ENDM
                      (engine/6809/macro):00181         
0021                  (engine/6809/macro):00182         _cab MACRO
                      (engine/6809/macro):00183                 pshs  a
                      (engine/6809/macro):00184                 cmpb  ,s+
                      (engine/6809/macro):00185          ENDM
                      (engine/6809/macro):00186         
0021                  (engine/6809/macro):00187         _aab MACRO
                      (engine/6809/macro):00188                 pshs  a
                      (engine/6809/macro):00189                 addb  ,s+
                      (engine/6809/macro):00190          ENDM
                      (engine/6809/macro):00191         
0021                  (engine/6809/macro):00192         _sab MACRO
                      (engine/6809/macro):00193                 pshs  a
                      (engine/6809/macro):00194                 subb  ,s+
                      (engine/6809/macro):00195          ENDM
                      (engine/6809/macro):00196         
0021                  (engine/6809/macro):00197         _breakpoint MACRO
                      (engine/6809/macro):00198          IFDEF DEBUG
                      (engine/6809/macro):00199                 pshs  CC
                      (engine/6809/macro):00200                 sta   >$ffff
                      (engine/6809/macro):00201                 puls  CC
                      (engine/6809/macro):00202          ENDC
                      (engine/6809/macro):00203          ENDM
                      (C:\Users\bhrou\gi):00025         
0021 0000             (C:\Users\bhrou\gi):00026         ymm.data             fdb   0             ; address of song data
0023 00               (C:\Users\bhrou\gi):00027         ymm.data.page        fcb   0             ; memory page of music data
0024 0000             (C:\Users\bhrou\gi):00028         ymm.data.pos         fdb   0             ; current playing position in Music Data
0026 00               (C:\Users\bhrou\gi):00029         ymm.status           fcb   0             ; 0 : stop playing, 1-255 : play music
0027 00               (C:\Users\bhrou\gi):00030         ymm.frame.waits      fcb   0             ; number of frames to wait before next play
0028 00               (C:\Users\bhrou\gi):00031         ymm.loop             fcb   0             ; 0=no loop
0029 0000             (C:\Users\bhrou\gi):00032         ymm.callback         fdb   0             ; 0=no calback routine
                      (C:\Users\bhrou\gi):00033         
                      (C:\Users\bhrou\gi):00034         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00035         ; ymm.play - Load a new music and init all tracks
                      (C:\Users\bhrou\gi):00036         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00037         ; input REG : [B] loop flag 0: no 1: yes
                      (C:\Users\bhrou\gi):00038         ; input REG : [A] music data page
                      (C:\Users\bhrou\gi):00039         ; input REG : [X] music data
                      (C:\Users\bhrou\gi):00040         ; input REG : [Y] callback routine
                      (C:\Users\bhrou\gi):00041         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00042         
002B                  (C:\Users\bhrou\gi):00043         ymm.play
                      (C:\Users\bhrou\gi):00044                 _GetCartPageA
                      (    _GetCartPageA):00001          IFDEF T2
                      (    _GetCartPageA):00002                 jsr   GetCartPageA
                      (    _GetCartPageA):00003          ELSE
002B B6E7E6           (    _GetCartPageA):00004                 lda   $E7E6
                      (    _GetCartPageA):00005          ENDC
002E B70000           (C:\Users\bhrou\gi):00045                 sta   @a
                      (C:\Users\bhrou\gi):00046                 _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
0031 B7E7E6           (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
0034 BD0000           (C:\Users\bhrou\gi):00047                 jsr   ymm.obj.play
0037 8600             (C:\Users\bhrou\gi):00048                 lda   #0
     0038             (C:\Users\bhrou\gi):00049         @a      equ   *-1
                      (C:\Users\bhrou\gi):00050                 _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
0039 B7E7E6           (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
003C 39               (C:\Users\bhrou\gi):00051                 rts
                      (C:\Users\bhrou\gi):00052         
003D                  (C:\Users\bhrou\gi):00053         ymm.obj.play
003D BD0000           (C:\Users\bhrou\gi):00054                 jsr   irq.off
0040 F70000           (C:\Users\bhrou\gi):00055                 stb   ymm.loop
0043 10BF0000         (C:\Users\bhrou\gi):00056                 sty   ymm.callback
0047 B70000           (C:\Users\bhrou\gi):00057                 sta   ymm.data.page
004A 8601             (C:\Users\bhrou\gi):00058                 lda   #1
004C B70000           (C:\Users\bhrou\gi):00059                 sta   ymm.frame.waits
004F B70000           (C:\Users\bhrou\gi):00060                 sta   ymm.status
0052 BF0000           (C:\Users\bhrou\gi):00061                 stx   ymm.data
0055 CE0000           (C:\Users\bhrou\gi):00062                 ldu   #ymm.buffer
0058 FF0000           (C:\Users\bhrou\gi):00063                 stu   ymm.data.pos
005B 3002             (C:\Users\bhrou\gi):00064                 leax  2,x
005D BD0000           (C:\Users\bhrou\gi):00065                 jsr   ymm.decompress
                      (C:\Users\bhrou\gi):00066                 _ym2413.init
0060 BD0000           (     _ym2413.init):00001                 jsr   ym2413.init
0063 39               (C:\Users\bhrou\gi):00067                 rts
                      (C:\Users\bhrou\gi):00068         
                      (C:\Users\bhrou\gi):00069         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00070         ; ymm.frame.play - processes a music frame (VInt)
                      (C:\Users\bhrou\gi):00071         ;
                      (C:\Users\bhrou\gi):00072         ; format:
                      (C:\Users\bhrou\gi):00073         ; -------
                      (C:\Users\bhrou\gi):00074         ; x00-x38 xnn           : (2 bytes) YM2413 registers
                      (C:\Users\bhrou\gi):00075         ; x39                   : (1 byte) end of stream
                      (C:\Users\bhrou\gi):00076         ; x40                   : (1 byte) wait 1 frames
                      (C:\Users\bhrou\gi):00077         ; ...
                      (C:\Users\bhrou\gi):00078         ; xFF                   ; (1 byte) wait 198 frames
                      (C:\Users\bhrou\gi):00079         ;
                      (C:\Users\bhrou\gi):00080         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00081                 
0064                  (C:\Users\bhrou\gi):00082         ymm.frame.play
0064 B60000           (C:\Users\bhrou\gi):00083                 lda   ymm.status
0067 2705             (C:\Users\bhrou\gi):00084                 beq   @rts
0069 7A0000           (C:\Users\bhrou\gi):00085                 dec   ymm.frame.waits
006C 2701             (C:\Users\bhrou\gi):00086                 beq   >
006E 39               (C:\Users\bhrou\gi):00087         @rts    rts
006F B60000           (C:\Users\bhrou\gi):00088         !       lda   ymm.data.page
                      (C:\Users\bhrou\gi):00089                 _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
0072 B7E7E6           (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
0075                  (C:\Users\bhrou\gi):00090         YVGM_do_MusicFrame
0075 BE0000           (C:\Users\bhrou\gi):00091                 ldx   ymm.data.pos
0078                  (C:\Users\bhrou\gi):00092         @UpdateLoop
0078 A680             (C:\Users\bhrou\gi):00093                 lda   ,x+
007A 8C0000           (C:\Users\bhrou\gi):00094                 cmpx  #ymm.buffer.end
007D 2603             (C:\Users\bhrou\gi):00095                 bne >
007F 8E0000           (C:\Users\bhrou\gi):00096                 ldx   #ymm.buffer
0082 8139             (C:\Users\bhrou\gi):00097         !       cmpa  #$39
0084 253A             (C:\Users\bhrou\gi):00098                 blo   @YM2413
0086                  (C:\Users\bhrou\gi):00099         @YVGM_DoWait
0086 8039             (C:\Users\bhrou\gi):00100                 suba  #$39
0088 2709             (C:\Users\bhrou\gi):00101                 beq   @DoStopTrack
008A B70000           (C:\Users\bhrou\gi):00102                 sta   ymm.frame.waits
008D BF0000           (C:\Users\bhrou\gi):00103                 stx   ymm.data.pos
0090 7E0000           (C:\Users\bhrou\gi):00104                 jmp   ymm.frame.resume         ; read next frame data
0093                  (C:\Users\bhrou\gi):00105         @DoStopTrack
0093 BE0000           (C:\Users\bhrou\gi):00106                 ldx   ymm.callback             ; check callback routine
0096 2702             (C:\Users\bhrou\gi):00107                 beq   >
0098 6E84             (C:\Users\bhrou\gi):00108                 jmp   ,x
009A B60000           (C:\Users\bhrou\gi):00109         !       lda   ymm.loop
009D 2718             (C:\Users\bhrou\gi):00110                 beq   @no_looping
009F C601             (C:\Users\bhrou\gi):00111                 ldb   #1
00A1 F70000           (C:\Users\bhrou\gi):00112                 stb   ymm.frame.waits
00A4 BE0000           (C:\Users\bhrou\gi):00113                 ldx   ymm.data
00A7 EC84             (C:\Users\bhrou\gi):00114                 ldd   ,x
00A9 308B             (C:\Users\bhrou\gi):00115                 leax  d,x                      ; move to loop point
00AB CE0000           (C:\Users\bhrou\gi):00116                 ldu   #ymm.buffer
00AE FF0000           (C:\Users\bhrou\gi):00117                 stu   ymm.data.pos
00B1 BD0000           (C:\Users\bhrou\gi):00118                 jsr   ymm.decompress    
00B4 7E0000           (C:\Users\bhrou\gi):00119                 jmp   ymm.frame.play  
00B7                  (C:\Users\bhrou\gi):00120         @no_looping
00B7 8600             (C:\Users\bhrou\gi):00121                 lda   #0
00B9 B70000           (C:\Users\bhrou\gi):00122                 sta   ymm.status
00BC BD0000           (C:\Users\bhrou\gi):00123                 jsr   ym2413.init
00BF 39               (C:\Users\bhrou\gi):00124                 rts
00C0                  (C:\Users\bhrou\gi):00125         @YM2413
00C0 9700             (C:\Users\bhrou\gi):00126                 sta   <map.YM2413.A
00C2 E680             (C:\Users\bhrou\gi):00127                 ldb   ,x+
00C4 8C0000           (C:\Users\bhrou\gi):00128                 cmpx  #ymm.buffer.end
00C7 2603             (C:\Users\bhrou\gi):00129                 bne >
00C9 8E0000           (C:\Users\bhrou\gi):00130                 ldx   #ymm.buffer
00CC D700             (C:\Users\bhrou\gi):00131         !       stb   <map.YM2413.D
00CE 12               (C:\Users\bhrou\gi):00132                 nop
00CF 12               (C:\Users\bhrou\gi):00133                 nop                            ; tempo (should be 24 cycles between two register writes)
00D0 20A6             (C:\Users\bhrou\gi):00134                 bra   @UpdateLoop
                      (C:\Users\bhrou\gi):00135         
                      (C:\Users\bhrou\gi):00136         ; @zx0_6809_mega.asm - ZX0 decompressor for M6809 - 189 bytes
                      (C:\Users\bhrou\gi):00137         ; Written for the LWTOOLS assembler, http://www.lwtools.ca/.
                      (C:\Users\bhrou\gi):00138         ;
                      (C:\Users\bhrou\gi):00139         ; Copyright (c) 2021 Doug Masten
                      (C:\Users\bhrou\gi):00140         ; ZX0 compression (c) 2021 Einar Saukas, https://github.com/einar-saukas/ZX0
                      (C:\Users\bhrou\gi):00141         ;
                      (C:\Users\bhrou\gi):00142         ; This software is provided 'as-is', without any express or implied
                      (C:\Users\bhrou\gi):00143         ; warranty. In no event will the authors be held liable for any damages
                      (C:\Users\bhrou\gi):00144         ; arising from the use of this software.
                      (C:\Users\bhrou\gi):00145         ;
                      (C:\Users\bhrou\gi):00146         ; Permission is granted to anyone to use this software for any purpose,
                      (C:\Users\bhrou\gi):00147         ; including commercial applications, and to alter it and redistribute it
                      (C:\Users\bhrou\gi):00148         ; freely, subject to the following restrictions:
                      (C:\Users\bhrou\gi):00149         ;
                      (C:\Users\bhrou\gi):00150         ; 1. The origin of this software must not be misrepresented; you must not
                      (C:\Users\bhrou\gi):00151         ;    claim that you wrote the original software. If you use this software
                      (C:\Users\bhrou\gi):00152         ;    in a product, an acknowledgment in the product documentation would be
                      (C:\Users\bhrou\gi):00153         ;    appreciated but is not required.
                      (C:\Users\bhrou\gi):00154         ; 2. Altered source versions must be plainly marked as such, and must not be
                      (C:\Users\bhrou\gi):00155         ;    misrepresented as being the original software.
                      (C:\Users\bhrou\gi):00156         ; 3. This notice may not be removed or altered from any source distribution.
                      (C:\Users\bhrou\gi):00157         ;
                      (C:\Users\bhrou\gi):00158         ; ************************************************************************
                      (C:\Users\bhrou\gi):00159         ; ALTERED SOURCE TO BE ABLE TO UNCOMPRESS ON THE FLY WITH A CYCLING BUFFER
                      (C:\Users\bhrou\gi):00160         ; ************************************************************************
                      (C:\Users\bhrou\gi):00161         ;------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00162         ; Function    : zx0_decompress
                      (C:\Users\bhrou\gi):00163         ; Entry       : Reg X = start of compressed data
                      (C:\Users\bhrou\gi):00164         ;             : Reg U = start of decompression buffer
                      (C:\Users\bhrou\gi):00165         ; Exit        : Reg X = end of compressed data + 1
                      (C:\Users\bhrou\gi):00166         ;             : Reg U = end of decompression buffer + 1
                      (C:\Users\bhrou\gi):00167         ; Destroys    : Regs D, Y
                      (C:\Users\bhrou\gi):00168         ; Description : Decompress ZX0 data (version 1)
                      (C:\Users\bhrou\gi):00169         ;------------------------------------------------------------------------------
00D2                  (C:\Users\bhrou\gi):00170         ymm.decompress
                      (C:\Users\bhrou\gi):00171         ; initialize variables
00D2 10FF0000         (C:\Users\bhrou\gi):00172                            sts @saveS1
00D6 10CE0000         (C:\Users\bhrou\gi):00173                            lds #@stackContext
00DA CC80FF           (C:\Users\bhrou\gi):00174                            ldd #$80ff
00DD B70000           (C:\Users\bhrou\gi):00175                            sta @zx0_bit          ; init bit stream
00E0 1D               (C:\Users\bhrou\gi):00176                            sex                   ; reg A = $FF
00E1 FD0000           (C:\Users\bhrou\gi):00177                            std @zx0_offset       ; init offset = -1
                      (C:\Users\bhrou\gi):00178         ; 0 - literal (copy next N bytes from compressed data)
00E4 8D42             (C:\Users\bhrou\gi):00179         @ym2413zx0_literals bsr @zx0_elias       ; obtain length
00E6 1F02             (C:\Users\bhrou\gi):00180                            tfr d,y               ;  "      "
00E8 7F0000           (C:\Users\bhrou\gi):00181                            clr @mode
00EB 8D58             (C:\Users\bhrou\gi):00182                            bsr @zx0_copy_bytes   ; copy literals
00ED 2520             (C:\Users\bhrou\gi):00183                            bcs @zx0_new_offset   ; branch if next block is new-offset
                      (C:\Users\bhrou\gi):00184         ; 0 - copy from last offset (repeat N bytes from last offset)
00EF 8D37             (C:\Users\bhrou\gi):00185                            bsr @zx0_elias        ; obtain length
     00F1             (C:\Users\bhrou\gi):00186         @zx0_copy          equ *
00F1 BF0000           (C:\Users\bhrou\gi):00187                            stx @saveX            ; save reg X
00F4 1F02             (C:\Users\bhrou\gi):00188                            tfr d,y               ; setup length
     00F8             (C:\Users\bhrou\gi):00189         @zx0_offset        equ *+2
00F6 30C9FFFF         (C:\Users\bhrou\gi):00190                            leax >$ffff,u         ; calculate offset address
00FA 8C0000           (C:\Users\bhrou\gi):00191                            cmpx #ymm.buffer      ; this test is a shortcut that need a buffer to be stored
00FD 2404             (C:\Users\bhrou\gi):00192                            bhs >                 ; at an address >= buffer length
00FF 30890200         (C:\Users\bhrou\gi):00193                            leax ymm.buffer.end-ymm.buffer,x ; cycle buffer
0103 8601             (C:\Users\bhrou\gi):00194         !                  lda #1
0105 B70000           (C:\Users\bhrou\gi):00195                            sta @mode
0108 8D3F             (C:\Users\bhrou\gi):00196                            bsr @zx0_copy_bytes_b ; copy match
010A 8E0000           (C:\Users\bhrou\gi):00197                            ldx #0                ; restore reg X
     010B             (C:\Users\bhrou\gi):00198         @saveX             equ *-2
010D 24D5             (C:\Users\bhrou\gi):00199                            bcc @ym2413zx0_literals ; branch if next block is literals
                      (C:\Users\bhrou\gi):00200         ; 1 - copy from new offset (repeat N bytes from new offset)
010F 8D17             (C:\Users\bhrou\gi):00201         @zx0_new_offset    bsr @zx0_elias        ; obtain offset MSB
0111 50               (C:\Users\bhrou\gi):00202                            negb                  ; adjust for negative offset (set carry for RORA below)
0112 2759             (C:\Users\bhrou\gi):00203                            beq @zx0_eof          ; eof? (length = 256) if so exit
0114 1F98             (C:\Users\bhrou\gi):00204                            tfr b,a               ; transfer to MSB position
0116 E680             (C:\Users\bhrou\gi):00205                            ldb ,x+               ; obtain LSB offset
                      (C:\Users\bhrou\gi):00206                            ;cmpx #ymm.buffer.end
                      (C:\Users\bhrou\gi):00207                            ;blo >
                      (C:\Users\bhrou\gi):00208                            ;ldx  #ymm.buffer     ; cycle buffer
0118 46               (C:\Users\bhrou\gi):00209         !                  rora                  ; last offset bit becomes first length bit
0119 56               (C:\Users\bhrou\gi):00210                            rorb                  ;  "     "     "    "      "     "      "
011A FD0000           (C:\Users\bhrou\gi):00211                            std @zx0_offset       ; preserve new offset
011D CC0001           (C:\Users\bhrou\gi):00212                            ldd #1                ; set elias = 1
0120 8D20             (C:\Users\bhrou\gi):00213                            bsr @zx0_elias_bt     ; get length but skip first bit
0122 5C               (C:\Users\bhrou\gi):00214                            incb                  ; Tiny change to save a couple of CPU cycles
0123 26CC             (C:\Users\bhrou\gi):00215                            bne @zx0_copy        
0125 4C               (C:\Users\bhrou\gi):00216                            inca
0126 20C9             (C:\Users\bhrou\gi):00217                            bra @zx0_copy         ; copy new offset match
                      (C:\Users\bhrou\gi):00218         ; interlaced elias gamma coding
0128 CC0001           (C:\Users\bhrou\gi):00219         @zx0_elias         ldd #1                ; set elias = 1
012B 2005             (C:\Users\bhrou\gi):00220                            bra @zx0_elias_start  ; goto start of elias gamma coding
012D 780000           (C:\Users\bhrou\gi):00221         @zx0_elias_loop    lsl @zx0_bit          ; get next bit
0130 59               (C:\Users\bhrou\gi):00222                            rolb                  ; rotate elias value
0131 49               (C:\Users\bhrou\gi):00223                            rola                  ;   "     "     "
0132 780000           (C:\Users\bhrou\gi):00224         @zx0_elias_start   lsl @zx0_bit          ; get next bit
0135 260B             (C:\Users\bhrou\gi):00225                            bne @zx0_elias_bt     ; branch if bit stream is not empty
0137 B70000           (C:\Users\bhrou\gi):00226                            sta @saveA            ; save reg A
013A A680             (C:\Users\bhrou\gi):00227                            lda ,x+               ; load another 8-bits
                      (C:\Users\bhrou\gi):00228                            ;cmpx #ymm.buffer.end
                      (C:\Users\bhrou\gi):00229                            ;blo >
                      (C:\Users\bhrou\gi):00230                            ;ldx  #ymm.buffer     ; cycle buffer
013C 49               (C:\Users\bhrou\gi):00231         !                  rola                  ; get next bit
013D B70000           (C:\Users\bhrou\gi):00232                            sta @zx0_bit          ; save bit stream
0140 8600             (C:\Users\bhrou\gi):00233                            lda #0                ; restore reg A
     0141             (C:\Users\bhrou\gi):00234         @saveA             equ *-1
                      (C:\Users\bhrou\gi):00235                            endc
0142 24E9             (C:\Users\bhrou\gi):00236         @zx0_elias_bt      bcc @zx0_elias_loop   ; loop until done
0144 39               (C:\Users\bhrou\gi):00237                            rts
                      (C:\Users\bhrou\gi):00238         ; copy Y bytes from X to U and get next bit
0145 E680             (C:\Users\bhrou\gi):00239         @zx0_copy_bytes    ldb ,x+               ; copy byte
0147 200A             (C:\Users\bhrou\gi):00240                            bra >
0149 E680             (C:\Users\bhrou\gi):00241         @zx0_copy_bytes_b  ldb ,x+               ; copy byte
014B 8C0000           (C:\Users\bhrou\gi):00242                            cmpx #ymm.buffer.end
014E 2503             (C:\Users\bhrou\gi):00243                            blo >
0150 8E0000           (C:\Users\bhrou\gi):00244                            ldx  #ymm.buffer      ; cycle buffer
0153 E7C0             (C:\Users\bhrou\gi):00245         !                  stb ,u+               ;  "    "
0155 11830000         (C:\Users\bhrou\gi):00246                            cmpu #ymm.buffer.end
0159 2603             (C:\Users\bhrou\gi):00247                            bne >
015B CE0000           (C:\Users\bhrou\gi):00248                            ldu #ymm.buffer
                      (C:\Users\bhrou\gi):00249         ; loop until a wait byte is found, this will unpack a whole sound frame
015E 7D0000           (C:\Users\bhrou\gi):00250         !                  tst @flip             ; handle 2 bytes cmd length
0161 261C             (C:\Users\bhrou\gi):00251                            bne @nextByte
0163 C139             (C:\Users\bhrou\gi):00252                            cmpb #$39
0165 2518             (C:\Users\bhrou\gi):00253                            blo @nextByte         ; continue if a ym2413 cmd byte
                      (C:\Users\bhrou\gi):00254         ; save context for next byte ... and exit
0167 3476             (C:\Users\bhrou\gi):00255                            pshs d,x,y,u
0169 10FF0000         (C:\Users\bhrou\gi):00256                            sts @stackContextPos
016D 10CE0000         (C:\Users\bhrou\gi):00257         @zx0_eof           lds #0
     016F             (C:\Users\bhrou\gi):00258         @saveS1            equ *-2
0171 39               (C:\Users\bhrou\gi):00259                            rts
                      (C:\Users\bhrou\gi):00260         ; next call will resume here ...
0172 730000           (C:\Users\bhrou\gi):00261         ymm.frame.resume   com @flip
0175 10FF0000         (C:\Users\bhrou\gi):00262                            sts @saveS1
0179 10FE0000         (C:\Users\bhrou\gi):00263                            lds @stackContextPos
017D 3576             (C:\Users\bhrou\gi):00264                            puls d,x,y,u
017F 730000           (C:\Users\bhrou\gi):00265         @nextByte          com @flip
0182 7D0000           (C:\Users\bhrou\gi):00266                            tst @mode
0185 2608             (C:\Users\bhrou\gi):00267                            bne >
0187 313F             (C:\Users\bhrou\gi):00268                            leay -1,y             ; decrement loop counter
0189 26BA             (C:\Users\bhrou\gi):00269                            bne @zx0_copy_bytes   ; loop until done
018B 780000           (C:\Users\bhrou\gi):00270                            lsl @zx0_bit          ; get next bit
018E 39               (C:\Users\bhrou\gi):00271                            rts
018F 313F             (C:\Users\bhrou\gi):00272         !                  leay -1,y             ; decrement loop counter
0191 26B6             (C:\Users\bhrou\gi):00273                            bne @zx0_copy_bytes_b ; loop until done
0193 780000           (C:\Users\bhrou\gi):00274                            lsl @zx0_bit          ; get next bit
0196 39               (C:\Users\bhrou\gi):00275                            rts
0197 80               (C:\Users\bhrou\gi):00276         @zx0_bit  fcb $80
0198 00               (C:\Users\bhrou\gi):00277         @flip     fcb 0
0199 00               (C:\Users\bhrou\gi):00278         @mode     fcb 0
019A 0000             (C:\Users\bhrou\gi):00279         @stackContextPos fdb 0
019C 0000000000000000 (C:\Users\bhrou\gi):00280                   fill 0,32
     0000000000000000
     0000000000000000
     0000000000000000
     01BC             (C:\Users\bhrou\gi):00281         @stackContext equ *
                      (C:\Users\bhrou\gi):00282         
     0200             (C:\Users\bhrou\gi):00283         @buffersize equ  512
01BC 0000000000000000 (C:\Users\bhrou\gi):00284                   align  @buffersize
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
0200                  (C:\Users\bhrou\gi):00285         ymm.buffer
0200 0000000000000000 (C:\Users\bhrou\gi):00286                   fill 0,@buffersize
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
0400                  (C:\Users\bhrou\gi):00287         ymm.buffer.end
                      (C:\Users\bhrou\gi):00288          ENDSECTION
