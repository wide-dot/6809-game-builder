                      (C:\Users\bhrou\gi):00001         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00002         ; FD Boot loader
                      (C:\Users\bhrou\gi):00003         ; Original code from Prehisto
                      (C:\Users\bhrou\gi):00004         ; Benoit Rousseau 07/2023 (memory ext. check)
                      (C:\Users\bhrou\gi):00005         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00006         ; A fully featured boot loader
                      (C:\Users\bhrou\gi):00007         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00008         
                      (C:\Users\bhrou\gi):00009                 INCLUDE "engine/6809/types.const.asm"
                      (engine/6809/types):00001          IFNDEF types.const.asm
     0001             (engine/6809/types):00002         types.const.asm  equ 1
                      (engine/6809/types):00003         
     0001             (engine/6809/types):00004         types.BYTE      equ 1
     0008             (engine/6809/types):00005         types.BYTE_BITS equ 8*types.BYTE
     0002             (engine/6809/types):00006         types.WORD      equ 2*types.BYTE
     0010             (engine/6809/types):00007         types.WORD_BITS equ 8*types.WORD
                      (engine/6809/types):00008          ENDC
                      (C:\Users\bhrou\gi):00010                 INCLUDE "engine/system/mo6/map.const.asm"
                      (engine/system/mo6):00001         ;*******************************************************************************
                      (engine/system/mo6):00002         ; Thomson MO6 - Memory map
                      (engine/system/mo6):00003         
                      (engine/system/mo6):00004         ; ------------------------------------------------------------------------------
                      (engine/system/mo6):00005         ;
                      (engine/system/mo6):00006         ; system addresses
                      (engine/system/mo6):00007         ;*******************************************************************************
                      (engine/system/mo6):00008         
                      (engine/system/mo6):00009          IFNDEF map.const.asm
     0001             (engine/system/mo6):00010         map.const.asm equ 1
                      (engine/system/mo6):00011         
                      (engine/system/mo6):00012         ; -----------------------------------------------------------------------------
                      (engine/system/mo6):00013         ; memory map
     0000             (engine/system/mo6):00014         map.ram.VID_START  equ $0000
     2000             (engine/system/mo6):00015         map.ram.VID_END    equ $2000
     2000             (engine/system/mo6):00016         map.ram.SYS_START  equ $2000
     6000             (engine/system/mo6):00017         map.ram.SYS_END    equ $6000
     6000             (engine/system/mo6):00018         map.ram.DATA_START equ $6000
     A000             (engine/system/mo6):00019         map.ram.DATA_END   equ $A000
     A000             (engine/system/mo6):00020         map.ram.MON_START  equ $A000
     B000             (engine/system/mo6):00021         map.ram.MON_END    equ $B000
     B000             (engine/system/mo6):00022         map.ram.CART_START equ $B000
     F000             (engine/system/mo6):00023         map.ram.CART_END   equ $F000
     F000             (engine/system/mo6):00024         map.ram.MON2_START equ $F000
     0000             (engine/system/mo6):00025         map.ram.MON2_END   equ $0000
                      (engine/system/mo6):00026         
                      (engine/system/mo6):00027         ; -----------------------------------------------------------------------------
                      (engine/system/mo6):00028         ; devices
                      (engine/system/mo6):00029         
                      (engine/system/mo6):00030         ; mc6821 system
     A7C0             (engine/system/mo6):00031         map.MC6821.PRA      equ $A7C0
     A7C1             (engine/system/mo6):00032         map.MC6821.PRB      equ $A7C1
     A7C2             (engine/system/mo6):00033         map.MC6821.CRA      equ $A7C2
     A7C3             (engine/system/mo6):00034         map.MC6821.CRB      equ $A7C3
                      (engine/system/mo6):00035         
                      (engine/system/mo6):00036         ; mc6821 music and game
     A7CC             (engine/system/mo6):00037         map.MC6821.PRA1     equ $A7CC
     A7CD             (engine/system/mo6):00038         map.MC6821.PRA2     equ $A7CD
     A7CE             (engine/system/mo6):00039         map.MC6821.CRA1     equ $A7CE
     A7CF             (engine/system/mo6):00040         map.MC6821.CRA2     equ $A7CF
                      (engine/system/mo6):00041         
                      (engine/system/mo6):00042         ; thmfc01 gate controler floppy disk
     A7D0             (engine/system/mo6):00043         map.THMFC01.STAT0   equ $A7D0
     A7D0             (engine/system/mo6):00044         map.THMFC01.CMD0    equ $A7D0
     A7D1             (engine/system/mo6):00045         map.THMFC01.STAT1   equ $A7D1
     A7D1             (engine/system/mo6):00046         map.THMFC01.CMD1    equ $A7D1
     A7D2             (engine/system/mo6):00047         map.THMFC01.CMD2    equ $A7D2
     A7D3             (engine/system/mo6):00048         map.THMFC01.WDATA   equ $A7D3
     A7D3             (engine/system/mo6):00049         map.THMFC01.RDATA   equ $A7D3
     A7D4             (engine/system/mo6):00050         map.THMFC01.WCLK    equ $A7D4
     A7D5             (engine/system/mo6):00051         map.THMFC01.WSECT   equ $A7D5
     A7D6             (engine/system/mo6):00052         map.THMFC01.TRCK    equ $A7D6
     A7D7             (engine/system/mo6):00053         map.THMFC01.CELL    equ $A7D7
                      (engine/system/mo6):00054         
                      (engine/system/mo6):00055         ; ef9369 palette
     A7DA             (engine/system/mo6):00056         map.EF9369.D        equ $A7DA
     A7DB             (engine/system/mo6):00057         map.EF9369.A        equ $A7DB
                      (engine/system/mo6):00058         
                      (engine/system/mo6):00059         ; gate array page mode
     A7DC             (engine/system/mo6):00060         map.CF74021.LGAMOD  equ $A7DC
     A7DD             (engine/system/mo6):00061         map.CF74021.SYS2    equ $A7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     A7E4             (engine/system/mo6):00062         map.CF74021.COM     equ $A7E4
     A7E5             (engine/system/mo6):00063         map.CF74021.DATA    equ $A7E5 ; (bit0-4) set ram page in data area ($6000-$9FFF)
     A7E6             (engine/system/mo6):00064         map.CF74021.CART    equ $A7E6 ; (bit0-4) set page in cartridge area ($B000-$EFFF), (bit5) set ram over cartridge, (bit6) enable write
     A7E7             (engine/system/mo6):00065         map.CF74021.SYS1    equ $A7E7 ; (bit4) set ram over data area
                      (engine/system/mo6):00066         
                      (engine/system/mo6):00067         ; interface (RS232)
     A7E8             (engine/system/mo6):00068         map.SIOTRANSM       equ $A7E8
     A7E8             (engine/system/mo6):00069         map.SIORECEPT       equ $A7E8
     A7E9             (engine/system/mo6):00070         map.SIORESET        equ $A7E9
     A7E9             (engine/system/mo6):00071         map.SIOSTATUS       equ $A7E9
     A7EA             (engine/system/mo6):00072         map.SIOCMDE         equ $A7EA
     A7EB             (engine/system/mo6):00073         map.SIOCNTRL        equ $A7EB
                      (engine/system/mo6):00074         
                      (engine/system/mo6):00075         ; extension port
     00A7             (engine/system/mo6):00076         map.EXTPORT         equ $A7
     A7F0             (engine/system/mo6):00077         map.IEEE488         equ $A7F0 ; to A7F7
     A7F2             (engine/system/mo6):00078         map.EF5860.CTRL     equ $A7F2 ; MIDI
     A7F3             (engine/system/mo6):00079         map.EF5860.TX       equ $A7F3 ; MIDI
     A7FE             (engine/system/mo6):00080         map.MEA8000.D       equ $A7FE ; Vocal synth
     A7FF             (engine/system/mo6):00081         map.MEA8000.A       equ $A7FF ; Vocal synth
                      (engine/system/mo6):00082         
                      (engine/system/mo6):00083         ; -----------------------------------------------------------------------------
                      (engine/system/mo6):00084         ; ROM routines
     A004             (engine/system/mo6):00085         map.DKCONT          equ $A004 ; read sector
     A007             (engine/system/mo6):00086         map.DKBOOT          equ $A007 ; boot
     A00A             (engine/system/mo6):00087         map.DKFMT           equ $A00A ; format
     A00D             (engine/system/mo6):00088         map.LECFA           equ $A00D ; read FAT
     A010             (engine/system/mo6):00089         map.RECFI           equ $A010 ; search file
     A010             (engine/system/mo6):00090         map.RECUP           equ $A010 ; clear file
     A010             (engine/system/mo6):00091         map.ECRSE           equ $A010 ; sector write
     A019             (engine/system/mo6):00092         map.ALLOD           equ $A019 ; catalog file allocation
     A01C             (engine/system/mo6):00093         map.ALLOB           equ $A01C ; bloc allocation
     A01F             (engine/system/mo6):00094         map.MAJCL           equ $A01F ; cluster update
     A022             (engine/system/mo6):00095         map.FINTR           equ $A022 ; transfert end
     A025             (engine/system/mo6):00096         map.QDDSTD          equ $A025 ; QDD std functions
     A028             (engine/system/mo6):00097         map.QDDSYS          equ $A028 ; QDD sys functions
                      (engine/system/mo6):00098         
     0000             (engine/system/mo6):00099         map.JSR_MENU        equ $00 ; Retour au menu
     0002             (engine/system/mo6):00100         map.JSR_PUTC        equ $02 ; Affichage d'un caractère
     0004             (engine/system/mo6):00101         map.JSR_FRM0        equ $04 ; Mise en mémoire couleur
     0006             (engine/system/mo6):00102         map.JSR_FRM1        equ $06 ; Mise en mémoire forme
     0008             (engine/system/mo6):00103         map.JSR_BIIP        equ $08 ; Emission d'un bip sonore
     000A             (engine/system/mo6):00104         map.JSR_GETC        equ $0A ; Lecture du clavier
     000C             (engine/system/mo6):00105         map.JSR_KTST        equ $0C ; Lecture rapide du clavier
     000E             (engine/system/mo6):00106         map.JSR_DRAW        equ $0E ; Tracé d'un segment de droite
     0010             (engine/system/mo6):00107         map.JSR_PLOT        equ $10 ; Allumage ou exctinction d'un point
     0012             (engine/system/mo6):00108         map.JSR_CHPL        equ $12 ; Ecriture d'un point "caractères"
     0014             (engine/system/mo6):00109         map.JSR_GETP        equ $14 ; Lecture de la couleur d'un point
     0016             (engine/system/mo6):00110         map.JSR_LPIN        equ $16 ; Lecture du bouton du crayon optique
     0018             (engine/system/mo6):00111         map.JSR_GETL        equ $18 ; Lecture du crayon optique
     001A             (engine/system/mo6):00112         map.JSR_GETS        equ $1A ; Lecture de l'écran
     001C             (engine/system/mo6):00113         map.JSR_JOYS        equ $1C ; Lecture des manettes de jeu
     001E             (engine/system/mo6):00114         map.JSR_NOTE        equ $1E ; Génération de musique
     0020             (engine/system/mo6):00115         map.JSR_K7CO        equ $20 ; Lecture/écrituresur la cassette
     0022             (engine/system/mo6):00116         map.JSR_K7MO        equ $22 ; Mise en route/arrêt du moteur
     0024             (engine/system/mo6):00117         map.JSR_PRCO        equ $24 ; Gestion de l'interface parallèle
     0026             (engine/system/mo6):00118         map.JSR_DKCO        equ $26 ; Contrôleur de disquette
     0028             (engine/system/mo6):00119         map.JSR_DKBOOT      equ $28 ; Lancement du boot
     002A             (engine/system/mo6):00120         map.JSR_DKFMT       equ $2A ; Formattage disquette
     002C             (engine/system/mo6):00121         map.JSR_ALLOB       equ $2C ; Allocation d'un bloc
     002E             (engine/system/mo6):00122         map.JSR_ALLOD       equ $2E ; Allocation de depart 
     0030             (engine/system/mo6):00123         map.JSR_ECRSE       equ $30 ; Ecriture d'un secteur
     0032             (engine/system/mo6):00124         map.JSR_FINTR       equ $32 ; Fin du transfert
     0034             (engine/system/mo6):00125         map.JSR_LECFA       equ $34 ; Lecture de la fat
     0036             (engine/system/mo6):00126         map.JSR_MAJCL       equ $36 ; Mise a jour cluster
     0038             (engine/system/mo6):00127         map.JSR_RECFI       equ $38 ; Recherche d'un fichier
     003A             (engine/system/mo6):00128         map.JSR_RECUP       equ $3A ; Recuperation de la place occupee
     003C             (engine/system/mo6):00129         map.JSR_SETP        equ $3C ; Programmation de la palette
     003E             (engine/system/mo6):00130         map.JSR_MOUSEB      equ $3E ; Lecture des boutons de la souris
     0040             (engine/system/mo6):00131         map.JSR_MOUSE       equ $40 ; Lecture de la souris
     0042             (engine/system/mo6):00132         map.JSR_RSCO        equ $42 ; Gestion de la RS232
                      (engine/system/mo6):00133         
     0080             (engine/system/mo6):00134         map.JMP_MENU        equ $80+map.JSR_MENU   ; Retour au menu
     0082             (engine/system/mo6):00135         map.JMP_PUTC        equ $80+map.JSR_PUTC   ; Affichage d'un caractère
     0084             (engine/system/mo6):00136         map.JMP_FRM0        equ $80+map.JSR_FRM0   ; Mise en mémoire couleur
     0086             (engine/system/mo6):00137         map.JMP_FRM1        equ $80+map.JSR_FRM1   ; Mise en mémoire forme
     0088             (engine/system/mo6):00138         map.JMP_BIIP        equ $80+map.JSR_BIIP   ; Emission d'un bip sonore
     008A             (engine/system/mo6):00139         map.JMP_GETC        equ $80+map.JSR_GETC   ; Lecture du clavier
     008C             (engine/system/mo6):00140         map.JMP_KTST        equ $80+map.JSR_KTST   ; Lecture rapide du clavier
     008E             (engine/system/mo6):00141         map.JMP_DRAW        equ $80+map.JSR_DRAW   ; Tracé d'un segment de droite
     0090             (engine/system/mo6):00142         map.JMP_PLOT        equ $80+map.JSR_PLOT   ; Allumage ou exctinction d'un point
     0092             (engine/system/mo6):00143         map.JMP_CHPL        equ $80+map.JSR_CHPL   ; Ecriture d'un point "caractères"
     0094             (engine/system/mo6):00144         map.JMP_GETP        equ $80+map.JSR_GETP   ; Lecture de la couleur d'un point
     0096             (engine/system/mo6):00145         map.JMP_LPIN        equ $80+map.JSR_LPIN   ; Lecture du bouton du crayon optique
     0098             (engine/system/mo6):00146         map.JMP_GETL        equ $80+map.JSR_GETL   ; Lecture du crayon optique
     009A             (engine/system/mo6):00147         map.JMP_GETS        equ $80+map.JSR_GETS   ; Lecture de l'écran
     009C             (engine/system/mo6):00148         map.JMP_JOYS        equ $80+map.JSR_JOYS   ; Lecture des manettes de jeu
     009E             (engine/system/mo6):00149         map.JMP_NOTE        equ $80+map.JSR_NOTE   ; Génération de musique
     00A0             (engine/system/mo6):00150         map.JMP_K7CO        equ $80+map.JSR_K7CO   ; Lecture/écrituresur la cassette
     00A2             (engine/system/mo6):00151         map.JMP_K7MO        equ $80+map.JSR_K7MO   ; Mise en route/arrêt du moteur
     00A4             (engine/system/mo6):00152         map.JMP_PRCO        equ $80+map.JSR_PRCO   ; Gestion de l'interface parallèle
     00A6             (engine/system/mo6):00153         map.JMP_DKCO        equ $80+map.JSR_DKCO   ; Contrôleur de disquette
     00A8             (engine/system/mo6):00154         map.JMP_DKBOOT      equ $80+map.JSR_DKBOOT ; Lancement du boot
     00AA             (engine/system/mo6):00155         map.JMP_DKFMT       equ $80+map.JSR_DKFMT  ; Formattage disquette
     00AC             (engine/system/mo6):00156         map.JMP_ALLOB       equ $80+map.JSR_ALLOB  ; Allocation d'un bloc
     00AE             (engine/system/mo6):00157         map.JMP_ALLOD       equ $80+map.JSR_ALLOD  ; Allocation de depart 
     00B0             (engine/system/mo6):00158         map.JMP_ECRSE       equ $80+map.JSR_ECRSE  ; Ecriture d'un secteur
     00B2             (engine/system/mo6):00159         map.JMP_FINTR       equ $80+map.JSR_FINTR  ; Fin du transfert
     00B4             (engine/system/mo6):00160         map.JMP_LECFA       equ $80+map.JSR_LECFA  ; Lecture de la fat
     00B6             (engine/system/mo6):00161         map.JMP_MAJCL       equ $80+map.JSR_MAJCL  ; Mise a jour cluster
     00B8             (engine/system/mo6):00162         map.JMP_RECFI       equ $80+map.JSR_RECFI  ; Recherche d'un fichier
     00BA             (engine/system/mo6):00163         map.JMP_RECUP       equ $80+map.JSR_RECUP  ; Recuperation de la place occupee
     00BC             (engine/system/mo6):00164         map.JMP_SETP        equ $80+map.JSR_SETP   ; Programmation de la palette
     00BE             (engine/system/mo6):00165         map.JMP_MOUSEB      equ $80+map.JSR_MOUSEB ; Lecture des boutons de la souris
     00C0             (engine/system/mo6):00166         map.JMP_MOUSE       equ $80+map.JSR_MOUSE  ; Lecture de la souris
     00C2             (engine/system/mo6):00167         map.JMP_RSCO        equ $80+map.JSR_RSCO   ; Gestion de la RS232
                      (engine/system/mo6):00168         
                      (engine/system/mo6):00169         ; -----------------------------------------------------------------------------
                      (engine/system/mo6):00170         ; system monitor registers
     0020             (engine/system/mo6):00171         map.REG.DP          equ $20   ; direct page for system monitor registers
     2019             (engine/system/mo6):00172         map.STATUS          equ $2019 ; status bitfield
     2048             (engine/system/mo6):00173         map.DK.OPC          equ $2048 ; operation
     2049             (engine/system/mo6):00174         map.DK.DRV          equ $2049 ; drive
     204C             (engine/system/mo6):00175         map.DK.SEC          equ $204C ; sector
     204A             (engine/system/mo6):00176         map.DK.TRK          equ $204A ; $204B ; track
     204E             (engine/system/mo6):00177         map.DK.STA          equ $204E ; return status
     204F             (engine/system/mo6):00178         map.DK.BUF          equ $204F ; $2050 ; data write location
     2061             (engine/system/mo6):00179         map.TIMERPT         equ $2061 ; routine irq timer
     2063             (engine/system/mo6):00180         map.IRQSEMAPHORE    equ $2063 ; irq semaphore
     2064             (engine/system/mo6):00181         map.IRQPT           equ $2064 ; routine irq
     2067             (engine/system/mo6):00182         map.FIRQPT          equ $2067 ; routine firq
     20FD             (engine/system/mo6):00183         map.CHRPTR          equ $20FD ; 
     2076             (engine/system/mo6):00184         map.LATCLV          equ $2076 ; keyboard repeat latency
     2081             (engine/system/mo6):00185         map.CF74021.SYS1.R  equ $2081 ; reading value for map.CF74021.SYS1
                      (engine/system/mo6):00186         
                      (engine/system/mo6):00187         ; -----------------------------------------------------------------------------
                      (engine/system/mo6):00188         ; constants
                      (engine/system/mo6):00189         
     0035             (engine/system/mo6):00190         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (engine/system/mo6):00191         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     0060             (engine/system/mo6):00192         map.RAM_OVER_CART     equ %01100000
     0080             (engine/system/mo6):00193         map.STATUS.MINUSCULE  equ %10000000
     0040             (engine/system/mo6):00194         map.STATUS.SCROLL     equ %01000000
     0020             (engine/system/mo6):00195         map.STATUS.QWERTY     equ %00100000
     0010             (engine/system/mo6):00196         map.STATUS.GFXFORM    equ %00010000
     0008             (engine/system/mo6):00197         map.STATUS.CUTBUZZER  equ %00001000
     0004             (engine/system/mo6):00198         map.STATUS.CURSOR     equ %00000100
     0002             (engine/system/mo6):00199         map.STATUS.KEYREPEAT  equ %00000010
     0001             (engine/system/mo6):00200         map.STATUS.KEYREAD    equ %00000001
                      (engine/system/mo6):00201         
                      (engine/system/mo6):00202         ; -----------------------------------------------------------------------------
                      (engine/system/mo6):00203         ; mapping to generic names
                      (engine/system/mo6):00204         
     A7CD             (engine/system/mo6):00205         map.DAC            equ map.MC6821.PRA2
     ????             (engine/system/mo6):00206         map.RND            equ map.MC6846.TMSB
     A7C0             (engine/system/mo6):00207         map.HALFPAGE       equ map.MC6821.PRA
                      (engine/system/mo6):00208         
                      (engine/system/mo6):00209             ENDC
                      (C:\Users\bhrou\gi):00011                 INCLUDE "engine/system/mo6/bootloader/loader.const.asm"
                      (engine/system/mo6):00001          IFNDEF loader.PAGE
0000                  (engine/system/mo6):00002         loader.PAGE equ 4
                      (engine/system/mo6):00003          ENDC
                      (engine/system/mo6):00004         
                      (engine/system/mo6):00005          IFNDEF loader.ADDRESS
0000                  (engine/system/mo6):00006         loader.ADDRESS equ $6000
                      (engine/system/mo6):00007          ENDC
                      (engine/system/mo6):00008         
                      (engine/system/mo6):00009          IFNDEF loader.DEFAULT_DYNAMIC_MEMORY_SIZE
0000                  (engine/system/mo6):00010         loader.DEFAULT_DYNAMIC_MEMORY_SIZE equ loader.ADDRESS-loader.memoryPool+$4000
                      (engine/system/mo6):00011          ENDC
                      (engine/system/mo6):00012         
                      (engine/system/mo6):00013          IFNDEF loader.DEFAULT_SCENE_DIR_ID
     0000             (engine/system/mo6):00014         loader.DEFAULT_SCENE_DIR_ID equ 0
                      (engine/system/mo6):00015          ENDC
                      (engine/system/mo6):00016         
                      (engine/system/mo6):00017          IFNDEF loader.DEFAULT_SCENE_FILE_ID
     0000             (engine/system/mo6):00018         loader.DEFAULT_SCENE_FILE_ID equ 0
                      (engine/system/mo6):00019          ENDC
                      (engine/system/mo6):00020         
                      (engine/system/mo6):00021          IFNDEF loader.DEFAULT_SCENE_EXEC_PAGE
     0005             (engine/system/mo6):00022         loader.DEFAULT_SCENE_EXEC_PAGE equ 5
                      (engine/system/mo6):00023          ENDC
                      (engine/system/mo6):00024         
                      (engine/system/mo6):00025          IFNDEF loader.DEFAULT_SCENE_EXEC_ADDR
     2100             (engine/system/mo6):00026         loader.DEFAULT_SCENE_EXEC_ADDR equ $2100
                      (engine/system/mo6):00027          ENDC
                      (C:\Users\bhrou\gi):00012         
                      (C:\Users\bhrou\gi):00013         ; Disk boot
                      (C:\Users\bhrou\gi):00014                 org    $2200
     20               (C:\Users\bhrou\gi):00015                 setdp  map.REG.DP
                      (C:\Users\bhrou\gi):00016         
                      (C:\Users\bhrou\gi):00017         ; Freeze interrupts
2200 1A50             (C:\Users\bhrou\gi):00018                 orcc  #$50
                      (C:\Users\bhrou\gi):00019         
                      (C:\Users\bhrou\gi):00020         ; Check computer type
2202 308C7C           (C:\Users\bhrou\gi):00021                 leax  <mess1,pcr          ; Error message
2205 8601             (C:\Users\bhrou\gi):00022                 lda   #$01                ; Load code
2207 B1FFF0           (C:\Users\bhrou\gi):00023                 cmpa  >$FFF0              ; Check machine code
220A 263C             (C:\Users\bhrou\gi):00024                 bne   err                 ; Error if not MO6
                      (C:\Users\bhrou\gi):00025         
                      (C:\Users\bhrou\gi):00026         ; Load loader sectors
                      (C:\Users\bhrou\gi):00027          IFGE loader.ADDRESS-$B000        ; Skip if not RAM over cartridge space
                      (C:\Users\bhrou\gi):00028                 ldb   #loader.PAGE        ; Load RAM page
                      (C:\Users\bhrou\gi):00029                 orb   #$60                ; Set RAM over cartridge space
                      (C:\Users\bhrou\gi):00030                 stb   >map.CF74021.CART   ; Switch RAM page
                      (C:\Users\bhrou\gi):00031          ELSE
                      (C:\Users\bhrou\gi):00032           IFGE loader.ADDRESS-$6000       ; Skip if not data space
220C 8610             (C:\Users\bhrou\gi):00033                 lda   #$10
220E 9A81             (C:\Users\bhrou\gi):00034                 ora   <map.CF74021.SYS1.R ; Set RAM
2210 9781             (C:\Users\bhrou\gi):00035                 sta   <map.CF74021.SYS1.R ; over data
2212 B7A7E7           (C:\Users\bhrou\gi):00036                 sta   >map.CF74021.SYS1   ; space
2215 C604             (C:\Users\bhrou\gi):00037                 ldb   #loader.PAGE        ; Load RAM page
2217 F7A7E5           (C:\Users\bhrou\gi):00038                 stb   >map.CF74021.DATA   ; Switch RAM page
                      (C:\Users\bhrou\gi):00039           ELSE
                      (C:\Users\bhrou\gi):00040            IFGE loader.ADDRESS-$2000      ; Skip if not resident space
                      (C:\Users\bhrou\gi):00041            ELSE
                      (C:\Users\bhrou\gi):00042                 ldb   #loader.PAGE        ; Load RAM page
                      (C:\Users\bhrou\gi):00043                 andb  #$01                ; Keep only half page A or B
                      (C:\Users\bhrou\gi):00044                 orb   >map.MC6846.PRC     ; Merge register value
                      (C:\Users\bhrou\gi):00045                 stb   >map.MC6846.PRC     ; Set desired half page in video space
                      (C:\Users\bhrou\gi):00046            ENDC
                      (C:\Users\bhrou\gi):00047           ENDC
                      (C:\Users\bhrou\gi):00048          ENDC
221A CC6000           (C:\Users\bhrou\gi):00049                 ldd   #loader.ADDRESS    ; Loading
221D DD4F             (C:\Users\bhrou\gi):00050                 std   <map.DK.BUF        ; address
                      (C:\Users\bhrou\gi):00051                 IFGT loader.ADDRESS-((loader.ADDRESS/256)*256)
                      (C:\Users\bhrou\gi):00052                 ERROR "loader.ADDRESS is expected to be a multiple of 256 bytes. Ex: $6000, $2100, ..."
                      (C:\Users\bhrou\gi):00053                 ENDC                     ; b register is always 0
221F D7FF             (C:\Users\bhrou\gi):00054                 stb   <$20ff             ; Cold reset
2221 8602             (C:\Users\bhrou\gi):00055                 lda   #$02               ; >read code
2223 DD48             (C:\Users\bhrou\gi):00056                 std   <map.DK.OPC        ; Read/Head 0
2225 CE22AF           (C:\Users\bhrou\gi):00057                 ldu   #blist             ; Interleave list
2228 8E2293           (C:\Users\bhrou\gi):00058                 ldx   #mess3             ; Error message
222B A6C5             (C:\Users\bhrou\gi):00059         boot2   lda   b,u                ; Get sector
222D 974C             (C:\Users\bhrou\gi):00060                 sta   <map.DK.SEC        ; number
222F BDA004           (C:\Users\bhrou\gi):00061                 jsr   >map.DKCONT        ; Load sector
2232 2405             (C:\Users\bhrou\gi):00062                 bcc   boot3              ; Skip if no error
2234 BDA004           (C:\Users\bhrou\gi):00063                 jsr   >map.DKCONT        ; Reload sector
2237 250F             (C:\Users\bhrou\gi):00064                 bcs   err                ; Skip if error
2239 0C4F             (C:\Users\bhrou\gi):00065         boot3   inc   <map.DK.BUF        ; Move sector ptr
223B 5C               (C:\Users\bhrou\gi):00066                 incb                     ; Sector+1
223C 7A2280           (C:\Users\bhrou\gi):00067                 dec   >secnbr            ; Next
223F 26EA             (C:\Users\bhrou\gi):00068                 bne   boot2              ; sector
2241 10CE5F00         (C:\Users\bhrou\gi):00069                 lds   #$5F00             ; Set system stack
2245 7E6000           (C:\Users\bhrou\gi):00070                 jmp   >loader.ADDRESS
                      (C:\Users\bhrou\gi):00071         
                      (C:\Users\bhrou\gi):00072         ; Display error message
2248 338C56           (C:\Users\bhrou\gi):00073         err     leau  <mess0,pcr         ; Location
224B 8D08             (C:\Users\bhrou\gi):00074                 bsr   err2               ; Display location
224D 3384             (C:\Users\bhrou\gi):00075                 leau  ,x                 ; Message pointer
224F 8D04             (C:\Users\bhrou\gi):00076                 bsr   err2               ; Display message
2251 20FE             (C:\Users\bhrou\gi):00077         err0    bra   err0               ; Infinite loop
                      (C:\Users\bhrou\gi):00078         
                      (C:\Users\bhrou\gi):00079         ; Display message
2253 8D06             (C:\Users\bhrou\gi):00080         err1    bsr   err3               ; Display char
2255 E6C0             (C:\Users\bhrou\gi):00081         err2    ldb   ,u+                ; Read char
2257 2AFA             (C:\Users\bhrou\gi):00082                 bpl   err1               ; Next if not last
2259 C47F             (C:\Users\bhrou\gi):00083                 andb  #$7f               ; Mask char
225B 1FB8             (C:\Users\bhrou\gi):00084         err3    tfr   dp,a               ; Read DP
225D 48               (C:\Users\bhrou\gi):00085                 asla                     ; Check if MO or TO
225E 2A03             (C:\Users\bhrou\gi):00086                 bpl   >
2260 7EE803           (C:\Users\bhrou\gi):00087                 jmp   $E803              ; Display for TO
2263 3F               (C:\Users\bhrou\gi):00088         !       swi                      ; Display for MO
2264 82               (C:\Users\bhrou\gi):00089                 fcb   map.JMP_PUTC       ; Display for MO
                      (C:\Users\bhrou\gi):00090         
                      (C:\Users\bhrou\gi):00091                 IFGT *-$2278
                      (C:\Users\bhrou\gi):00092                 ERROR "boot code part 1 is too large !"
                      (C:\Users\bhrou\gi):00093                 ENDC
                      (C:\Users\bhrou\gi):00094         
2265 0000000000000000 (C:\Users\bhrou\gi):00095                 align $2278
     0000000000000000
     000000
2278                  (C:\Users\bhrou\gi):00096         @magicNumber
2278 42415349433200   (C:\Users\bhrou\gi):00097                 fcn   "BASIC2"
227F 00               (C:\Users\bhrou\gi):00098                 fcb   $00                               ; checksum (set at build stage)
2280 0F               (C:\Users\bhrou\gi):00099         secnbr  fcb   (builder.lwasm.size.loader/256)+1 ; number of sectors to read
                      (C:\Users\bhrou\gi):00100         
                      (C:\Users\bhrou\gi):00101         ; Error messages
2281 4F6E6C7920666F72 (C:\Users\bhrou\gi):00102         mess1   fcs   "Only for MO6/PC128"
     204D4F362F504331
     32B8
2293 2020202020492F4F (C:\Users\bhrou\gi):00103         mess3   fcs   "     I/O|Error"
     7C4572726FF2
                      (C:\Users\bhrou\gi):00104         
                      (C:\Users\bhrou\gi):00105         ; Location message
22A1 1F2121           (C:\Users\bhrou\gi):00106         mess0   fcb   $1f,$21,$21
22A4 1F1113           (C:\Users\bhrou\gi):00107                 fcb   $1f,$11,$13        ; 3 lines (11-13)
22A7 1B47             (C:\Users\bhrou\gi):00108                 fcb   $1b,$47            ; font : white
22A9 1B51             (C:\Users\bhrou\gi):00109                 fcb   $1b,$51            ; background : red
22AB 0C               (C:\Users\bhrou\gi):00110                 fcb   $0c                ; cls
22AC 1F4CCB           (C:\Users\bhrou\gi):00111                 fcb   $1f,$4c,$4b+$80    ; locate for MO
                      (C:\Users\bhrou\gi):00112         
                      (C:\Users\bhrou\gi):00113         ; Interleave table
22AF 0F0D0B           (C:\Users\bhrou\gi):00114         blist   fcb   $0f,$0d,$0b        ; first value is omitted ($01 : boot sector)
22B2 09070503         (C:\Users\bhrou\gi):00115                 fcb   $09,$07,$05,$03
22B6 08060402         (C:\Users\bhrou\gi):00116                 fcb   $08,$06,$04,$02
22BA 100E0C0A         (C:\Users\bhrou\gi):00117                 fcb   $10,$0e,$0c,$0a
                      (C:\Users\bhrou\gi):00118         
                      (C:\Users\bhrou\gi):00119                 IFGT *-$2300
                      (C:\Users\bhrou\gi):00120                 ERROR "boot code part 2 is too large !"
                      (C:\Users\bhrou\gi):00121                 ENDC
