                      (C:\Users\bhrou\gi):00001         ;*******************************************************************************
                      (C:\Users\bhrou\gi):00002         ; FD File loader
                      (C:\Users\bhrou\gi):00003         ; Benoit Rousseau 07/2023
                      (C:\Users\bhrou\gi):00004         ; Based on loader from Prehisto
                      (C:\Users\bhrou\gi):00005         ; ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00006         ; A fully featured boot loader
                      (C:\Users\bhrou\gi):00007         ;
                      (C:\Users\bhrou\gi):00008         ; TODO :
                      (C:\Users\bhrou\gi):00009         ; - gérer le cas des fichiers vides, mais qui ont un fichier de link associé
                      (C:\Users\bhrou\gi):00010         ;   ex: equates exportées
                      (C:\Users\bhrou\gi):00011         ;
                      (C:\Users\bhrou\gi):00012         ;*******************************************************************************
     FF               (C:\Users\bhrou\gi):00013          SETDP $ff
                      (C:\Users\bhrou\gi):00014                 INCLUDE "new-engine/constant/types.const.asm"
                      (new-engine/consta):00001          IFNDEF types.const.asm
     0001             (new-engine/consta):00002         types.const.asm  equ 1
                      (new-engine/consta):00003         
     0001             (new-engine/consta):00004         types.BYTE      equ 1
     0008             (new-engine/consta):00005         types.BYTE_BITS equ 8*types.BYTE
     0002             (new-engine/consta):00006         types.WORD      equ 2*types.BYTE
     0010             (new-engine/consta):00007         types.WORD_BITS equ 8*types.WORD
                      (new-engine/consta):00008          ENDC
                      (C:\Users\bhrou\gi):00015                 INCLUDE "engine/macros.asm"
0000                  (engine/macros.asm):00001         _ldd MACRO
                      (engine/macros.asm):00002                 ldd   #((\1)*256)+\2
                      (engine/macros.asm):00003          ENDM
                      (engine/macros.asm):00004          
0000                  (engine/macros.asm):00005         _ldx MACRO
                      (engine/macros.asm):00006                 ldx   #((\1)*256)+\2
                      (engine/macros.asm):00007          ENDM
                      (engine/macros.asm):00008          
0000                  (engine/macros.asm):00009         _ldy MACRO
                      (engine/macros.asm):00010                 ldy   #((\1)*256)+\2
                      (engine/macros.asm):00011          ENDM
                      (engine/macros.asm):00012          
0000                  (engine/macros.asm):00013         _ldu MACRO
                      (engine/macros.asm):00014                 ldu   #((\1)*256)+\2
                      (engine/macros.asm):00015          ENDM  
                      (engine/macros.asm):00016          
0000                  (engine/macros.asm):00017         _lds MACRO
                      (engine/macros.asm):00018                 lds   #((\1)*256)+\2
                      (engine/macros.asm):00019          ENDM   
                      (engine/macros.asm):00020          
0000                  (engine/macros.asm):00021         _SetCartPageA MACRO
                      (engine/macros.asm):00022          IFDEF T2
                      (engine/macros.asm):00023                 jsr   SetCartPageA
                      (engine/macros.asm):00024          ELSE
                      (engine/macros.asm):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (engine/macros.asm):00026          ENDC
                      (engine/macros.asm):00027          ENDM      
                      (engine/macros.asm):00028          
0000                  (engine/macros.asm):00029         _GetCartPageA MACRO
                      (engine/macros.asm):00030          IFDEF T2
                      (engine/macros.asm):00031                 jsr   GetCartPageA
                      (engine/macros.asm):00032          ELSE
                      (engine/macros.asm):00033                 lda   $E7E6
                      (engine/macros.asm):00034          ENDC
                      (engine/macros.asm):00035          ENDM
                      (engine/macros.asm):00036         
0000                  (engine/macros.asm):00037         _SetCartPageB MACRO
                      (engine/macros.asm):00038          IFDEF T2
                      (engine/macros.asm):00039                 jsr   SetCartPageB
                      (engine/macros.asm):00040          ELSE
                      (engine/macros.asm):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (engine/macros.asm):00042          ENDC
                      (engine/macros.asm):00043          ENDM      
                      (engine/macros.asm):00044          
0000                  (engine/macros.asm):00045         _GetCartPageB MACRO
                      (engine/macros.asm):00046          IFDEF T2
                      (engine/macros.asm):00047                 jsr   GetCartPageB
                      (engine/macros.asm):00048          ELSE
                      (engine/macros.asm):00049                 ldb   $E7E6
                      (engine/macros.asm):00050          ENDC
                      (engine/macros.asm):00051          ENDM     
                      (engine/macros.asm):00052         
0000                  (engine/macros.asm):00053         _RunObjectSwap MACRO
                      (engine/macros.asm):00054                 ; param 1 : ObjID_
                      (engine/macros.asm):00055                 ; param 2 : Object data RAM address
                      (engine/macros.asm):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (engine/macros.asm):00057                 lda   Obj_Index_Page+\1
                      (engine/macros.asm):00058                 sta   PSR_Page   
                      (engine/macros.asm):00059                 ldd   Obj_Index_Address+2*\1
                      (engine/macros.asm):00060                 std   PSR_Address       
                      (engine/macros.asm):00061                 ldu   \2             
                      (engine/macros.asm):00062                 jsr   RunPgSubRoutine
                      (engine/macros.asm):00063          ENDM    
                      (engine/macros.asm):00064         
0000                  (engine/macros.asm):00065         _RunObjectSwapRoutine MACRO
                      (engine/macros.asm):00066                 ; param 1 : ObjID_
                      (engine/macros.asm):00067                 ; param 2 : Object routine
                      (engine/macros.asm):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (engine/macros.asm):00069                 lda   Obj_Index_Page+\1   
                      (engine/macros.asm):00070                 sta   PSR_Page   
                      (engine/macros.asm):00071                 ldd   Obj_Index_Address+2*\1
                      (engine/macros.asm):00072                 std   PSR_Address       
                      (engine/macros.asm):00073                 ldb   \2        
                      (engine/macros.asm):00074                 jsr   RunPgSubRoutine
                      (engine/macros.asm):00075          ENDM 
                      (engine/macros.asm):00076          
0000                  (engine/macros.asm):00077         _MountObject MACRO 
                      (engine/macros.asm):00078                 ; param 1 : ObjID_
                      (engine/macros.asm):00079                 ; manual mount of an object from the resident page 1
                      (engine/macros.asm):00080                 lda   Obj_Index_Page+\1
                      (engine/macros.asm):00081                 _SetCartPageA
                      (engine/macros.asm):00082                 ldx   Obj_Index_Address+2*\1
                      (engine/macros.asm):00083          ENDM
                      (engine/macros.asm):00084         
0000                  (engine/macros.asm):00085         _RunObject MACRO 
                      (engine/macros.asm):00086                 ; param 1 : ObjID_
                      (engine/macros.asm):00087                 ; param 2 : Object data RAM address
                      (engine/macros.asm):00088                 ; manual launch of an object from the resident page 1
                      (engine/macros.asm):00089                 _MountObject \1
                      (engine/macros.asm):00090                 ldu   \2        
                      (engine/macros.asm):00091                 jsr   ,x
                      (engine/macros.asm):00092          ENDM
                      (engine/macros.asm):00093         
0000                  (engine/macros.asm):00094         _RunObjectRoutineA MACRO 
                      (engine/macros.asm):00095                 ; param 1 : ObjID_
                      (engine/macros.asm):00096                 ; param 2 : Object routine
                      (engine/macros.asm):00097                 ; manual launch of an object from the resident page 1
                      (engine/macros.asm):00098                 ; this object does not need or have a data structure for this routine
                      (engine/macros.asm):00099                 _MountObject \1
                      (engine/macros.asm):00100                 lda   \2        
                      (engine/macros.asm):00101                 jsr   ,x
                      (engine/macros.asm):00102          ENDM
                      (engine/macros.asm):00103         
0000                  (engine/macros.asm):00104         _RunObjectRoutineB MACRO 
                      (engine/macros.asm):00105                 ; param 1 : ObjID_
                      (engine/macros.asm):00106                 ; param 2 : Object routine
                      (engine/macros.asm):00107                 ; manual launch of an object from the resident page 1
                      (engine/macros.asm):00108                 ; this object does not need or have a data structure for this routine
                      (engine/macros.asm):00109                 _MountObject \1
                      (engine/macros.asm):00110                 ldb   \2        
                      (engine/macros.asm):00111                 jsr   ,x
                      (engine/macros.asm):00112          ENDM
                      (engine/macros.asm):00113         
0000                  (engine/macros.asm):00114         _SwitchScreenBuffer MACRO
                      (engine/macros.asm):00115                 ldb   $E7E5
                      (engine/macros.asm):00116                 eorb  #1                       ; switch btw page 2 and 3
                      (engine/macros.asm):00117                 orb   #$02
                      (engine/macros.asm):00118                 stb   $E7E5
                      (engine/macros.asm):00119          ENDM
                      (engine/macros.asm):00120         
0000                  (engine/macros.asm):00121         _asld MACRO
                      (engine/macros.asm):00122                 aslb
                      (engine/macros.asm):00123                 rola
                      (engine/macros.asm):00124          ENDM        
                      (engine/macros.asm):00125          
0000                  (engine/macros.asm):00126         _asrd MACRO
                      (engine/macros.asm):00127                 asra
                      (engine/macros.asm):00128                 rorb
                      (engine/macros.asm):00129          ENDM      
                      (engine/macros.asm):00130          
0000                  (engine/macros.asm):00131         _lsld MACRO
                      (engine/macros.asm):00132                 lslb
                      (engine/macros.asm):00133                 rola
                      (engine/macros.asm):00134          ENDM        
                      (engine/macros.asm):00135          
0000                  (engine/macros.asm):00136         _lsrd MACRO
                      (engine/macros.asm):00137                 lsra
                      (engine/macros.asm):00138                 rorb
                      (engine/macros.asm):00139          ENDM
                      (engine/macros.asm):00140          
0000                  (engine/macros.asm):00141         _rold MACRO
                      (engine/macros.asm):00142                 rolb
                      (engine/macros.asm):00143                 rola
                      (engine/macros.asm):00144          ENDM    
                      (engine/macros.asm):00145          
0000                  (engine/macros.asm):00146         _rord MACRO
                      (engine/macros.asm):00147                 rora
                      (engine/macros.asm):00148                 rorb
                      (engine/macros.asm):00149          ENDM
                      (engine/macros.asm):00150         
0000                  (engine/macros.asm):00151         _negd MACRO
                      (engine/macros.asm):00152                 nega
                      (engine/macros.asm):00153                 negb
                      (engine/macros.asm):00154                 sbca  #0
                      (engine/macros.asm):00155          ENDM
                      (engine/macros.asm):00156         
0000                  (engine/macros.asm):00157         _cba MACRO
                      (engine/macros.asm):00158                 pshs  b
                      (engine/macros.asm):00159                 cmpa  ,s+
                      (engine/macros.asm):00160          ENDM
                      (engine/macros.asm):00161         
0000                  (engine/macros.asm):00162         _aba MACRO
                      (engine/macros.asm):00163                 pshs  b
                      (engine/macros.asm):00164                 adda  ,s+
                      (engine/macros.asm):00165          ENDM
                      (engine/macros.asm):00166         
0000                  (engine/macros.asm):00167         _sba MACRO
                      (engine/macros.asm):00168                 pshs  b
                      (engine/macros.asm):00169                 suba  ,s+
                      (engine/macros.asm):00170          ENDM
                      (engine/macros.asm):00171         
0000                  (engine/macros.asm):00172         _cab MACRO
                      (engine/macros.asm):00173                 pshs  a
                      (engine/macros.asm):00174                 cmpb  ,s+
                      (engine/macros.asm):00175          ENDM
                      (engine/macros.asm):00176         
0000                  (engine/macros.asm):00177         _aab MACRO
                      (engine/macros.asm):00178                 pshs  a
                      (engine/macros.asm):00179                 addb  ,s+
                      (engine/macros.asm):00180          ENDM
                      (engine/macros.asm):00181         
0000                  (engine/macros.asm):00182         _sab MACRO
                      (engine/macros.asm):00183                 pshs  a
                      (engine/macros.asm):00184                 subb  ,s+
                      (engine/macros.asm):00185          ENDM
                      (engine/macros.asm):00186         
0000                  (engine/macros.asm):00187         _breakpoint MACRO
                      (engine/macros.asm):00188          IFDEF DEBUG
                      (engine/macros.asm):00189                 pshs  CC
                      (engine/macros.asm):00190                 sta   >$ffff
                      (engine/macros.asm):00191                 puls  CC
                      (engine/macros.asm):00192          ENDC
                      (engine/macros.asm):00193          ENDM
                      (C:\Users\bhrou\gi):00016                 INCLUDE "engine/constants.asm"
                      (engine/constants.):00001         * ---------------------------------------------------------------------------
                      (engine/constants.):00002         * Constants
                      (engine/constants.):00003         *
                      (engine/constants.):00004         * Naming convention
                      (engine/constants.):00005         * -----------------
                      (engine/constants.):00006         * - lower case
                      (engine/constants.):00007         * - underscore-separated names
                      (engine/constants.):00008         *
                      (engine/constants.):00009         * ---------------------------------------------------------------------------
                      (engine/constants.):00010         
                      (engine/constants.):00011          ifndef constants.asm
     0001             (engine/constants.):00012         constants.asm equ 1
                      (engine/constants.):00013         
                      (engine/constants.):00014         * ===========================================================================
                      (engine/constants.):00015         * TO8 Registers
                      (engine/constants.):00016         * ===========================================================================
                      (engine/constants.):00017         
                      (engine/constants.):00018         ; Disk routine registers (ROM)
                      (engine/constants.):00019         
     6049             (engine/constants.):00020         dk_drive                      equ $6049
     604A             (engine/constants.):00021         dk_track                      equ $604A
     604B             (engine/constants.):00022         dk_track_lsb                  equ $604B
     604C             (engine/constants.):00023         dk_sector                     equ $604C
     604F             (engine/constants.):00024         dk_write_location             equ $604F
                      (engine/constants.):00025         
                      (engine/constants.):00026         * ===========================================================================
                      (engine/constants.):00027         * Globals
                      (engine/constants.):00028         * ===========================================================================
                      (engine/constants.):00029         
                      (engine/constants.):00030         ; WARNING - BuildSprite allow to cross $A000 limit by glb_camera_x_offset/4
                      (engine/constants.):00031         ; Graphics routines using S to write may cross by 12 bytes
                      (engine/constants.):00032         ; be sure to compile with enough margin here
     9FF4             (engine/constants.):00033         glb_ram_end                   equ $A000-12
                      (engine/constants.):00034         
                      (engine/constants.):00035         ; compilated sprite
     9FF2             (engine/constants.):00036         glb_register_s                equ glb_ram_end-2             ; reverved space to store S from ROM routines
                      (engine/constants.):00037         
                      (engine/constants.):00038         ; DrawSprites
     9FF0             (engine/constants.):00039         glb_screen_location_1         equ glb_register_s-2          ; start address for rendering of current sprite Part1     
     9FEE             (engine/constants.):00040         glb_screen_location_2         equ glb_screen_location_1-2   ; start address for rendering of current sprite Part2 (DEPENDENCY Must follow Part1)
                      (engine/constants.):00041         
     9FEC             (engine/constants.):00042         glb_camera_height             equ glb_screen_location_2-2
     9FEA             (engine/constants.):00043         glb_camera_width              equ glb_camera_height-2
     9FE8             (engine/constants.):00044         glb_camera_x_pos_coarse       equ glb_camera_width-2        ; ((glb_camera_x_pos - 64) / 64) * 64
     9FE6             (engine/constants.):00045         glb_camera_x_pos              equ glb_camera_x_pos_coarse-2 ; 16.8 camera x position in palyfield coordinates
     9FE5             (engine/constants.):00046         glb_camera_x_sub              equ glb_camera_x_pos-1        ; 
     9FE4             (engine/constants.):00047         glb_camera_y_pos              equ glb_camera_x_pos-2        ; 16.8 camera y position in palyfield coordinates
     9FE3             (engine/constants.):00048         glb_camera_y_sub              equ glb_camera_y_pos-1        ;
     9FE2             (engine/constants.):00049         glb_camera_x_min_pos          equ glb_camera_y_pos-2
     9FE0             (engine/constants.):00050         glb_camera_y_min_pos          equ glb_camera_x_min_pos-2
     9FDE             (engine/constants.):00051         glb_camera_x_max_pos          equ glb_camera_y_min_pos-2
     9FDC             (engine/constants.):00052         glb_camera_y_max_pos          equ glb_camera_x_max_pos-2
     9FDA             (engine/constants.):00053         glb_camera_x_offset           equ glb_camera_y_max_pos-2
     9FD8             (engine/constants.):00054         glb_camera_y_offset           equ glb_camera_x_offset-2
     9FD7             (engine/constants.):00055         glb_force_sprite_refresh      equ glb_camera_y_offset-1
     9FD6             (engine/constants.):00056         glb_camera_move               equ glb_force_sprite_refresh-1
     9FD5             (engine/constants.):00057         glb_alphaTiles                equ glb_camera_move-1
     9FD4             (engine/constants.):00058         glb_timer_second              equ glb_alphaTiles-1
     9FD3             (engine/constants.):00059         glb_timer_minute              equ glb_timer_second-1
     9FD3             (engine/constants.):00060         glb_timer                     equ glb_timer_minute
     9FD2             (engine/constants.):00061         glb_timer_frame               equ glb_timer-1
                      (engine/constants.):00062         
                      (engine/constants.):00063         ; BankSwitch
     9FD1             (engine/constants.):00064         glb_Page                      equ glb_timer_frame-1
     9FB3             (engine/constants.):00065         dp_engine                     equ glb_Page-30  ; engine routines tmp var space
     9F97             (engine/constants.):00066         dp_extreg                     equ dp_engine-28 ; extra register space (user and engine common)
     9F00             (engine/constants.):00067         dp                            equ $9F00        ; user space (149 bytes max)
     9F00             (engine/constants.):00068         glb_system_stack              equ dp
                      (engine/constants.):00069         
                      (engine/constants.):00070         ; generic direct page extra registers
                      (engine/constants.):00071         ; -----------------------------------
     9F97             (engine/constants.):00072         glb_d0   equ   dp_extreg
     9F98             (engine/constants.):00073         glb_d0_b equ   dp_extreg+1
                      (engine/constants.):00074         ; must be a free byte here for 24bits computation
     9F9A             (engine/constants.):00075         glb_d1   equ   dp_extreg+3
     9F9B             (engine/constants.):00076         glb_d1_b equ   dp_extreg+4
                      (engine/constants.):00077         ; must be a free byte here for 24bits computation
     9F9D             (engine/constants.):00078         glb_d2   equ   dp_extreg+6
     9F9E             (engine/constants.):00079         glb_d2_b equ   dp_extreg+7
                      (engine/constants.):00080         ; must be a free byte here for 24bits computation
     9FA0             (engine/constants.):00081         glb_d3   equ   dp_extreg+9
     9FA1             (engine/constants.):00082         glb_d3_b equ   dp_extreg+10
                      (engine/constants.):00083         ; must be a free byte here for 24bits computation
     9FA3             (engine/constants.):00084         glb_d4   equ   dp_extreg+12
     9FA4             (engine/constants.):00085         glb_d4_b equ   dp_extreg+13
     9FA5             (engine/constants.):00086         glb_d5   equ   dp_extreg+14
     9FA6             (engine/constants.):00087         glb_d5_b equ   dp_extreg+15
     9FA7             (engine/constants.):00088         glb_d6   equ   dp_extreg+16
     9FA8             (engine/constants.):00089         glb_d6_b equ   dp_extreg+17
     9FA9             (engine/constants.):00090         glb_a0   equ   dp_extreg+18
     9FAA             (engine/constants.):00091         glb_a0_b equ   dp_extreg+19
     9FAB             (engine/constants.):00092         glb_a1   equ   dp_extreg+20
     9FAC             (engine/constants.):00093         glb_a1_b equ   dp_extreg+21
     9FAD             (engine/constants.):00094         glb_a2   equ   dp_extreg+22
     9FAE             (engine/constants.):00095         glb_a2_b equ   dp_extreg+23
     9FAF             (engine/constants.):00096         glb_a3   equ   dp_extreg+24
     9FB0             (engine/constants.):00097         glb_a3_b equ   dp_extreg+25
     9FB1             (engine/constants.):00098         glb_a4   equ   dp_extreg+26
     9FB2             (engine/constants.):00099         glb_a4_b equ   dp_extreg+27
                      (engine/constants.):00100         
                      (engine/constants.):00101         * ===========================================================================
                      (engine/constants.):00102         * Display Constants
                      (engine/constants.):00103         * ===========================================================================
                      (engine/constants.):00104         
     00A0             (engine/constants.):00105         screen_width                  equ 160             ; in pixel
     00C8             (engine/constants.):00106         screen_height                 equ 200             ; in pixel
     001C             (engine/constants.):00107         screen_top                    equ (256-200)/2     ; in pixel
     00E3             (engine/constants.):00108         screen_bottom                 equ screen_top+199  ; in pixel
     0030             (engine/constants.):00109         screen_left                   equ (256-160)/2     ; in pixel
     00CF             (engine/constants.):00110         screen_right                  equ screen_left+159 ; in pixel
     0008             (engine/constants.):00111         nb_priority_levels            equ 8               ; number of priority levels (need code change if modified)
                      (engine/constants.):00112         
                      (engine/constants.):00113         * ===========================================================================
                      (engine/constants.):00114         * Images Constants
                      (engine/constants.):00115         * ===========================================================================
                      (engine/constants.):00116         
     0004             (engine/constants.):00117         image_x_size                  equ 4
     0005             (engine/constants.):00118         image_y_size                  equ 5
     0006             (engine/constants.):00119         image_center_offset           equ 6
                      (engine/constants.):00120         
     0004             (engine/constants.):00121         image_subset_x1_offset        equ 4
     0005             (engine/constants.):00122         image_subset_y1_offset        equ 5
                      (engine/constants.):00123         
     0000             (engine/constants.):00124         page_draw_routine             equ 0
     0001             (engine/constants.):00125         draw_routine                  equ 1
     0003             (engine/constants.):00126         page_erase_routine            equ 3
     0004             (engine/constants.):00127         erase_routine                 equ 4
     0006             (engine/constants.):00128         erase_nb_cell                 equ 6
                      (engine/constants.):00129         
                      (engine/constants.):00130         * ===========================================================================
                      (engine/constants.):00131         * Sound Constants
                      (engine/constants.):00132         * ===========================================================================
                      (engine/constants.):00133         
     0000             (engine/constants.):00134         sound_page        equ 0
     0001             (engine/constants.):00135         sound_start_addr  equ 1
     0003             (engine/constants.):00136         sound_end_addr    equ 3
     0005             (engine/constants.):00137         sound_meta_size   equ 5
                      (engine/constants.):00138         
                      (engine/constants.):00139         * ===========================================================================
                      (engine/constants.):00140         * Object Constants
                      (engine/constants.):00141         * ===========================================================================
                      (engine/constants.):00142         
                      (engine/constants.):00143         ; ext_variables_size should be declared in game source code
                      (engine/constants.):00144         
     0026             (engine/constants.):00145         object_base_size              equ 38  ; the size of an object without rsvd and ext_vars
                      (engine/constants.):00146          ifndef OverlayMode
     003B             (engine/constants.):00147         object_rsvd_size              equ 59
                      (engine/constants.):00148          else
0000                  (engine/constants.):00149         object_rsvd_size              equ 5
                      (engine/constants.):00150          endc
                      (engine/constants.):00151         
     ????             (engine/constants.):00152         object_rsvd                   equ object_base_size+ext_variables_size
     ????             (engine/constants.):00153         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     ????             (engine/constants.):00154         next_object                   equ object_size
     0026             (engine/constants.):00155         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (engine/constants.):00156         
     0000             (engine/constants.):00157         id                            equ 0   ; reference to object model id (ObjID_) (0: free slot)
     0001             (engine/constants.):00158         subtype                       equ 1   ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0001             (engine/constants.):00159         subtype_w                     equ 1   ; reference to object subtype (Sub_) takes 2 bytes and overlap render_flags DEPENDENCY subtype must follow id
     0002             (engine/constants.):00160         render_flags                  equ 2
     0003             (engine/constants.):00161         run_object_prev               equ 3   ; previous object to update when deleting current object
     0005             (engine/constants.):00162         run_object_next               equ 5   ; next object to run by RunObjects
                      (engine/constants.):00163         
                      (engine/constants.):00164          ifndef OverlayMode
                      (engine/constants.):00165         * --- render_flags bitfield variables --- background erase pack
     0001             (engine/constants.):00166         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (engine/constants.):00167         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
     0004             (engine/constants.):00168         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
     0008             (engine/constants.):00169         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (engine/constants.):00170         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (engine/constants.):00171         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
     0040             (engine/constants.):00172         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (engine/constants.):00173         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (engine/constants.):00174          else
                      (engine/constants.):00175         ; --- render_flags bitfield variables --- overlay pack
0000                  (engine/constants.):00176         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
0000                  (engine/constants.):00177         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
                      (engine/constants.):00178         
0000                  (engine/constants.):00179         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
0000                  (engine/constants.):00180         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
0000                  (engine/constants.):00181         render_no_range_ctrl_mask     equ $20 ; (bit 5) tell display engine to skip out of range controls (this may lead to memory corruption BEWARE)
0000                  (engine/constants.):00182         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
0000                  (engine/constants.):00183         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (engine/constants.):00184          endc
                      (engine/constants.):00185         
     0007             (engine/constants.):00186         priority                      equ 7           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0008             (engine/constants.):00187         anim                          equ 8  ; and 9  ; reference to current animation (Ani_)
     000A             (engine/constants.):00188         prev_anim                     equ 10 ; and 11 ; reference to previous animation (Ani_)
     000A             (engine/constants.):00189         sub_anim                      equ 10 ; and 11 ; reference to sub animation
     000C             (engine/constants.):00190         anim_frame                    equ 12          ; index of current frame in animation
     000D             (engine/constants.):00191         anim_frame_duration           equ 13          ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000E             (engine/constants.):00192         anim_flags                    equ 14          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (engine/constants.):00193         
                      (engine/constants.):00194         * --- anim_flags bitfield variables ---
     0004             (engine/constants.):00195         anim_link_mask                equ $04 ; (bit 2) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (engine/constants.):00196         
     000E             (engine/constants.):00197         status_flags                  equ 14          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (engine/constants.):00198         
                      (engine/constants.):00199         * --- status_flags bitfield variables ---
     0001             (engine/constants.):00200         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (engine/constants.):00201         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (engine/constants.):00202         
     0010             (engine/constants.):00203         image_set                     equ 16 ; and 17 ; reference to current image (Img_) (0000 if no image)
     0012             (engine/constants.):00204         x_pos                         equ 18 ; and 19 ; x playfield coordinate
     0014             (engine/constants.):00205         x_sub                         equ 20          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0015             (engine/constants.):00206         y_pos                         equ 21 ; and 22 ; y playfield coordinate
     0017             (engine/constants.):00207         y_sub                         equ 23          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0018             (engine/constants.):00208         xy_pixel                      equ 24          ; x and y screen coordinate
     0018             (engine/constants.):00209         x_pixel                       equ 24          ; x screen coordinate
     0019             (engine/constants.):00210         y_pixel                       equ 25          ; y screen coordinate, must follow x_pixel
     001A             (engine/constants.):00211         x_vel                         equ 26 ; and 27 ; s8.8 horizontal velocity
     001C             (engine/constants.):00212         y_vel                         equ 28 ; and 29 ; s8.8 vertical velocity
     001E             (engine/constants.):00213         x_acl                         equ 30 ; and 31 ; s8.8 horizontal gravity
     0020             (engine/constants.):00214         y_acl                         equ 32 ; and 33 ; s8.8 vertical gravity
     0022             (engine/constants.):00215         routine                       equ 34          ; index of current object routine
     0023             (engine/constants.):00216         routine_secondary             equ 35          ; index of current secondary routine
     0024             (engine/constants.):00217         routine_tertiary              equ 36          ; index of current tertiary routine
     0025             (engine/constants.):00218         routine_quaternary            equ 37          ; index of current quaternary routine
                      (engine/constants.):00219         
                      (engine/constants.):00220          ifndef OverlayMode
                      (engine/constants.):00221         * ---------------------------------------------------------------------------
                      (engine/constants.):00222         * reserved variables (read/write by engine)
                      (engine/constants.):00223         
     ????             (engine/constants.):00224         rsv_render_flags              equ object_rsvd
                      (engine/constants.):00225         
                      (engine/constants.):00226         * --- rsv_render_flags bitfield variables ---
     0001             (engine/constants.):00227         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
     0002             (engine/constants.):00228         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
     0004             (engine/constants.):00229         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
     0008             (engine/constants.):00230         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
     0080             (engine/constants.):00231         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (engine/constants.):00232         
     ????             (engine/constants.):00233         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
     ????             (engine/constants.):00234         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
     ????             (engine/constants.):00235         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
     ????             (engine/constants.):00236         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
     ????             (engine/constants.):00237         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
     ????             (engine/constants.):00238         rsv_page_draw_routine         equ object_rsvd+9 ; b
     ????             (engine/constants.):00239         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
     ????             (engine/constants.):00240         rsv_page_erase_routine        equ object_rsvd+12 ; b
     ????             (engine/constants.):00241         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
     ????             (engine/constants.):00242         rsv_xy1_pixel                 equ object_rsvd+15 ;
     ????             (engine/constants.):00243         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
     ????             (engine/constants.):00244         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
     ????             (engine/constants.):00245         rsv_xy2_pixel                 equ object_rsvd+17 ;
     ????             (engine/constants.):00246         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
     ????             (engine/constants.):00247         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (engine/constants.):00248         
                      (engine/constants.):00249         * ---------------------------------------------------------------------------
                      (engine/constants.):00250         * reserved variables (engine) - buffer specific
                      (engine/constants.):00251         
     ????             (engine/constants.):00252         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
     ????             (engine/constants.):00253         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
     ????             (engine/constants.):00254         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (engine/constants.):00255         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (engine/constants.):00256         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and +25 ; reference to previous image in video buffer 0 w
     ????             (engine/constants.):00257         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
     ????             (engine/constants.):00258         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
     ????             (engine/constants.):00259         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and +29 ; w
     ????             (engine/constants.):00260         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
     ????             (engine/constants.):00261         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
     ????             (engine/constants.):00262         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
     ????             (engine/constants.):00263         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00264         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
     ????             (engine/constants.):00265         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
     ????             (engine/constants.):00266         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
     ????             (engine/constants.):00267         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
     ????             (engine/constants.):00268         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
     ????             (engine/constants.):00269         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
     ????             (engine/constants.):00270         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (engine/constants.):00271         * --- rsv_prev_render_flags_0 bitfield variables ---
     0001             (engine/constants.):00272         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
     0080             (engine/constants.):00273         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (engine/constants.):00274         
     ????             (engine/constants.):00275         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
     ????             (engine/constants.):00276         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
     ????             (engine/constants.):00277         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (engine/constants.):00278         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (engine/constants.):00279         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
     ????             (engine/constants.):00280         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
     ????             (engine/constants.):00281         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
     ????             (engine/constants.):00282         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
     ????             (engine/constants.):00283         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
     ????             (engine/constants.):00284         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
     ????             (engine/constants.):00285         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
     ????             (engine/constants.):00286         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00287         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
     ????             (engine/constants.):00288         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
     ????             (engine/constants.):00289         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00290         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
     ????             (engine/constants.):00291         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
     ????             (engine/constants.):00292         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (engine/constants.):00293         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (engine/constants.):00294         
     0000             (engine/constants.):00295         buf_priority                  equ 0  ; offset for each rsv_buffer variables
     0001             (engine/constants.):00296         buf_priority_prev_obj         equ 1  ;
     0003             (engine/constants.):00297         buf_priority_next_obj         equ 3  ;
     0005             (engine/constants.):00298         buf_prev_mapping_frame        equ 5  ;
     0007             (engine/constants.):00299         buf_erase_nb_cell             equ 7  ;
     0008             (engine/constants.):00300         buf_page_erase_routine        equ 8 ;
     0009             (engine/constants.):00301         buf_erase_routine             equ 9 ;
     000B             (engine/constants.):00302         buf_bgdata                    equ 11 ;
     000D             (engine/constants.):00303         buf_prev_xy_pixel             equ 13 ;
     000D             (engine/constants.):00304         buf_prev_x_pixel              equ 13 ;
     000E             (engine/constants.):00305         buf_prev_y_pixel              equ 14 ;
     000F             (engine/constants.):00306         buf_prev_xy1_pixel            equ 15 ;
     000F             (engine/constants.):00307         buf_prev_x1_pixel             equ 15 ;
     0010             (engine/constants.):00308         buf_prev_y1_pixel             equ 16 ;
     0011             (engine/constants.):00309         buf_prev_xy2_pixel            equ 17 ;
     0011             (engine/constants.):00310         buf_prev_x2_pixel             equ 17 ;
     0012             (engine/constants.):00311         buf_prev_y2_pixel             equ 18 ;
     0013             (engine/constants.):00312         buf_prev_render_flags         equ 19 ;
                      (engine/constants.):00313          else
                      (engine/constants.):00314         * ---------------------------------------------------------------------------
                      (engine/constants.):00315         * reserved variables (engine) - buffer specific - overlay pack
                      (engine/constants.):00316         
0000                  (engine/constants.):00317         rsv_priority                  equ object_rsvd   ; internal value that hold priority in video buffer 0
0000                  (engine/constants.):00318         rsv_priority_prev_obj         equ object_rsvd+1 ; and +2 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (engine/constants.):00319         rsv_priority_next_obj         equ object_rsvd+3 ; and +4 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
                      (engine/constants.):00320         
                      (engine/constants.):00321         ; ---------------------------------------------------------------------------
                      (engine/constants.):00322         ; when childsprites are activated (i.e. bit #6 of render_flags set)
                      (engine/constants.):00323         ; object_base_size+ext_variables_size should cover at least 7+56 bytes 
                      (engine/constants.):00324         ; subtype is recovered
0000                  (engine/constants.):00325         mainspr_childsprites    equ   subtype         ; amount of child sprites
0000                  (engine/constants.):00326         mainspr_width           equ   run_object_next+2
0000                  (engine/constants.):00327         mainspr_height          equ   run_object_next+3
0000                  (engine/constants.):00328         mainspr_x_pos           equ   mainspr_height+1
0000                  (engine/constants.):00329         mainspr_y_pos           equ   mainspr_height+3
0000                  (engine/constants.):00330         mainspr_mapframe        equ   mainspr_height+5
0000                  (engine/constants.):00331         sub2_x_pos              equ   mainspr_x_pos+6
0000                  (engine/constants.):00332         sub2_y_pos              equ   mainspr_y_pos+6
0000                  (engine/constants.):00333         sub2_mapframe           equ   mainspr_mapframe+6
0000                  (engine/constants.):00334         sub3_x_pos              equ   sub2_x_pos+6
0000                  (engine/constants.):00335         sub3_y_pos              equ   sub2_y_pos+6
0000                  (engine/constants.):00336         sub3_mapframe           equ   sub2_mapframe+6
0000                  (engine/constants.):00337         sub4_x_pos              equ   sub3_x_pos+6
0000                  (engine/constants.):00338         sub4_y_pos              equ   sub3_y_pos+6
0000                  (engine/constants.):00339         sub4_mapframe           equ   sub3_mapframe+6
0000                  (engine/constants.):00340         sub5_x_pos              equ   sub4_x_pos+6
0000                  (engine/constants.):00341         sub5_y_pos              equ   sub4_y_pos+6
0000                  (engine/constants.):00342         sub5_mapframe           equ   sub4_mapframe+6
0000                  (engine/constants.):00343         sub6_x_pos              equ   sub5_x_pos+6
0000                  (engine/constants.):00344         sub6_y_pos              equ   sub5_y_pos+6
0000                  (engine/constants.):00345         sub6_mapframe           equ   sub5_mapframe+6
0000                  (engine/constants.):00346         sub7_x_pos              equ   sub6_x_pos+6
0000                  (engine/constants.):00347         sub7_y_pos              equ   sub6_y_pos+6
0000                  (engine/constants.):00348         sub7_mapframe           equ   sub6_mapframe+6
0000                  (engine/constants.):00349         sub8_x_pos              equ   sub7_x_pos+6
0000                  (engine/constants.):00350         sub8_y_pos              equ   sub7_y_pos+6
0000                  (engine/constants.):00351         sub8_mapframe           equ   sub7_mapframe+6
0000                  (engine/constants.):00352         sub9_x_pos              equ   sub8_x_pos+6
0000                  (engine/constants.):00353         sub9_y_pos              equ   sub8_y_pos+6
0000                  (engine/constants.):00354         sub9_mapframe           equ   sub8_mapframe+6
0000                  (engine/constants.):00355         next_subspr             equ   6 ; size of a subsprite data
                      (engine/constants.):00356          endc
                      (engine/constants.):00357          endc
                      (C:\Users\bhrou\gi):00017                 INCLUDE "engine/system/to8/map.const.asm"
                      (engine/system/to8):00001         ; Thomson TO8 - Memory map
                      (engine/system/to8):00002         
                      (engine/system/to8):00003         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00004         ; system addresses
                      (engine/system/to8):00005         
                      (engine/system/to8):00006         ; mc6846
     E7C0             (engine/system/to8):00007         map.MC6846.CSR      equ $E7C0
     E7C1             (engine/system/to8):00008         map.MC6846.CRC      equ $E7C1
     E7C2             (engine/system/to8):00009         map.MC6846.DDRC     equ $E7C2
     E7C3             (engine/system/to8):00010         map.MC6846.PRC      equ $E7C3 ; (bit0) set half ram page 0 (low or high) in video area ($4000-$5FFF)
     E7C4             (engine/system/to8):00011         map.MC6846.CSR2     equ $E7C4
     E7C5             (engine/system/to8):00012         map.MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (engine/system/to8):00013         map.MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (engine/system/to8):00014         map.MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (engine/system/to8):00015         
                      (engine/system/to8):00016         ; mc6821 system
     E7C8             (engine/system/to8):00017         map.MC6821.PRA      equ $E7C8
     E7C9             (engine/system/to8):00018         map.MC6821.PRB      equ $E7C9
     E7CA             (engine/system/to8):00019         map.MC6821.CRA      equ $E7CA
     E7CB             (engine/system/to8):00020         map.MC6821.CRB      equ $E7CB
                      (engine/system/to8):00021         
                      (engine/system/to8):00022         ; mc6821 music and game
     E7CC             (engine/system/to8):00023         map.MC6821.PRA1     equ $E7CC
     E7CD             (engine/system/to8):00024         map.MC6821.PRA2     equ $E7CD
     E7CE             (engine/system/to8):00025         map.MC6821.CRA1     equ $E7CE
     E7CF             (engine/system/to8):00026         map.MC6821.CRA2     equ $E7CF
                      (engine/system/to8):00027         
                      (engine/system/to8):00028         ; thmfc01 gate controler floppy disk
     E7D0             (engine/system/to8):00029         map.THMFC01.STAT0   equ $E7D0
     E7D0             (engine/system/to8):00030         map.THMFC01.CMD0    equ $E7D0
     E7D1             (engine/system/to8):00031         map.THMFC01.STAT1   equ $E7D1
     E7D1             (engine/system/to8):00032         map.THMFC01.CMD1    equ $E7D1
     E7D2             (engine/system/to8):00033         map.THMFC01.CMD2    equ $E7D2
     E7D3             (engine/system/to8):00034         map.THMFC01.WDATA   equ $E7D3
     E7D3             (engine/system/to8):00035         map.THMFC01.RDATA   equ $E7D3
     E7D4             (engine/system/to8):00036         map.THMFC01.WCLK    equ $E7D4
     E7D5             (engine/system/to8):00037         map.THMFC01.WSECT   equ $E7D5
     E7D6             (engine/system/to8):00038         map.THMFC01.TRCK    equ $E7D6
     E7D7             (engine/system/to8):00039         map.THMFC01.CELL    equ $E7D7
                      (engine/system/to8):00040         
                      (engine/system/to8):00041         ; ef9369 palette
     E7DA             (engine/system/to8):00042         map.EF9369.D        equ $E7DA
     E7DB             (engine/system/to8):00043         map.EF9369.A        equ $E7DB
                      (engine/system/to8):00044         
                      (engine/system/to8):00045         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (engine/system/to8):00046         map.CF74021.LGAMOD  equ $E7DC
     E7DD             (engine/system/to8):00047         map.CF74021.SYS2    equ $E7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     E7E4             (engine/system/to8):00048         map.CF74021.COM     equ $E7E4
     E7E5             (engine/system/to8):00049         map.CF74021.DATA    equ $E7E5 ; (bit0-4) set ram page in data area ($A000-$DFFF)
     E7E6             (engine/system/to8):00050         map.CF74021.CART    equ $E7E6 ; (bit0-4) set page in cartridge area ($0000-$3FFF), (bit5) set ram over cartridge, (bit6) enable write
     E7E7             (engine/system/to8):00051         map.CF74021.SYS1    equ $E7E7 ; (bit4) set ram over data area
                      (engine/system/to8):00052         
                      (engine/system/to8):00053         ; extension port
     00E7             (engine/system/to8):00054         map.EXTPORT         equ $E7
     E7F0             (engine/system/to8):00055         map.IEEE488         equ $E7F0 ; to E7F7
     E7F2             (engine/system/to8):00056         map.EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (engine/system/to8):00057         map.EF5860.TX       equ $E7F3 ; MIDI
                      (engine/system/to8):00058          ifndef SOUND_CARD_PROTOTYPE
     E7FC             (engine/system/to8):00059         map.YM2413.A        equ $E7FC
     E7FD             (engine/system/to8):00060         map.YM2413.D        equ $E7FD
     E7F7             (engine/system/to8):00061         map.SN76489.D       equ $E7F7
                      (engine/system/to8):00062          else
0000                  (engine/system/to8):00063         map.YM2413.A        equ $E7FC
0000                  (engine/system/to8):00064         map.YM2413.D        equ $E7FD
0000                  (engine/system/to8):00065         map.SN76489.D       equ $E7FF
                      (engine/system/to8):00066          endc
     E7FE             (engine/system/to8):00067         map.MEA8000.D       equ $E7FE
     E7FF             (engine/system/to8):00068         map.MEA8000.A       equ $E7FF
                      (engine/system/to8):00069         
                      (engine/system/to8):00070         ; ROM routines
     E004             (engine/system/to8):00071         map.DKCONT          equ $E004 ; TO:DKCO, MO:SWI $26
     E007             (engine/system/to8):00072         map.DKBOOT          equ $E007 ; boot
     E00A             (engine/system/to8):00073         map.DKFMT           equ $E00A ; format
     E00D             (engine/system/to8):00074         map.LECFA           equ $E00D ; read FAT
     E010             (engine/system/to8):00075         map.RECFI           equ $E010 ; search file
     E010             (engine/system/to8):00076         map.RECUP           equ $E010 ; clear file
     E010             (engine/system/to8):00077         map.ECRSE           equ $E010 ; sector write
     E019             (engine/system/to8):00078         map.ALLOD           equ $E019 ; catalog file allocation
     E01C             (engine/system/to8):00079         map.ALLOB           equ $E01C ; bloc allocation
     E01F             (engine/system/to8):00080         map.MAJCL           equ $E01F ; cluster update
     E022             (engine/system/to8):00081         map.FINTR           equ $E022 ; transfert end
     E025             (engine/system/to8):00082         map.QDDSTD          equ $E025 ; QDD std functions
     E028             (engine/system/to8):00083         map.QDDSYS          equ $E028 ; QDD sys functions
                      (engine/system/to8):00084         
     E803             (engine/system/to8):00085         map.PUTC            equ $E803
     E806             (engine/system/to8):00086         map.GETC            equ $E806
     E809             (engine/system/to8):00087         map.KTST            equ $E809
     E82A             (engine/system/to8):00088         map.DKCO            equ $E82A ; read or write floppy disk routine
     E830             (engine/system/to8):00089         map.IRQ.EXIT        equ $E830 ; to exit an irq
                      (engine/system/to8):00090         
                      (engine/system/to8):00091         ; system variables
     6019             (engine/system/to8):00092         map.STATUS          equ $6019 ; status bitfield
     6048             (engine/system/to8):00093         map.DK.OPC          equ $6048 ; operation
     6049             (engine/system/to8):00094         map.DK.DRV          equ $6049 ; drive
     604C             (engine/system/to8):00095         map.DK.SEC          equ $604C ; sector
     604A             (engine/system/to8):00096         map.DK.TRK          equ $604A ; $604B ; track
     604E             (engine/system/to8):00097         map.DK.STA          equ $604E ; return status
     604F             (engine/system/to8):00098         map.DK.BUF          equ $604F ; $6050 ; data write location
     6023             (engine/system/to8):00099         map.FIRQPT          equ $6023 ; routine firq
     6027             (engine/system/to8):00100         map.TIMERPT         equ $6027 ; routine irq timer
     6081             (engine/system/to8):00101         map.CF74021.SYS1.R  equ $6081 ; reading value for map.CF74021.SYS1
                      (engine/system/to8):00102         
                      (engine/system/to8):00103         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00104         ; constants
                      (engine/system/to8):00105         
     0035             (engine/system/to8):00106         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (engine/system/to8):00107         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (engine/system/to8):00108         map.IRQ.ONE_FRAME     equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (engine/system/to8):00109         
                      (engine/system/to8):00110         ; -----------------------------------------------------------------------------
                      (engine/system/to8):00111         ; mapping to generic names
                      (engine/system/to8):00112         
     E7CD             (engine/system/to8):00113         map.DAC            equ map.MC6821.PRA2
     E7C6             (engine/system/to8):00114         map.RND            equ map.MC6846.TMSB
                      (C:\Users\bhrou\gi):00018                 INCLUDE "new-engine/system/to8/bootloader/loader.const.asm"
                      (new-engine/system):00001          IFNDEF loader.PAGE
0000                  (new-engine/system):00002         loader.PAGE equ 4
                      (new-engine/system):00003          ENDC
                      (new-engine/system):00004         
                      (new-engine/system):00005          IFNDEF loader.ADDRESS
0000                  (new-engine/system):00006         loader.ADDRESS equ $A000
                      (new-engine/system):00007          ENDC
                      (new-engine/system):00008         
                      (new-engine/system):00009          IFNDEF loader.DEFAULT_DYNAMIC_MEMORY_SIZE
0000                  (new-engine/system):00010         loader.DEFAULT_DYNAMIC_MEMORY_SIZE equ loader.ADDRESS-loader.memoryPool+$4000
                      (new-engine/system):00011          ENDC
                      (new-engine/system):00012         
                      (new-engine/system):00013          IFNDEF loader.DEFAULT_SCENE_DIR_ID
0000                  (new-engine/system):00014         loader.DEFAULT_SCENE_DIR_ID equ 0
                      (new-engine/system):00015          ENDC
                      (new-engine/system):00016         
                      (new-engine/system):00017          IFNDEF loader.DEFAULT_SCENE_FILE_ID
0000                  (new-engine/system):00018         loader.DEFAULT_SCENE_FILE_ID equ 0
                      (new-engine/system):00019          ENDC
                      (new-engine/system):00020         
                      (new-engine/system):00021          IFNDEF loader.DEFAULT_SCENE_ENTRY_POINT
0000                  (new-engine/system):00022         loader.DEFAULT_SCENE_ENTRY_POINT equ $6100
                      (new-engine/system):00023          ENDC
                      (C:\Users\bhrou\gi):00019         
                      (C:\Users\bhrou\gi):00020         ; directory structure
                      (C:\Users\bhrou\gi):00021         ; -------------------
                      (C:\Users\bhrou\gi):00022         dirheader STRUCT
0000s                 (C:\Users\bhrou\gi):00023         tag     rmb types.BYTE*3 ; [I] [D] [X]
0003s                 (C:\Users\bhrou\gi):00024         diskid  rmb types.BYTE   ; [0000 0000]              - [disk id 0-255]
0004s                 (C:\Users\bhrou\gi):00025         nsector rmb types.BYTE   ; [0000 0000]              - [nb of sectors for direntries]
0005s                 (C:\Users\bhrou\gi):00026                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00027         
                      (C:\Users\bhrou\gi):00028         ; direntry main structure
                      (C:\Users\bhrou\gi):00029         ; -----------------------
                      (C:\Users\bhrou\gi):00030         direntry STRUCT
0000s                 (C:\Users\bhrou\gi):00031         bitfld   rmb 0            ; alias to bitfld
0000s                 (C:\Users\bhrou\gi):00032         sizeu    rmb types.WORD   ; [0]                     - [compression 0:none, 1:packed]
                      (C:\Users\bhrou\gi):00033                                   ; [0]                     - [load time linker 0:no, 1:yes]
                      (C:\Users\bhrou\gi):00034                                   ; [00 0000] [0000 0000]   - [uncompressed file size -1]
0002s                 (C:\Users\bhrou\gi):00035         track    rmb types.BYTE   ; [0000 000]              - [track 0-128]
                      (C:\Users\bhrou\gi):00036                                   ; [0]                     - [face 0-1]
0003s                 (C:\Users\bhrou\gi):00037         sector   rmb types.BYTE   ; [0000 0000]             - [sector 0-255]
0004s                 (C:\Users\bhrou\gi):00038         sizea    rmb types.BYTE   ; [0000 0000]             - [bytes in first sector ($ff00 : empty file)]
0005s                 (C:\Users\bhrou\gi):00039         offseta  rmb types.BYTE   ; [0000 0000]             - [start offset in first sector (0: no sector)]
0006s                 (C:\Users\bhrou\gi):00040         nsector  rmb types.BYTE   ; [0000 0000]             - [full sectors to read]
0007s                 (C:\Users\bhrou\gi):00041         sizez    rmb types.BYTE   ; [0000 0000]             - [bytes in last sector (0: no sector)]
                      (C:\Users\bhrou\gi):00042         
                      (C:\Users\bhrou\gi):00043         ; direntry compressor structure
                      (C:\Users\bhrou\gi):00044         ; -----------------------------
0008s                 (C:\Users\bhrou\gi):00045         coffset  rmb types.WORD   ; [0000 0000] [0000 0000] - [offset to compressed data]
000As                 (C:\Users\bhrou\gi):00046         cdataz   rmb types.BYTE*6 ; [0000 0000]             - [last 6 bytes of uncompressed file data]
                      (C:\Users\bhrou\gi):00047         
                      (C:\Users\bhrou\gi):00048         ; direntry linker structure
                      (C:\Users\bhrou\gi):00049         ; -------------------------
0010s                 (C:\Users\bhrou\gi):00050         lsize    rmb types.BYTE   ; [0000 0000] [0000 0000] - [linker data size]
0011s                 (C:\Users\bhrou\gi):00051         ltrack   rmb types.BYTE   ; [0000 000]              - [track 0-128]
                      (C:\Users\bhrou\gi):00052                                   ; [0]                     - [face 0-1]
0012s                 (C:\Users\bhrou\gi):00053         lsector  rmb types.BYTE   ; [0000 0000]             - [sector 0-255]
0013s                 (C:\Users\bhrou\gi):00054         lsizea   rmb types.BYTE   ; [0000 0000]             - [bytes in first sector]
0014s                 (C:\Users\bhrou\gi):00055         loffseta rmb types.BYTE   ; [0000 0000]             - [start offset in first sector (0: no sector)]
0015s                 (C:\Users\bhrou\gi):00056         lnsector rmb types.BYTE   ; [0000 0000]             - [full sectors to read]
0016s                 (C:\Users\bhrou\gi):00057         lsizez   rmb types.BYTE   ; [0000 0000]             - [bytes in last sector (0: no sector)]
0017s                 (C:\Users\bhrou\gi):00058                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00059         
                      (C:\Users\bhrou\gi):00060                 org   loader.ADDRESS
A000 7EA622           (C:\Users\bhrou\gi):00061                 jmp   >loader.scene.loadDefault  ; OK
A003 7EA671           (C:\Users\bhrou\gi):00062                 jmp   >loader.scene.apply        ; OK
A006 7EA736           (C:\Users\bhrou\gi):00063                 jmp   >loader.dir.load           ; OK
A009 7EA7EE           (C:\Users\bhrou\gi):00064                 jmp   >loader.file.load          ; OK
A00C 7EA650           (C:\Users\bhrou\gi):00065                 jmp   >loader.file.malloc        ; OK
A00F 7EA8A7           (C:\Users\bhrou\gi):00066                 jmp   >loader.file.unload        ; TODO
                      (C:\Users\bhrou\gi):00067         
                      (C:\Users\bhrou\gi):00068         ; callbacks that can be modified by user at runtime
A012 7EA893           (C:\Users\bhrou\gi):00069         error   jmp   >dskerr     ; Called if a read error is detected
A015 7EA856           (C:\Users\bhrou\gi):00070         pulse   jmp   >return     ; Called after each sector read (ex. for progress bar)
                      (C:\Users\bhrou\gi):00071         
                      (C:\Users\bhrou\gi):00072                 INCLUDE   "new-engine/memory/tlsf.asm"
                      (new-engine/memory):00001         ;-----------------------------------------------------------------
                      (new-engine/memory):00002         ; TLSF (Two Level Segregated Fit) - 16bit
                      (new-engine/memory):00003         ; single RAM page only
                      (new-engine/memory):00004         ;-----------------------------------------------------------------
                      (new-engine/memory):00005         ; Benoit Rousseau - 22/08/2023
                      (new-engine/memory):00006         ; Based on http://www.gii.upv.es/tlsf/files/spe_2008.pdf
                      (new-engine/memory):00007         ; Written for LWASM assembler http://www.lwtools.ca/
                      (new-engine/memory):00008         ;
                      (new-engine/memory):00009         ;-----------------------------------------------------------------
                      (new-engine/memory):00010         
                      (new-engine/memory):00011          opt c
                      (new-engine/memory):00012         
                      (new-engine/memory):00013          INCLUDE "new-engine/constant/types.const.asm"
                      (new-engine/consta):00001          IFNDEF types.const.asm
A018                  (new-engine/consta):00002         types.const.asm  equ 1
                      (new-engine/consta):00003         
A018                  (new-engine/consta):00004         types.BYTE      equ 1
A018                  (new-engine/consta):00005         types.BYTE_BITS equ 8*types.BYTE
A018                  (new-engine/consta):00006         types.WORD      equ 2*types.BYTE
A018                  (new-engine/consta):00007         types.WORD_BITS equ 8*types.WORD
                      (new-engine/consta):00008          ENDC
                      (new-engine/memory):00014         
                      (new-engine/memory):00015         ; tlsf structure
                      (new-engine/memory):00016         ; --------------
                      (new-engine/memory):00017         
                      (new-engine/memory):00018         tlsf.blockHdr STRUCT
0000s                 (new-engine/memory):00019         size      rmb types.WORD ; (FREE/USED) [0] [000 0000 0000 0000] - [1:free/0:used] [free size - 1]
0002s                 (new-engine/memory):00020         prev.phys rmb types.WORD ; (FREE/USED) [0000 0000 0000 0000]    - [previous physical block in memory]
0004s                 (new-engine/memory):00021         prev      rmb types.WORD ; (FREE)      [0000 0000 0000 0000]    - [previous block in free list]
0006s                 (new-engine/memory):00022         next      rmb types.WORD ; (FREE)      [0000 0000 0000 0000]    - [next block in free list]
0008s                 (new-engine/memory):00023          ENDSTRUCT
                      (new-engine/memory):00024         
                      (new-engine/memory):00025         ; tlsf configuration
                      (new-engine/memory):00026         ; -----------------------
     0000             (new-engine/memory):00027         tlsf.PAD_BITS         equ   0  ; non significant rightmost bits
     0004             (new-engine/memory):00028         tlsf.SL_BITS          equ   4  ; significant bits for second level index
                      (new-engine/memory):00029         
                      (new-engine/memory):00030         ; tlsf constants
                      (new-engine/memory):00031         ; -----------------------
     000C             (new-engine/memory):00032         tlsf.FL_BITS            equ   types.WORD_BITS-tlsf.PAD_BITS-tlsf.SL_BITS ; significant bits for first level index
     0010             (new-engine/memory):00033         tlsf.SL_SIZE            equ   16 ; 2^tlsf.SL_BITS
     0004             (new-engine/memory):00034         tlsf.MIN_BLOCK_SIZE     equ   types.WORD*2 ; a memory block in use should be able to return to free state, so a min block size is mandatory (prev and next)
     0004             (new-engine/memory):00035         tlsf.BHDR_OVERHEAD      equ   types.WORD*2 ; overhead when a block is in use (size and prev.phys)
     0080             (new-engine/memory):00036         tlsf.mask.FREE_BLOCK    equ   %10000000
     FFFF             (new-engine/memory):00037         tlsf.block.nullptr      equ   -1
                      (new-engine/memory):00038         
                      (new-engine/memory):00039         ; tlsf external variables and constants
                      (new-engine/memory):00040         ; -------------------------------------
A018 00               (new-engine/memory):00041         tlsf.err              fcb   0
A019 A1B9             (new-engine/memory):00042         tlsf.err.callback     fdb   tlsf.err.loop ; error callback, default is an infinite loop
     0001             (new-engine/memory):00043         tlsf.err.init.MIN_SIZE        equ   1     ; memory pool should have sizeof{tlsf.blockHdr} as a minimum size
     0002             (new-engine/memory):00044         tlsf.err.init.MAX_SIZE        equ   2     ; memory pool should have 32768 ($8000) as a maximum size
     0003             (new-engine/memory):00045         tlsf.err.malloc.NO_MORE_SPACE equ   3     ; no more space in memory pool 
     0004             (new-engine/memory):00046         tlsf.err.malloc.MAX_SIZE      equ   4     ; malloc can not handle more than 63488 ($F800) bytes request
     0005             (new-engine/memory):00047         tlsf.err.free.NULL_PTR        equ   5     ; memory location to free cannot be NULL
                      (new-engine/memory):00048         
                      (new-engine/memory):00049         ; tlsf internal variables
                      (new-engine/memory):00050         ; -----------------------
A01B 00               (new-engine/memory):00051         tlsf.fl               fcb   0 ; first level index
A01C 00               (new-engine/memory):00052         tlsf.sl               fcb   0 ; second level index (should be adjacent to fl in memory)
A01D 0000             (new-engine/memory):00053         tlsf.memoryPool       fdb   0 ; memory pool location     
A01F 0000             (new-engine/memory):00054         tlsf.memoryPool.end   fdb   0 ; memory pool upper limit
A021 0000             (new-engine/memory):00055         tlsf.memoryPool.size  fdb   0 ; memory pool size
                      (new-engine/memory):00056         
A023                  (new-engine/memory):00057         tlsf.bitmap.start
A023 0000             (new-engine/memory):00058         tlsf.fl.bitmap        fdb   0 ; each bit is a boolean, does a free list exists for a fl index ?
     0002             (new-engine/memory):00059         tlsf.sl.bitmap.size   equ   (tlsf.SL_SIZE+types.BYTE_BITS-1)/types.BYTE_BITS
     A01F             (new-engine/memory):00060         tlsf.sl.bitmaps       equ   *-(types.WORD_BITS-(tlsf.FL_BITS+1))*tlsf.sl.bitmap.size ; Translate to get rid of useless space (fl values < min fl)
A025 0000000000000000 (new-engine/memory):00061                               fill  0,(tlsf.FL_BITS+1)*tlsf.sl.bitmap.size ; each bit is a boolean, does a free list exists for a sl index ?
     0000000000000000
     0000000000000000
     0000
A03F                  (new-engine/memory):00062         tlsf.bitmap.end
     9FD7             (new-engine/memory):00063         tlsf.headMatrix       equ   *-4*2-(types.WORD_BITS-(tlsf.FL_BITS+1))*tlsf.SL_SIZE*2 ; fl=0 sl=0 to sl=3 is useless (minimum bloc size)
A03F 0000000000000000 (new-engine/memory):00064         tlsf.headMatrix.start fill  0,(tlsf.FL_BITS+1)*tlsf.SL_SIZE*2-(4+15)*2 ; head ptr to each free list by fl/sl. First fl index hold only 12 sl levels (sl=4-15). Last fl index hold only one sl level (sl=0).
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000
A1B9                  (new-engine/memory):00065         tlsf.headMatrix.end
                      (new-engine/memory):00066         
                      (new-engine/memory):00067         ;-----------------------------------------------------------------
                      (new-engine/memory):00068         ; configuration check
                      (new-engine/memory):00069         ;-----------------------------------------------------------------
                      (new-engine/memory):00070          IFLT 8-(tlsf.PAD_BITS+tlsf.SL_BITS)
                      (new-engine/memory):00071                 ERROR "Sum of tlsf.PAD_BITS and tlsf.SL_BITS should not exceed 8"
                      (new-engine/memory):00072          ENDC
                      (new-engine/memory):00073         
                      (new-engine/memory):00074          IFLT tlsf.SL_BITS-1
                      (new-engine/memory):00075                 ERROR "tlsf.SL_BITS should be >= 1"
                      (new-engine/memory):00076          ENDC
                      (new-engine/memory):00077         
                      (new-engine/memory):00078          IFGT tlsf.SL_BITS-4
                      (new-engine/memory):00079                 ERROR "tlsf.SL_BITS should be <= 4"
                      (new-engine/memory):00080          ENDC
                      (new-engine/memory):00081         
                      (new-engine/memory):00082         ;-----------------------------------------------------------------
                      (new-engine/memory):00083         ; tlsf.err.loop
                      (new-engine/memory):00084         ;-----------------------------------------------------------------
                      (new-engine/memory):00085         ; default error callback
                      (new-engine/memory):00086         ;-----------------------------------------------------------------
A1B9                  (new-engine/memory):00087         tlsf.err.loop
A1B9 20FE             (new-engine/memory):00088 [3]             bra   *
                      (new-engine/memory):00089         
                      (new-engine/memory):00090         ;-----------------------------------------------------------------
                      (new-engine/memory):00091         ; tlsf.err.return
                      (new-engine/memory):00092         ;-----------------------------------------------------------------
                      (new-engine/memory):00093         ; alternative error callback
                      (new-engine/memory):00094         ;-----------------------------------------------------------------
A1BB                  (new-engine/memory):00095         tlsf.err.return
A1BB 327E             (new-engine/memory):00096 [5]             leas  -2,s
A1BD 39               (new-engine/memory):00097 [5]             rts
                      (new-engine/memory):00098         
                      (new-engine/memory):00099         ;-----------------------------------------------------------------
                      (new-engine/memory):00100         ; tlsf.init
                      (new-engine/memory):00101         ; input  REG : [D] total memory pool size (overhead included)
                      (new-engine/memory):00102         ; input  REG : [X] memory pool location
                      (new-engine/memory):00103         ; output VAR : [tlsf.err] error code
                      (new-engine/memory):00104         ; trash      : [D,X,U]
                      (new-engine/memory):00105         ;-----------------------------------------------------------------
                      (new-engine/memory):00106         ; Initialize memory management index with a size and a location
                      (new-engine/memory):00107         ; The provided size include the header block overhead.
                      (new-engine/memory):00108         ; The maximum usable size is $8000 bytes and it requires a
                      (new-engine/memory):00109         ; countinuous memory space of $8004 bytes (max value for in reg D)
                      (new-engine/memory):00110         ;-----------------------------------------------------------------
A1BE                  (new-engine/memory):00111         tlsf.init
A1BE BFA01D           (new-engine/memory):00112 [6]             stx   tlsf.memoryPool
A1C1 FDA021           (new-engine/memory):00113 [6]             std   tlsf.memoryPool.size
                      (new-engine/memory):00114         
                      (new-engine/memory):00115                 ; check memory pool size
A1C4 10830008         (new-engine/memory):00116 [5]             cmpd  #sizeof{tlsf.blockHdr}
A1C8 240C             (new-engine/memory):00117 [3]             bhs   >
A1CA 8601             (new-engine/memory):00118 [2]                 lda   #tlsf.err.init.MIN_SIZE
A1CC B7A018           (new-engine/memory):00119 [5]                 sta   tlsf.err
A1CF BEA019           (new-engine/memory):00120 [6]                 ldx   tlsf.err.callback
A1D2 3262             (new-engine/memory):00121 [5]                 leas  2,s
A1D4 6E84             (new-engine/memory):00122 [3]                 jmp   ,x
A1D6 10838004         (new-engine/memory):00123 [5]     !       cmpd  #$8000+tlsf.BHDR_OVERHEAD
A1DA 230C             (new-engine/memory):00124 [3]             bls   >
A1DC 8602             (new-engine/memory):00125 [2]                 lda   #tlsf.err.init.MAX_SIZE
A1DE B7A018           (new-engine/memory):00126 [5]                 sta   tlsf.err
A1E1 BEA019           (new-engine/memory):00127 [6]                 ldx   tlsf.err.callback
A1E4 3262             (new-engine/memory):00128 [5]                 leas  2,s
A1E6 6E84             (new-engine/memory):00129 [3]                 jmp   ,x
                      (new-engine/memory):00130         !
                      (new-engine/memory):00131                 ; set the memory pool upper limit
A1E8 338B             (new-engine/memory):00132 [8]             leau  d,x
A1EA FFA01F           (new-engine/memory):00133 [6]             stu   tlsf.memoryPool.end
                      (new-engine/memory):00134                 ; Zeroing the tlsf index
A1ED 8EA023           (new-engine/memory):00135 [3]             ldx   #tlsf.bitmap.start
A1F0 CC0000           (new-engine/memory):00136 [3]             ldd   #0
A1F3 ED81             (new-engine/memory):00137 [8]     !           std   ,x++
A1F5 8CA03F           (new-engine/memory):00138 [4]                 cmpx  #tlsf.bitmap.end
A1F8 26F9             (new-engine/memory):00139 [3]             bne   <
                      (new-engine/memory):00140         
A1FA 8EA03F           (new-engine/memory):00141 [3]             ldx   #tlsf.headMatrix.start
A1FD CCFFFF           (new-engine/memory):00142 [3]             ldd   #tlsf.block.nullptr
A200 ED81             (new-engine/memory):00143 [8]     !           std   ,x++
A202 8CA1B9           (new-engine/memory):00144 [4]                 cmpx  #tlsf.headMatrix.end
A205 26F9             (new-engine/memory):00145 [3]             bne   <
                      (new-engine/memory):00146         
                      (new-engine/memory):00147                 ; set a single free block
A207 BEA01D           (new-engine/memory):00148 [6]             ldx   tlsf.memoryPool
A20A BFA403           (new-engine/memory):00149 [6]             stx   tlsf.insertBlock.location
                      (new-engine/memory):00150         
A20D CCFFFF           (new-engine/memory):00151 [3]             ldd   #tlsf.block.nullptr
A210 ED02             (new-engine/memory):00152 [6]             std   tlsf.blockHdr.prev.phys,x ; no previous physical block
                      (new-engine/memory):00153         
A212 FCA021           (new-engine/memory):00154 [6]             ldd   tlsf.memoryPool.size
A215 830005           (new-engine/memory):00155 [4]             subd  #tlsf.BHDR_OVERHEAD+1 ; size is stored as val-1
A218 8A80             (new-engine/memory):00156 [2]             ora   #tlsf.mask.FREE_BLOCK ; set free block bit
A21A ED84             (new-engine/memory):00157 [5]             std   tlsf.blockHdr.size,x
A21C BDA3B9           (new-engine/memory):00158 [8]             jsr   tlsf.mappingFreeBlock
A21F 7EA402           (new-engine/memory):00159 [4]             jmp   tlsf.insertBlock
                      (new-engine/memory):00160         
                      (new-engine/memory):00161         ;-----------------------------------------------------------------
                      (new-engine/memory):00162         ; _tlsf.findSuitableBlock
                      (new-engine/memory):00163         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00164         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00165         ; output VAR : [tlsf.fl] suitable first level index
                      (new-engine/memory):00166         ; output VAR : [tlsf.sl] suitable second level index
                      (new-engine/memory):00167         ;-----------------------------------------------------------------
                      (new-engine/memory):00168         ;
                      (new-engine/memory):00169         ; This routine is a MACRO to make the code inline in malloc
                      (new-engine/memory):00170         ;-----------------------------------------------------------------
A222                  (new-engine/memory):00171         _tlsf.findSuitableBlock MACRO
                      (new-engine/memory):00172                 ; search for free list in selected fl/sl index
                      (new-engine/memory):00173                 ldb   tlsf.fl
                      (new-engine/memory):00174                 aslb                           ; mul by tlsf.sl.bitmap.size
                      (new-engine/memory):00175                 ldx   #tlsf.sl.bitmaps
                      (new-engine/memory):00176                 abx                            ; set x to selected sl bitmap
                      (new-engine/memory):00177                 ldy   #tlsf.map.mask
                      (new-engine/memory):00178                 ldb   tlsf.sl
                      (new-engine/memory):00179                 aslb
                      (new-engine/memory):00180                 leay  b,y                      ; set y to selected sl mask
                      (new-engine/memory):00181                 ldd   ,x                       ; load selected sl bitmap value
                      (new-engine/memory):00182                 anda  ,y                       ; apply mask to keep only selected sl and upper values
                      (new-engine/memory):00183                 andb  1,y                      ; apply mask to keep only selected sl and upper values
                      (new-engine/memory):00184                 std   tlsf.ctz.in
                      (new-engine/memory):00185                 bne   @flmatch                 ; branch if free list exists at current fl
                      (new-engine/memory):00186                 ldx   #tlsf.map.mask           ; search for free list at upper fl
                      (new-engine/memory):00187                 ldb   tlsf.fl
                      (new-engine/memory):00188                 incb                           ; select upper fl value
                      (new-engine/memory):00189                 aslb
                      (new-engine/memory):00190                 abx                            ; set x to selected fl mask
                      (new-engine/memory):00191                 ldd   tlsf.fl.bitmap
                      (new-engine/memory):00192                 anda  ,x                       ; apply mask to keep only upper fl values
                      (new-engine/memory):00193                 andb  1,x                      ; apply mask to keep only upper fl values
                      (new-engine/memory):00194                 std   tlsf.ctz.in
                      (new-engine/memory):00195                 bne   >
                      (new-engine/memory):00196                     lda   #tlsf.err.malloc.NO_MORE_SPACE
                      (new-engine/memory):00197                     sta   tlsf.err
                      (new-engine/memory):00198                     ldx   tlsf.err.callback
                      (new-engine/memory):00199                     leas  2,s                  ; WARNING ! dependency on calling tree, when using as a macro in malloc, should be 2
                      (new-engine/memory):00200                     jmp   ,x
                      (new-engine/memory):00201         !       jsr   tlsf.ctz                 ; search first non empty fl index
                      (new-engine/memory):00202                 stb   tlsf.fl
                      (new-engine/memory):00203                 aslb                           ; mul by tlsf.sl.bitmap.size
                      (new-engine/memory):00204                 ldx   #tlsf.sl.bitmaps
                      (new-engine/memory):00205                 ldd   b,x                      ; load suitable sl bitmap value
                      (new-engine/memory):00206                 std   tlsf.ctz.in              ; zero is not expected here, no test required
A222                  (new-engine/memory):00207         @flmatch
                      (new-engine/memory):00208                 jsr   tlsf.ctz                 ; search first non empty sl index
                      (new-engine/memory):00209                 stb   tlsf.sl
                      (new-engine/memory):00210                 ;rts
                      (new-engine/memory):00211          ENDM
                      (new-engine/memory):00212         
A222                  (new-engine/memory):00213         tlsf.map.mask
A222 FFFF             (new-engine/memory):00214                 fdb   %1111111111111111
A224 FFFE             (new-engine/memory):00215                 fdb   %1111111111111110
A226 FFFC             (new-engine/memory):00216                 fdb   %1111111111111100
A228 FFF8             (new-engine/memory):00217                 fdb   %1111111111111000
A22A FFF0             (new-engine/memory):00218                 fdb   %1111111111110000
A22C FFE0             (new-engine/memory):00219                 fdb   %1111111111100000
A22E FFC0             (new-engine/memory):00220                 fdb   %1111111111000000
A230 FF80             (new-engine/memory):00221                 fdb   %1111111110000000
A232 FF00             (new-engine/memory):00222                 fdb   %1111111100000000
A234 FE00             (new-engine/memory):00223                 fdb   %1111111000000000
A236 FC00             (new-engine/memory):00224                 fdb   %1111110000000000
A238 F800             (new-engine/memory):00225                 fdb   %1111100000000000
A23A F000             (new-engine/memory):00226                 fdb   %1111000000000000
A23C E000             (new-engine/memory):00227                 fdb   %1110000000000000
A23E C000             (new-engine/memory):00228                 fdb   %1100000000000000
A240 8000             (new-engine/memory):00229                 fdb   %1000000000000000
                      (new-engine/memory):00230         
A242                  (new-engine/memory):00231         tlsf.map.bitset
A242 0001             (new-engine/memory):00232                 fdb   %0000000000000001
A244 0002             (new-engine/memory):00233                 fdb   %0000000000000010
A246 0004             (new-engine/memory):00234                 fdb   %0000000000000100
A248 0008             (new-engine/memory):00235                 fdb   %0000000000001000
A24A 0010             (new-engine/memory):00236                 fdb   %0000000000010000
A24C 0020             (new-engine/memory):00237                 fdb   %0000000000100000
A24E 0040             (new-engine/memory):00238                 fdb   %0000000001000000
A250 0080             (new-engine/memory):00239                 fdb   %0000000010000000
A252 0100             (new-engine/memory):00240                 fdb   %0000000100000000
A254 0200             (new-engine/memory):00241                 fdb   %0000001000000000
A256 0400             (new-engine/memory):00242                 fdb   %0000010000000000
A258 0800             (new-engine/memory):00243                 fdb   %0000100000000000
A25A 1000             (new-engine/memory):00244                 fdb   %0001000000000000
A25C 2000             (new-engine/memory):00245                 fdb   %0010000000000000
A25E 4000             (new-engine/memory):00246                 fdb   %0100000000000000
A260 8000             (new-engine/memory):00247                 fdb   %1000000000000000
                      (new-engine/memory):00248         
                      (new-engine/memory):00249         ;-----------------------------------------------------------------
                      (new-engine/memory):00250         ; tlsf.malloc
                      (new-engine/memory):00251         ; input  REG : [D] requested user memory size
                      (new-engine/memory):00252         ; output REG : [U] allocated memory address
                      (new-engine/memory):00253         ;-----------------------------------------------------------------
                      (new-engine/memory):00254         ; allocate some memory, should be deallocated with a call to free
                      (new-engine/memory):00255         ; WARNING : this does not initialize memory bytes
                      (new-engine/memory):00256         ;-----------------------------------------------------------------
A262                  (new-engine/memory):00257         tlsf.malloc
A262 10830004         (new-engine/memory):00258 [5]             cmpd  #tlsf.MIN_BLOCK_SIZE           ; Apply minimum size to requested memory size
A266 2403             (new-engine/memory):00259 [3]             bhs   >
A268 CC0004           (new-engine/memory):00260 [3]                 ldd   #tlsf.MIN_BLOCK_SIZE
A26B 1083F800         (new-engine/memory):00261 [5]     !       cmpd  #$F800                         ; greater values are not handled by mappingSearch function
A26F 230C             (new-engine/memory):00262 [3]             bls   >                              ; this prevents unexpected behaviour
A271 8604             (new-engine/memory):00263 [2]                 lda   #tlsf.err.malloc.MAX_SIZE
A273 B7A018           (new-engine/memory):00264 [5]                 sta   tlsf.err
A276 BEA019           (new-engine/memory):00265 [6]                 ldx   tlsf.err.callback
A279 3262             (new-engine/memory):00266 [5]                 leas  2,s
A27B 6E84             (new-engine/memory):00267 [3]                 jmp   ,x
A27D BDA398           (new-engine/memory):00268 [8]     !       jsr   tlsf.mappingSearch             ; Set tlsf.rsize, fl and sl
                      (new-engine/memory):00269                 _tlsf.findSuitableBlock              ; Searching a free block, this function changes the values of fl and sl
                      (_tlsf.findSuitabl):00001                 ; search for free list in selected fl/sl index
A280 F6A01B           (_tlsf.findSuitabl):00002 [5]             ldb   tlsf.fl
A283 58               (_tlsf.findSuitabl):00003 [2]             aslb                           ; mul by tlsf.sl.bitmap.size
A284 8EA01F           (_tlsf.findSuitabl):00004 [3]             ldx   #tlsf.sl.bitmaps
A287 3A               (_tlsf.findSuitabl):00005 [3]             abx                            ; set x to selected sl bitmap
A288 108EA222         (_tlsf.findSuitabl):00006 [4]             ldy   #tlsf.map.mask
A28C F6A01C           (_tlsf.findSuitabl):00007 [5]             ldb   tlsf.sl
A28F 58               (_tlsf.findSuitabl):00008 [2]             aslb
A290 31A5             (_tlsf.findSuitabl):00009 [5]             leay  b,y                      ; set y to selected sl mask
A292 EC84             (_tlsf.findSuitabl):00010 [5]             ldd   ,x                       ; load selected sl bitmap value
A294 A4A4             (_tlsf.findSuitabl):00011 [4]             anda  ,y                       ; apply mask to keep only selected sl and upper values
A296 E421             (_tlsf.findSuitabl):00012 [5]             andb  1,y                      ; apply mask to keep only selected sl and upper values
A298 FDA4F5           (_tlsf.findSuitabl):00013 [6]             std   tlsf.ctz.in
A29B 2630             (_tlsf.findSuitabl):00014 [3]             bne   @flmatch                 ; branch if free list exists at current fl
A29D 8EA222           (_tlsf.findSuitabl):00015 [3]             ldx   #tlsf.map.mask           ; search for free list at upper fl
A2A0 F6A01B           (_tlsf.findSuitabl):00016 [5]             ldb   tlsf.fl
A2A3 5C               (_tlsf.findSuitabl):00017 [2]             incb                           ; select upper fl value
A2A4 58               (_tlsf.findSuitabl):00018 [2]             aslb
A2A5 3A               (_tlsf.findSuitabl):00019 [3]             abx                            ; set x to selected fl mask
A2A6 FCA023           (_tlsf.findSuitabl):00020 [6]             ldd   tlsf.fl.bitmap
A2A9 A484             (_tlsf.findSuitabl):00021 [4]             anda  ,x                       ; apply mask to keep only upper fl values
A2AB E401             (_tlsf.findSuitabl):00022 [5]             andb  1,x                      ; apply mask to keep only upper fl values
A2AD FDA4F5           (_tlsf.findSuitabl):00023 [6]             std   tlsf.ctz.in
A2B0 260C             (_tlsf.findSuitabl):00024 [3]             bne   >
A2B2 8603             (_tlsf.findSuitabl):00025 [2]                 lda   #tlsf.err.malloc.NO_MORE_SPACE
A2B4 B7A018           (_tlsf.findSuitabl):00026 [5]                 sta   tlsf.err
A2B7 BEA019           (_tlsf.findSuitabl):00027 [6]                 ldx   tlsf.err.callback
A2BA 3262             (_tlsf.findSuitabl):00028 [5]                 leas  2,s                  ; WARNING ! dependency on calling tree, when using as a macro in malloc, should be 2
A2BC 6E84             (_tlsf.findSuitabl):00029 [3]                 jmp   ,x
A2BE BDA4F7           (_tlsf.findSuitabl):00030 [8]     !       jsr   tlsf.ctz                 ; search first non empty fl index
A2C1 F7A01B           (_tlsf.findSuitabl):00031 [5]             stb   tlsf.fl
A2C4 58               (_tlsf.findSuitabl):00032 [2]             aslb                           ; mul by tlsf.sl.bitmap.size
A2C5 8EA01F           (_tlsf.findSuitabl):00033 [3]             ldx   #tlsf.sl.bitmaps
A2C8 EC85             (_tlsf.findSuitabl):00034 [6]             ldd   b,x                      ; load suitable sl bitmap value
A2CA FDA4F5           (_tlsf.findSuitabl):00035 [6]             std   tlsf.ctz.in              ; zero is not expected here, no test required
A2CD                  (_tlsf.findSuitabl):00036         @flmatch
A2CD BDA4F7           (_tlsf.findSuitabl):00037 [8]             jsr   tlsf.ctz                 ; search first non empty sl index
A2D0 F7A01C           (_tlsf.findSuitabl):00038 [5]             stb   tlsf.sl
                      (_tlsf.findSuitabl):00039                 ;rts
A2D3 BDA47E           (new-engine/memory):00270 [8]             jsr   tlsf.removeBlockHead           ; Remove the allocated block from the free matrix
                      (new-engine/memory):00271                 ; Should the block be split?
A2D6 ECC4             (new-engine/memory):00272 [5]             ldd   tlsf.blockHdr.size,u           ; Size of available memory -1
A2D8 B3A2E3           (new-engine/memory):00273 [7]             subd  tlsf.rsize                     ; Substract requested memory size
A2DB 10838007         (new-engine/memory):00274 [5]             cmpd  #$8000+sizeof{tlsf.blockHdr}-1 ; Check against block header size, Size is stored as size-1, take care of free flag
A2DF 2537             (new-engine/memory):00275 [3]             blo   >                              ; Not enough bytes for a new splitted block
                      (new-engine/memory):00276                     ; Split a free block in two
                      (new-engine/memory):00277                     ; smaller blocks: one allocated,
                      (new-engine/memory):00278                     ; one free
A2E1 30C91234         (new-engine/memory):00279 [8]                 leax  $1234,u                    ; Compute address of new instancied free block into x
     A2E3             (new-engine/memory):00280         tlsf.rsize  equ *-2                          ; requested memory size
A2E5 3004             (new-engine/memory):00281 [5]                 leax  tlsf.BHDR_OVERHEAD,x       ; X is a ptr to new free block
A2E7 830004           (new-engine/memory):00282 [4]                 subd  #tlsf.BHDR_OVERHEAD
A2EA ED84             (new-engine/memory):00283 [5]                 std   tlsf.blockHdr.size,x       ; Set allocated size for new free Block
A2EC EF02             (new-engine/memory):00284 [6]                 stu   tlsf.blockHdr.prev.phys,x  ; Set the prev phys of the new free block
A2EE FCA2E3           (new-engine/memory):00285 [6]                 ldd   tlsf.rsize
A2F1 830001           (new-engine/memory):00286 [4]                 subd  #1                         ; Size is stored as size-1
A2F4 EDC4             (new-engine/memory):00287 [5]                 std   tlsf.blockHdr.size,u       ; Store new block size
                      (new-engine/memory):00288         
A2F6 EC84             (new-engine/memory):00289 [5]                 ldd   tlsf.blockHdr.size,x      ; load parameter for mapping routine
A2F8 847F             (new-engine/memory):00290 [2]                 anda  #^tlsf.mask.FREE_BLOCK    ; must update the following block to the new previous physical block
A2FA C30005           (new-engine/memory):00291 [4]                 addd  #tlsf.BHDR_OVERHEAD+1     ; size is stored as size-1
A2FD 318B             (new-engine/memory):00292 [8]                 leay  d,x                       ; X is now a ptr to next physical of next physical (from deallocated block)
A2FF 2708             (new-engine/memory):00293 [3]                 beq   @nonext                   ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A301 10BCA01F         (new-engine/memory):00294 [8]                     cmpy  tlsf.memoryPool.end
A305 2402             (new-engine/memory):00295 [3]                     bhs   @nonext               ; branch if no next of next physical block (beyond memorypool)
A307 AF22             (new-engine/memory):00296 [6]                         stx   tlsf.blockHdr.prev.phys,y ; update the physical link
A309                  (new-engine/memory):00297         @nonext
A309 EC84             (new-engine/memory):00298 [5]                 ldd   tlsf.blockHdr.size,x       ; load parameter for mapping routine
A30B 3440             (new-engine/memory):00299 [7]                 pshs  u
A30D BFA403           (new-engine/memory):00300 [6]                 stx   tlsf.insertBlock.location
A310 BDA3B9           (new-engine/memory):00301 [8]                 jsr   tlsf.mappingFreeBlock      ; compute fl/sl index
A313 BDA402           (new-engine/memory):00302 [8]                 jsr   tlsf.insertBlock           ; update index
A316 3540             (new-engine/memory):00303 [7]                 puls  u
A318 A6C4             (new-engine/memory):00304 [4]     !       lda   tlsf.blockHdr.size,u           ; No split, use the whole block
A31A 847F             (new-engine/memory):00305 [2]             anda  #^tlsf.mask.FREE_BLOCK         ; Unset free block bit
A31C A7C4             (new-engine/memory):00306 [4]             sta   tlsf.blockHdr.size,u
A31E 3344             (new-engine/memory):00307 [5]             leau  tlsf.MIN_BLOCK_SIZE,u          ; Skip block header when returning allocated memory address
A320 39               (new-engine/memory):00308 [5]             rts
                      (new-engine/memory):00309         
                      (new-engine/memory):00310         ;-----------------------------------------------------------------
                      (new-engine/memory):00311         ; tlsf.free
                      (new-engine/memory):00312         ; input REG : [U] allocated memory address to free
                      (new-engine/memory):00313         ;-----------------------------------------------------------------
                      (new-engine/memory):00314         ; deallocate previously allocated memory
                      (new-engine/memory):00315         ;-----------------------------------------------------------------
A321                  (new-engine/memory):00316         tlsf.free
                      (new-engine/memory):00317         !       ; check previous physical block
                      (new-engine/memory):00318                 ; and extend if already free 
A321 335C             (new-engine/memory):00319 [5]             leau  -tlsf.BHDR_OVERHEAD,u
A323 AE42             (new-engine/memory):00320 [6]             ldx   tlsf.blockHdr.prev.phys,u
A325 8CFFFF           (new-engine/memory):00321 [4]             cmpx  #tlsf.block.nullptr
A328 2722             (new-engine/memory):00322 [3]             beq   >                                 ; branch if no previous physical block
A32A EC84             (new-engine/memory):00323 [5]                 ldd   tlsf.blockHdr.size,x
A32C 2A1E             (new-engine/memory):00324 [3]                 bpl   >                             ; branch if previous physical block is used
A32E 3450             (new-engine/memory):00325 [9]                     pshs  x,u                       ; previous free block is ready to merge
A330 BDA3B9           (new-engine/memory):00326 [8]                     jsr   tlsf.mappingFreeBlock     ; compute fl/sl index of previous physical free block
A333 AEE4             (new-engine/memory):00327 [5]                     ldx   ,s
A335 BDA466           (new-engine/memory):00328 [8]                     jsr   tlsf.removeBlock          ; remove it from list and index
A338 3550             (new-engine/memory):00329 [9]                     puls  x,u
A33A ECC4             (new-engine/memory):00330 [5]                     ldd   tlsf.blockHdr.size,u      ; load size of deallocated block
A33C E384             (new-engine/memory):00331 [6]                     addd  tlsf.blockHdr.size,x      ; add size of previous free block, and keep free bit
A33E C30005           (new-engine/memory):00332 [4]                     addd  #tlsf.BHDR_OVERHEAD+1     ; add overhead of deallocated block (we are merging), all size are -1, so when adding two block size, we must add 1
A341 3384             (new-engine/memory):00333 [4]                     leau  ,x                        ; U is now a ptr to merged block
A343 EDC4             (new-engine/memory):00334 [5]                     std   tlsf.blockHdr.size,u      ; set the new block size, prev physical is already up to date
A345 847F             (new-engine/memory):00335 [2]                     anda  #^tlsf.mask.FREE_BLOCK    ; Unset free block bit
A347 C30005           (new-engine/memory):00336 [4]                     addd  #tlsf.BHDR_OVERHEAD+1
A34A 2005             (new-engine/memory):00337 [3]                     bra   @checkNext                ; no need to reload the size, skip a bit of code
                      (new-engine/memory):00338         !
                      (new-engine/memory):00339                 ; check next physical block
                      (new-engine/memory):00340                 ; and extend if already free
A34C ECC4             (new-engine/memory):00341 [5]             ldd   tlsf.blockHdr.size,u                  ; used block do not have the free bit
A34E C30005           (new-engine/memory):00342 [4]             addd  #tlsf.BHDR_OVERHEAD+1                 ; size is stored as size-1
A351                  (new-engine/memory):00343         @checkNext
A351 30CB             (new-engine/memory):00344 [8]             leax  d,u                                   ; X is now a ptr to next block
A353 2734             (new-engine/memory):00345 [3]             beq   >                                     ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A355 BCA01F           (new-engine/memory):00346 [7]                 cmpx  tlsf.memoryPool.end
A358 242F             (new-engine/memory):00347 [3]                 bhs   >                                 ; branch if no next physical block (beyond memorypool)
A35A EF02             (new-engine/memory):00348 [6]                     stu   tlsf.blockHdr.prev.phys,x     ; if a merge was done in first part of the routine, need to update the physical link, otherwise will have no effect
A35C EC84             (new-engine/memory):00349 [5]                     ldd   tlsf.blockHdr.size,x
A35E 2A29             (new-engine/memory):00350 [3]                     bpl   >                             ; branch if next physical block is used
A360 3450             (new-engine/memory):00351 [9]                         pshs  x,u
A362 BDA3B9           (new-engine/memory):00352 [8]                         jsr   tlsf.mappingFreeBlock     ; compute fl/sl index of next physical free block
A365 AEE4             (new-engine/memory):00353 [5]                         ldx   ,s
A367 BDA466           (new-engine/memory):00354 [8]                         jsr   tlsf.removeBlock          ; remove it from list and index
A36A 3550             (new-engine/memory):00355 [9]                         puls  x,u
A36C ECC4             (new-engine/memory):00356 [5]                         ldd   tlsf.blockHdr.size,u
A36E 847F             (new-engine/memory):00357 [2]                         anda  #^tlsf.mask.FREE_BLOCK    ; might be a used or free block (previously merged with previous), must unset free block bit
A370 E384             (new-engine/memory):00358 [6]                         addd  tlsf.blockHdr.size,x      ; add size of freed memory while keeping free bit on
A372 C30005           (new-engine/memory):00359 [4]                         addd  #tlsf.BHDR_OVERHEAD+1     ; add overhead of merged block, all size are -1, so when adding two block size, we must add 1
A375 EDC4             (new-engine/memory):00360 [5]                         std   tlsf.blockHdr.size,u
                      (new-engine/memory):00361         
A377 EC84             (new-engine/memory):00362 [5]                         ldd   tlsf.blockHdr.size,x      ; must update the following block to the new previous physical block
A379 847F             (new-engine/memory):00363 [2]                         anda  #^tlsf.mask.FREE_BLOCK
A37B C30005           (new-engine/memory):00364 [4]                         addd  #tlsf.BHDR_OVERHEAD+1     ; size is stored as size-1
A37E 308B             (new-engine/memory):00365 [8]                         leax  d,x                       ; X is now a ptr to next physical of next physical (from deallocated block)
A380 2707             (new-engine/memory):00366 [3]                         beq   >                         ; branch if end of memory (when memory pool goes up to the end of addressable 16bit memory)
A382 BCA01F           (new-engine/memory):00367 [7]                             cmpx  tlsf.memoryPool.end
A385 2402             (new-engine/memory):00368 [3]                             bhs   >                             ; branch if no next of next physical block (beyond memorypool)
A387 EF02             (new-engine/memory):00369 [6]                                 stu   tlsf.blockHdr.prev.phys,x ; update the physical link
                      (new-engine/memory):00370         !
                      (new-engine/memory):00371                 ; turn the used/merged block
                      (new-engine/memory):00372                 ; to a free one
A389 FFA403           (new-engine/memory):00373 [6]             stu   tlsf.insertBlock.location
A38C ECC4             (new-engine/memory):00374 [5]             ldd   tlsf.blockHdr.size,u
A38E 8A80             (new-engine/memory):00375 [2]             ora   #tlsf.mask.FREE_BLOCK
A390 EDC4             (new-engine/memory):00376 [5]             std   tlsf.blockHdr.size,u
A392 BDA3B9           (new-engine/memory):00377 [8]             jsr   tlsf.mappingFreeBlock
A395 7EA402           (new-engine/memory):00378 [4]             jmp   tlsf.insertBlock
                      (new-engine/memory):00379         
                      (new-engine/memory):00380         ;-----------------------------------------------------------------
                      (new-engine/memory):00381         ; tlsf.mappingSearch
                      (new-engine/memory):00382         ; input  REG : [D] requested memory size
                      (new-engine/memory):00383         ; output VAR : [tlsf.rsize] requested memory size
                      (new-engine/memory):00384         ; output VAR : [tlsf.fl] first level index
                      (new-engine/memory):00385         ; output VAR : [tlsf.sl] second level index
                      (new-engine/memory):00386         ; output VAR : [D] tlsf.fl and tlsf.sl
                      (new-engine/memory):00387         ; trash      : [D,X]
                      (new-engine/memory):00388         ;-----------------------------------------------------------------
                      (new-engine/memory):00389         ; This function handle requested size from 1 up to $F800 (included)
                      (new-engine/memory):00390         ;-----------------------------------------------------------------
A398                  (new-engine/memory):00391         tlsf.mappingSearch
A398 FDA2E3           (new-engine/memory):00392 [6]             std   tlsf.rsize
                      (new-engine/memory):00393                 ; round up requested size to next list
A39B FDA4CF           (new-engine/memory):00394 [6]             std   tlsf.bsr.in
A39E BDA4D1           (new-engine/memory):00395 [8]             jsr   tlsf.bsr                          ; Split memory size in power of two
A3A1 C104             (new-engine/memory):00396 [2]             cmpb  #tlsf.PAD_BITS+tlsf.SL_BITS
A3A3 2205             (new-engine/memory):00397 [3]             bhi   >                                 ; Branch to round up if fl is not at minimum value
A3A5 FCA2E3           (new-engine/memory):00398 [6]                 ldd   tlsf.rsize
A3A8 2014             (new-engine/memory):00399 [3]                 bra   tlsf.mapping                  ; Skip round up
A3AA C004             (new-engine/memory):00400 [2]     !       subb  #tlsf.SL_BITS
A3AC 58               (new-engine/memory):00401 [2]             aslb                                    ; Fit requested size
A3AD 8EA222           (new-engine/memory):00402 [3]             ldx   #tlsf.map.mask                    ; to a level that contain
A3B0 EC85             (new-engine/memory):00403 [6]             ldd   b,x                               ; big enough free list
A3B2 43               (new-engine/memory):00404 [2]             coma
A3B3 53               (new-engine/memory):00405 [2]             comb
A3B4 F3A2E3           (new-engine/memory):00406 [7]             addd  tlsf.rsize                        ; requested size is rounded up
A3B7 2005             (new-engine/memory):00407 [3]             bra   tlsf.mapping
A3B9                  (new-engine/memory):00408         tlsf.mappingFreeBlock
A3B9 847F             (new-engine/memory):00409 [2]             anda  #^tlsf.mask.FREE_BLOCK
A3BB C30001           (new-engine/memory):00410 [4]             addd  #1
A3BE                  (new-engine/memory):00411         tlsf.mapping
A3BE FDA4CF           (new-engine/memory):00412 [6]             std   tlsf.bsr.in
A3C1 BDA4D1           (new-engine/memory):00413 [8]             jsr   tlsf.bsr                          ; Split memory size in power of two
A3C4 F7A01B           (new-engine/memory):00414 [5]             stb   tlsf.fl                           ; (..., 32>msize>=16 -> fl=5, 16>msize>=8 -> fl=4, ...)
A3C7 C103             (new-engine/memory):00415 [2]             cmpb  #tlsf.PAD_BITS+tlsf.SL_BITS-1     ; Test if there is a fl bit
A3C9 2205             (new-engine/memory):00416 [3]             bhi   @computesl                        ; if so branch
A3CB C603             (new-engine/memory):00417 [2]                 ldb   #tlsf.PAD_BITS+tlsf.SL_BITS-1 ; No fl bit, cap to fl minimum value
A3CD F7A01B           (new-engine/memory):00418 [5]                 stb   tlsf.fl
A3D0                  (new-engine/memory):00419         @computesl
A3D0 50               (new-engine/memory):00420 [2]             negb
A3D1 CB14             (new-engine/memory):00421 [2]             addb  #types.WORD_BITS+tlsf.SL_BITS
A3D3 58               (new-engine/memory):00422 [2]             aslb                                    ; 2 bytes of instructions for each element of @rshift table
A3D4 8EA3D9           (new-engine/memory):00423 [3]             ldx   #@rshift-4                        ; Saves 4 useless bytes (max 14 shift with slbits=1)
A3D7 3A               (new-engine/memory):00424 [3]             abx                                     ; Cannot use indexed jump, so move x
A3D8 FCA4CF           (new-engine/memory):00425 [6]             ldd   tlsf.bsr.in                       ; Get rounded requested size to rescale sl based on fl
A3DB 6E84             (new-engine/memory):00426 [3]             jmp   ,x
A3DD                  (new-engine/memory):00427         @rshift
A3DD 44               (new-engine/memory):00428 [2]             lsra
A3DE 56               (new-engine/memory):00429 [2]             rorb
A3DF 44               (new-engine/memory):00430 [2]             lsra
A3E0 56               (new-engine/memory):00431 [2]             rorb
A3E1 44               (new-engine/memory):00432 [2]             lsra
A3E2 56               (new-engine/memory):00433 [2]             rorb
A3E3 44               (new-engine/memory):00434 [2]             lsra
A3E4 56               (new-engine/memory):00435 [2]             rorb
A3E5 44               (new-engine/memory):00436 [2]             lsra
A3E6 56               (new-engine/memory):00437 [2]             rorb
A3E7 44               (new-engine/memory):00438 [2]             lsra
A3E8 56               (new-engine/memory):00439 [2]             rorb
A3E9 44               (new-engine/memory):00440 [2]             lsra
A3EA 56               (new-engine/memory):00441 [2]             rorb
A3EB 44               (new-engine/memory):00442 [2]             lsra
A3EC 56               (new-engine/memory):00443 [2]             rorb
A3ED 44               (new-engine/memory):00444 [2]             lsra
A3EE 56               (new-engine/memory):00445 [2]             rorb
A3EF 44               (new-engine/memory):00446 [2]             lsra
A3F0 56               (new-engine/memory):00447 [2]             rorb
A3F1 44               (new-engine/memory):00448 [2]             lsra
A3F2 56               (new-engine/memory):00449 [2]             rorb
A3F3 44               (new-engine/memory):00450 [2]             lsra
A3F4 56               (new-engine/memory):00451 [2]             rorb
A3F5 44               (new-engine/memory):00452 [2]             lsra
A3F6 56               (new-engine/memory):00453 [2]             rorb
A3F7 44               (new-engine/memory):00454 [2]             lsra
A3F8 56               (new-engine/memory):00455 [2]             rorb
A3F9 C40F             (new-engine/memory):00456 [2]             andb  #tlsf.SL_SIZE-1               ; Keep only sl bits
A3FB F7A01C           (new-engine/memory):00457 [5]             stb   tlsf.sl
A3FE B6A01B           (new-engine/memory):00458 [5]             lda   tlsf.fl
A401 39               (new-engine/memory):00459 [5]             rts
                      (new-engine/memory):00460         
                      (new-engine/memory):00461         ;-----------------------------------------------------------------
                      (new-engine/memory):00462         ; tlsf.insertBlock
                      (new-engine/memory):00463         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00464         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00465         ; input  REG : [X] memory block location
                      (new-engine/memory):00466         ;-----------------------------------------------------------------
                      (new-engine/memory):00467         ; insert a block into head matrix (LIFO)
                      (new-engine/memory):00468         ;-----------------------------------------------------------------
A402                  (new-engine/memory):00469         tlsf.insertBlock
A402 8E1234           (new-engine/memory):00470 [3]             ldx   #$1234
     A403             (new-engine/memory):00471         tlsf.insertBlock.location equ *-2
A405 CCFFFF           (new-engine/memory):00472 [3]             ldd   #tlsf.block.nullptr
A408 ED04             (new-engine/memory):00473 [6]             std   tlsf.blockHdr.prev,x     ; no previous free block
A40A B6A01B           (new-engine/memory):00474 [5]             lda   tlsf.fl
A40D C620             (new-engine/memory):00475 [2]             ldb   #tlsf.SL_SIZE*2
A40F 3D               (new-engine/memory):00476 [11]            mul
A410 CE9FD7           (new-engine/memory):00477 [3]             ldu   #tlsf.headMatrix
A413 33CB             (new-engine/memory):00478 [8]             leau  d,u                      ; U is a ptr to head list (first level)
A415 F6A01C           (new-engine/memory):00479 [5]             ldb   tlsf.sl
A418 58               (new-engine/memory):00480 [2]             aslb                           ; HeadMatrix store WORD
A419 33C5             (new-engine/memory):00481 [5]             leau  b,u                      ; U is a ptr to head list (first and second level)
A41B 10AEC4           (new-engine/memory):00482 [6]             ldy   ,u                       ; Check if a block exists
A41E 10AF06           (new-engine/memory):00483 [7]             sty   tlsf.blockHdr.next,x     ; if no block, will put nullptr to next, if a block exists, link to existing
A421 108CFFFF         (new-engine/memory):00484 [5]             cmpy  #tlsf.block.nullptr
A425 2702             (new-engine/memory):00485 [3]             beq   >                        ; Branch if no Block
A427 AF24             (new-engine/memory):00486 [6]                 stx   tlsf.blockHdr.prev,y ; Link to existing
A429 AFC4             (new-engine/memory):00487 [5]     !       stx   ,u                       ; Store new block as head of free list
A42B CEFFFF           (new-engine/memory):00488 [3]             ldu   #tlsf.block.nullptr
A42E EF04             (new-engine/memory):00489 [6]             stu   tlsf.blockHdr.prev,x     ; init prev of new block
                      (new-engine/memory):00490         
                      (new-engine/memory):00491                 ; insert into sl bitmap
A430 8EA242           (new-engine/memory):00492 [3]             ldx   #tlsf.map.bitset
A433 B6A01B           (new-engine/memory):00493 [5]             lda   tlsf.fl
A436 48               (new-engine/memory):00494 [2]             asla                           ; mul by tlsf.sl.bitmap.size
A437 108EA01F         (new-engine/memory):00495 [4]             ldy   #tlsf.sl.bitmaps
A43B 31A6             (new-engine/memory):00496 [5]             leay  a,y
A43D F6A01C           (new-engine/memory):00497 [5]             ldb   tlsf.sl
A440 58               (new-engine/memory):00498 [2]             aslb
A441 3A               (new-engine/memory):00499 [3]             abx
A442 ECA4             (new-engine/memory):00500 [5]             ldd   ,y
A444 2619             (new-engine/memory):00501 [3]             bne   >                        ; if a sl already exists, fl is also already set, branch
A446 AA84             (new-engine/memory):00502 [4]             ora   ,x
A448 EA01             (new-engine/memory):00503 [5]             orb   1,x
A44A EDA4             (new-engine/memory):00504 [5]             std   ,y
                      (new-engine/memory):00505         
                      (new-engine/memory):00506                 ; insert into fl bitmap
A44C 8EA242           (new-engine/memory):00507 [3]             ldx   #tlsf.map.bitset
A44F F6A01B           (new-engine/memory):00508 [5]             ldb   tlsf.fl
A452 58               (new-engine/memory):00509 [2]             aslb
A453 EC85             (new-engine/memory):00510 [6]             ldd   b,x
A455 BAA023           (new-engine/memory):00511 [5]             ora   tlsf.fl.bitmap
A458 FAA024           (new-engine/memory):00512 [5]             orb   tlsf.fl.bitmap+1
A45B FDA023           (new-engine/memory):00513 [6]             std   tlsf.fl.bitmap
A45E 39               (new-engine/memory):00514 [5]             rts
                      (new-engine/memory):00515         !
A45F AA84             (new-engine/memory):00516 [4]             ora   ,x
A461 EA01             (new-engine/memory):00517 [5]             orb   1,x
A463 EDA4             (new-engine/memory):00518 [5]             std   ,y
A465 39               (new-engine/memory):00519 [5]             rts
                      (new-engine/memory):00520         
                      (new-engine/memory):00521         ;-----------------------------------------------------------------
                      (new-engine/memory):00522         ; tlsf.removeBlock
                      (new-engine/memory):00523         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00524         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00525         ; input  REG : [X] address of block to remove
                      (new-engine/memory):00526         ; trash      : [D,U]
                      (new-engine/memory):00527         ;-----------------------------------------------------------------
                      (new-engine/memory):00528         ; remove a free block in his linked list, and update index
                      (new-engine/memory):00529         ;-----------------------------------------------------------------
A466                  (new-engine/memory):00530         tlsf.removeBlock
A466 EE04             (new-engine/memory):00531 [6]             ldu   tlsf.blockHdr.prev,x     ; check if removed block is a head
A468 1183FFFF         (new-engine/memory):00532 [5]             cmpu  #tlsf.block.nullptr
A46C 2710             (new-engine/memory):00533 [3]             beq   tlsf.removeBlockHead     ; branch if yes
A46E 3184             (new-engine/memory):00534 [4]                 leay  ,x
A470 AE06             (new-engine/memory):00535 [6]                 ldx   tlsf.blockHdr.next,x ; not a head, just update the linked list
A472 AF46             (new-engine/memory):00536 [6]                 stx   tlsf.blockHdr.next,u
A474 8CFFFF           (new-engine/memory):00537 [4]                 cmpx  #tlsf.block.nullptr
A477 2704             (new-engine/memory):00538 [3]                 beq   >
A479 EC24             (new-engine/memory):00539 [6]                     ldd   tlsf.blockHdr.prev,y
A47B ED04             (new-engine/memory):00540 [6]                     std   tlsf.blockHdr.prev,x
A47D 39               (new-engine/memory):00541 [5]     !           rts
                      (new-engine/memory):00542         
                      (new-engine/memory):00543         ;-----------------------------------------------------------------
                      (new-engine/memory):00544         ; tlsf.removeBlockHead
                      (new-engine/memory):00545         ; input  VAR : [tlsf.fl] first level index
                      (new-engine/memory):00546         ; input  VAR : [tlsf.sl] second level index
                      (new-engine/memory):00547         ; output REG : [U] address of block at head of list
                      (new-engine/memory):00548         ; trash      : [D,X]
                      (new-engine/memory):00549         ;-----------------------------------------------------------------
                      (new-engine/memory):00550         ; remove a free block when at head of a list
                      (new-engine/memory):00551         ;-----------------------------------------------------------------
A47E                  (new-engine/memory):00552         tlsf.removeBlockHead
A47E B6A01B           (new-engine/memory):00553 [5]             lda   tlsf.fl
A481 C620             (new-engine/memory):00554 [2]             ldb   #tlsf.SL_SIZE*2
A483 3D               (new-engine/memory):00555 [11]            mul
A484 8E9FD7           (new-engine/memory):00556 [3]             ldx   #tlsf.headMatrix
A487 308B             (new-engine/memory):00557 [8]             leax  d,x
A489 F6A01C           (new-engine/memory):00558 [5]             ldb   tlsf.sl
A48C 58               (new-engine/memory):00559 [2]             aslb                           ; headMatrix store WORD sized data
A48D 3185             (new-engine/memory):00560 [5]             leay  b,x                      ; load head of free block list to Y
A48F EEA4             (new-engine/memory):00561 [5]             ldu   ,y                       ; load block to U (output value)
                      (new-engine/memory):00562         
A491 AE46             (new-engine/memory):00563 [6]             ldx   tlsf.blockHdr.next,u     ; load next block in list (if exists)
A493 AFA4             (new-engine/memory):00564 [5]             stx   ,y                       ; store new head of list
A495 8CFFFF           (new-engine/memory):00565 [4]             cmpx  #tlsf.block.nullptr
A498 2706             (new-engine/memory):00566 [3]             beq   >                        ; branch if no more head at this index
A49A CCFFFF           (new-engine/memory):00567 [3]                 ldd   #tlsf.block.nullptr  ; update new head
A49D ED04             (new-engine/memory):00568 [6]                 std   tlsf.blockHdr.prev,x ; with no previous block
A49F 39               (new-engine/memory):00569 [5]                 rts                                         
                      (new-engine/memory):00570         !
                      (new-engine/memory):00571                 ; remove index from sl bitmap
A4A0 8EA242           (new-engine/memory):00572 [3]             ldx   #tlsf.map.bitset
A4A3 B6A01B           (new-engine/memory):00573 [5]             lda   tlsf.fl
A4A6 48               (new-engine/memory):00574 [2]             asla                           ; mul by tlsf.sl.bitmap.size
A4A7 108EA01F         (new-engine/memory):00575 [4]             ldy   #tlsf.sl.bitmaps
A4AB 31A6             (new-engine/memory):00576 [5]             leay  a,y
A4AD F6A01C           (new-engine/memory):00577 [5]             ldb   tlsf.sl
A4B0 58               (new-engine/memory):00578 [2]             aslb
A4B1 EC85             (new-engine/memory):00579 [6]             ldd   b,x
A4B3 43               (new-engine/memory):00580 [2]             coma
A4B4 53               (new-engine/memory):00581 [2]             comb
A4B5 A4A4             (new-engine/memory):00582 [4]             anda  ,y
A4B7 E421             (new-engine/memory):00583 [5]             andb  1,y
A4B9 EDA4             (new-engine/memory):00584 [5]             std   ,y
A4BB 2611             (new-engine/memory):00585 [3]             bne   >
                      (new-engine/memory):00586         
                      (new-engine/memory):00587                 ; remove index from fl bitmap
A4BD F6A01B           (new-engine/memory):00588 [5]             ldb   tlsf.fl
A4C0 58               (new-engine/memory):00589 [2]             aslb
A4C1 EC85             (new-engine/memory):00590 [6]             ldd   b,x
A4C3 43               (new-engine/memory):00591 [2]             coma
A4C4 53               (new-engine/memory):00592 [2]             comb
A4C5 B4A023           (new-engine/memory):00593 [5]             anda  tlsf.fl.bitmap
A4C8 F4A024           (new-engine/memory):00594 [5]             andb  tlsf.fl.bitmap+1
A4CB FDA023           (new-engine/memory):00595 [6]             std   tlsf.fl.bitmap
A4CE 39               (new-engine/memory):00596 [5]     !       rts
                      (new-engine/memory):00597         
                      (new-engine/memory):00598         ;-----------------------------------------------------------------
                      (new-engine/memory):00599         ; tlsf.bsr
                      (new-engine/memory):00600         ; input  REG : [tlsf.bsr.in] 16bit integer (1-xFFFF)
                      (new-engine/memory):00601         ; output REG : [B] number of leading 0-bits
                      (new-engine/memory):00602         ;-----------------------------------------------------------------
                      (new-engine/memory):00603         ; Bit Scan Reverse (bsr) in a 16 bit integer,
                      (new-engine/memory):00604         ; searches for the most significant set bit (1 bit).
                      (new-engine/memory):00605         ; Output number is bit position from 0 to 15.
                      (new-engine/memory):00606         ; A zero input value will result in an unexpected behaviour,
                      (new-engine/memory):00607         ; value 0 will be returned.
                      (new-engine/memory):00608         ;-----------------------------------------------------------------
A4CF 0000             (new-engine/memory):00609         tlsf.bsr.in fdb 0 ; input parameter
A4D1                  (new-engine/memory):00610         tlsf.bsr
A4D1 B6A4CF           (new-engine/memory):00611 [5]             lda   tlsf.bsr.in
A4D4 2704             (new-engine/memory):00612 [3]             beq   @lsb
A4D6                  (new-engine/memory):00613         @msb
A4D6 C60F             (new-engine/memory):00614 [2]             ldb   #types.WORD_BITS-1
A4D8 2005             (new-engine/memory):00615 [3]             bra   >
A4DA                  (new-engine/memory):00616         @lsb
A4DA B6A4D0           (new-engine/memory):00617 [5]                 lda   tlsf.bsr.in+1
A4DD C607             (new-engine/memory):00618 [2]                 ldb   #types.BYTE_BITS-1
A4DF 85F0             (new-engine/memory):00619 [2]     !       bita  #$f0
A4E1 2606             (new-engine/memory):00620 [3]             bne   >
A4E3 C004             (new-engine/memory):00621 [2]                 subb  #4
A4E5 48               (new-engine/memory):00622 [2]                 lsla
A4E6 48               (new-engine/memory):00623 [2]                 lsla
A4E7 48               (new-engine/memory):00624 [2]                 lsla
A4E8 48               (new-engine/memory):00625 [2]                 lsla
A4E9 85C0             (new-engine/memory):00626 [2]     !       bita  #$c0
A4EB 2604             (new-engine/memory):00627 [3]             bne   >
A4ED C002             (new-engine/memory):00628 [2]                 subb  #2
A4EF 48               (new-engine/memory):00629 [2]                 lsla
A4F0 48               (new-engine/memory):00630 [2]                 lsla
A4F1 2B01             (new-engine/memory):00631 [3]     !       bmi   >
A4F3 5A               (new-engine/memory):00632 [2]                 decb
A4F4 39               (new-engine/memory):00633 [5]     !       rts
                      (new-engine/memory):00634         
                      (new-engine/memory):00635         ;-----------------------------------------------------------------
                      (new-engine/memory):00636         ; tlsf.ctz
                      (new-engine/memory):00637         ; input  REG : [tlsf.ctz.in] 16bit integer
                      (new-engine/memory):00638         ; output REG : [B] number of trailing 0-bits
                      (new-engine/memory):00639         ;-----------------------------------------------------------------
                      (new-engine/memory):00640         ; Count trailing zeros in a 16 bit integer,
                      (new-engine/memory):00641         ; also known as Number of trailing zeros (ntz)
                      (new-engine/memory):00642         ; Output number is from 0 to 15
                      (new-engine/memory):00643         ; A zero input value will result in an unexpected behaviour,
                      (new-engine/memory):00644         ; value 15 will be returned.
                      (new-engine/memory):00645         ;-----------------------------------------------------------------
A4F5 0000             (new-engine/memory):00646         tlsf.ctz.in fdb 0 ; input parameter
A4F7                  (new-engine/memory):00647         tlsf.ctz
A4F7 B6A4F6           (new-engine/memory):00648 [5]             lda   tlsf.ctz.in+1
A4FA 2703             (new-engine/memory):00649 [3]             beq   @msb
A4FC                  (new-engine/memory):00650         @lsb
A4FC 5F               (new-engine/memory):00651 [2]             clrb
A4FD 2005             (new-engine/memory):00652 [3]             bra   >
A4FF                  (new-engine/memory):00653         @msb
A4FF B6A4F5           (new-engine/memory):00654 [5]                 lda   tlsf.ctz.in
A502 C608             (new-engine/memory):00655 [2]                 ldb   #types.BYTE_BITS
A504 850F             (new-engine/memory):00656 [2]     !       bita  #$0f
A506 2606             (new-engine/memory):00657 [3]             bne   >
A508 CB04             (new-engine/memory):00658 [2]                 addb  #4
A50A 44               (new-engine/memory):00659 [2]                 lsra
A50B 44               (new-engine/memory):00660 [2]                 lsra
A50C 44               (new-engine/memory):00661 [2]                 lsra
A50D 44               (new-engine/memory):00662 [2]                 lsra
A50E 8503             (new-engine/memory):00663 [2]     !       bita  #$03
A510 2604             (new-engine/memory):00664 [3]             bne   >
A512 CB02             (new-engine/memory):00665 [2]                 addb  #2
A514 44               (new-engine/memory):00666 [2]                 lsra
A515 44               (new-engine/memory):00667 [2]                 lsra
A516 8501             (new-engine/memory):00668 [2]     !       bita  #$01
A518 2601             (new-engine/memory):00669 [3]             bne   >
A51A 5C               (new-engine/memory):00670 [2]                 incb
A51B 39               (new-engine/memory):00671 [5]     !       rts
                      (C:\Users\bhrou\gi):00073         
                      (C:\Users\bhrou\gi):00074         ; temporary space
                      (C:\Users\bhrou\gi):00075         ; ---------------
A51C 0000000000000000 (C:\Users\bhrou\gi):00076         ptsec      fill  0,256 ; Temporary space for partial sector loading
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A61C 00               (C:\Users\bhrou\gi):00077         diskid     fcb   0     ; Disk id
A61D 00               (C:\Users\bhrou\gi):00078         nsect      fcb   0     ; Sector counter
A61E 00               (C:\Users\bhrou\gi):00079         track      fcb   0     ; Track number
A61F 00               (C:\Users\bhrou\gi):00080         sector     fcb   0     ; Sector number
                      (C:\Users\bhrou\gi):00081         
                      (C:\Users\bhrou\gi):00082         ; directory
                      (C:\Users\bhrou\gi):00083         ; ---------
A620 0000             (C:\Users\bhrou\gi):00084         loader.dir fdb   0
                      (C:\Users\bhrou\gi):00085         
                      (C:\Users\bhrou\gi):00086         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00087         ; loader.scene.loadDefault
                      (C:\Users\bhrou\gi):00088         ;
                      (C:\Users\bhrou\gi):00089         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00090         ; Load and run the default scene at boot time
                      (C:\Users\bhrou\gi):00091         ; settings can be overided by defines at build time
                      (C:\Users\bhrou\gi):00092         ;-----------------------------------------------------------------
A622                  (C:\Users\bhrou\gi):00093         loader.scene.loadDefault
                      (C:\Users\bhrou\gi):00094         
                      (C:\Users\bhrou\gi):00095                 ; init allocator
A622 CC1000           (C:\Users\bhrou\gi):00096 [3]             ldd   #loader.DEFAULT_DYNAMIC_MEMORY_SIZE
A625 8EAAB4           (C:\Users\bhrou\gi):00097 [3]             ldx   #loader.memoryPool
A628 BDA1BE           (C:\Users\bhrou\gi):00098 [8]             jsr   tlsf.init
                      (C:\Users\bhrou\gi):00099         
                      (C:\Users\bhrou\gi):00100                 ; load directory entries
A62B 8600             (C:\Users\bhrou\gi):00101 [2]             lda   #loader.DEFAULT_SCENE_DIR_ID
A62D BDA736           (C:\Users\bhrou\gi):00102 [8]             jsr   loader.dir.load
                      (C:\Users\bhrou\gi):00103         
                      (C:\Users\bhrou\gi):00104                 ; load default scene files
A630 8E0004           (C:\Users\bhrou\gi):00105 [3]             ldx   #loader.DEFAULT_SCENE_FILE_ID
A633 BDA650           (C:\Users\bhrou\gi):00106 [8]             jsr   loader.file.malloc
                      (C:\Users\bhrou\gi):00107         
A636 C604             (C:\Users\bhrou\gi):00108 [2]             ldb   #loader.PAGE
                      (C:\Users\bhrou\gi):00109         
                      (C:\Users\bhrou\gi):00110                 ; batch load files from disk, before decompression
                      (C:\Users\bhrou\gi):00111                 ; to benefit from sector interlacing
A638 8EA7EE           (C:\Users\bhrou\gi):00112 [3]             ldx   #loader.file.load
A63B BFA66D           (C:\Users\bhrou\gi):00113 [6]             stx   loader.scene.routine
A63E BDA671           (C:\Users\bhrou\gi):00114 [8]             jsr   loader.scene.apply
                      (C:\Users\bhrou\gi):00115         
A641 8EA923           (C:\Users\bhrou\gi):00116 [3]             ldx   #loader.file.decompress
A644 BFA66D           (C:\Users\bhrou\gi):00117 [6]             stx   loader.scene.routine
A647 BDA671           (C:\Users\bhrou\gi):00118 [8]             jsr   loader.scene.apply
                      (C:\Users\bhrou\gi):00119         
                      (C:\Users\bhrou\gi):00120                 ; TODO add link here
                      (C:\Users\bhrou\gi):00121         
A64A BDA321           (C:\Users\bhrou\gi):00122 [8]             jsr   tlsf.free
A64D 7E0100           (C:\Users\bhrou\gi):00123 [4]             jmp   loader.DEFAULT_SCENE_ENTRY_POINT
                      (C:\Users\bhrou\gi):00124         
                      (C:\Users\bhrou\gi):00125         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00126         ; loader.file.malloc
                      (C:\Users\bhrou\gi):00127         ;
                      (C:\Users\bhrou\gi):00128         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00129         ; output REG : [U] ptr to allocated memory
                      (C:\Users\bhrou\gi):00130         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00131         ; Allocate memory for a file
                      (C:\Users\bhrou\gi):00132         ;-----------------------------------------------------------------
A650                  (C:\Users\bhrou\gi):00133         loader.file.malloc
A650 3410             (C:\Users\bhrou\gi):00134 [7]             pshs  x
A652 BDA912           (C:\Users\bhrou\gi):00135 [8]             jsr   loader.dir.getFile
                      (C:\Users\bhrou\gi):00136         
A655 EC24             (C:\Users\bhrou\gi):00137 [6]             ldd   direntry.sizea,y  ; Check for empty file flag
A657 1083FF00         (C:\Users\bhrou\gi):00138 [5]             cmpd  #$ff00
A65B 2604             (C:\Users\bhrou\gi):00139 [3]             bne   >
A65D CE0000           (C:\Users\bhrou\gi):00140 [3]             ldu   #0                ; If file is empty, return 0
A660 39               (C:\Users\bhrou\gi):00141 [5]             rts
                      (C:\Users\bhrou\gi):00142         !
A661 ECA4             (C:\Users\bhrou\gi):00143 [5]             ldd   direntry.sizeu,y  ; Read file data size
A663 843F             (C:\Users\bhrou\gi):00144 [2]             anda  #%00111111        ; File size is stored in 14 bits
A665 C30001           (C:\Users\bhrou\gi):00145 [4]             addd  #1                ; File size is stored as size-1
A668 BDA262           (C:\Users\bhrou\gi):00146 [8]             jsr   tlsf.malloc
A66B 3590             (C:\Users\bhrou\gi):00147 [9]             puls  x,pc
                      (C:\Users\bhrou\gi):00148         
                      (C:\Users\bhrou\gi):00149         
                      (C:\Users\bhrou\gi):00150         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00151         ; loader.scene.apply
                      (C:\Users\bhrou\gi):00152         ;
                      (C:\Users\bhrou\gi):00153         ; input  REG : [U] ptr to scene data
                      (C:\Users\bhrou\gi):00154         ; input  VAR : [loader.scene.routine] routine to run against files
                      (C:\Users\bhrou\gi):00155         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00156         ; Apply a scene by loading files to RAM
                      (C:\Users\bhrou\gi):00157         ; 3 different entry types can be combined in a scene.
                      (C:\Users\bhrou\gi):00158         ; endmarker is type: %00
                      (C:\Users\bhrou\gi):00159         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00160         
                      (C:\Users\bhrou\gi):00161         ; scene structure
                      (C:\Users\bhrou\gi):00162         ; ---------------
                      (C:\Users\bhrou\gi):00163         scene.header STRUCT
0000s                 (C:\Users\bhrou\gi):00164         type     rmb 0
0000s                 (C:\Users\bhrou\gi):00165         nbfiles  rmb types.WORD   ; [00]                     - [00:endmarker, 01:list of dest and id, 10:ajdacent dest and list of id, 11:adjacent dest and id]
                      (C:\Users\bhrou\gi):00166                                   ; [00 000] [0000 000]      - [nb files]
0002s                 (C:\Users\bhrou\gi):00167                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00168         
                      (C:\Users\bhrou\gi):00169         scene   STRUCT
0000s                 (C:\Users\bhrou\gi):00170         page     rmb types.BYTE   ; [0000 000]               - [page]
0001s                 (C:\Users\bhrou\gi):00171         address  rmb types.WORD   ; [0000 000] [0000 000]    - [dest address]
0003s                 (C:\Users\bhrou\gi):00172         fileid   rmb types.WORD   ; [0000 000] [0000 000]    - [file id]
0005s                 (C:\Users\bhrou\gi):00173                 ENDSTRUCT
                      (C:\Users\bhrou\gi):00174         
A66D 0000             (C:\Users\bhrou\gi):00175         loader.scene.routine   fdb 0
A66F 0000             (C:\Users\bhrou\gi):00176         loader.scene.fileCount fdb 0
                      (C:\Users\bhrou\gi):00177         
A671                  (C:\Users\bhrou\gi):00178         loader.scene.apply
                      (C:\Users\bhrou\gi):00179                 ; parse scene data and load dir/files
A671 3454             (C:\Users\bhrou\gi):00180 [10]            pshs  b,x,u
A673 31C4             (C:\Users\bhrou\gi):00181 [4]             leay  ,u
                      (C:\Users\bhrou\gi):00182                 
                      (C:\Users\bhrou\gi):00183                 ; a scene contains a list of blocks with a certain type
                      (C:\Users\bhrou\gi):00184                 ; a block type of 0 is the end marker
A675                  (C:\Users\bhrou\gi):00185         @nextblock
A675 A6A4             (C:\Users\bhrou\gi):00186 [4]             lda   scene.header.type,y
A677 84C0             (C:\Users\bhrou\gi):00187 [2]             anda  #%11000000
A679 2602             (C:\Users\bhrou\gi):00188 [3]             bne   >
A67B 35D4             (C:\Users\bhrou\gi):00189 [12]            puls  b,x,u,pc                  ; end marker %00 found, return
                      (C:\Users\bhrou\gi):00190         !
A67D 8140             (C:\Users\bhrou\gi):00191 [2]             cmpa  #%01000000
A67F 2605             (C:\Users\bhrou\gi):00192 [3]             bne   >
A681 BDA694           (C:\Users\bhrou\gi):00193 [8]             jsr   loader.scene.apply.type01
A684 20EF             (C:\Users\bhrou\gi):00194 [3]             bra   @nextblock
A686 8180             (C:\Users\bhrou\gi):00195 [2]     !       cmpa  #%10000000
A688 2605             (C:\Users\bhrou\gi):00196 [3]             bne   >
A68A BDA6B2           (C:\Users\bhrou\gi):00197 [8]             jsr   loader.scene.apply.type10
A68D 20E6             (C:\Users\bhrou\gi):00198 [3]             bra   @nextblock
A68F BDA6EC           (C:\Users\bhrou\gi):00199 [8]     !       jsr   loader.scene.apply.type11
A692 20E1             (C:\Users\bhrou\gi):00200 [3]             bra   @nextblock
                      (C:\Users\bhrou\gi):00201         
                      (C:\Users\bhrou\gi):00202         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00203         ; loader.scene.apply.type01
                      (C:\Users\bhrou\gi):00204         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00205         ; type %01 | nb files (0-16383)
                      (C:\Users\bhrou\gi):00206         ; dest page \
                      (C:\Users\bhrou\gi):00207         ; dest addr  - n times (for each file)
                      (C:\Users\bhrou\gi):00208         ; file id   /
                      (C:\Users\bhrou\gi):00209         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00210         
A694                  (C:\Users\bhrou\gi):00211         loader.scene.apply.type01
A694 ECA4             (C:\Users\bhrou\gi):00212 [5]             ldd   scene.header.nbfiles,y
A696 3122             (C:\Users\bhrou\gi):00213 [5]             leay  sizeof{scene.header},y
A698 843F             (C:\Users\bhrou\gi):00214 [2]             anda  #%00111111
A69A                  (C:\Users\bhrou\gi):00215         @loop
A69A E6A4             (C:\Users\bhrou\gi):00216 [4]             ldb   scene.page,y
A69C EE21             (C:\Users\bhrou\gi):00217 [6]             ldu   scene.address,y
A69E AE23             (C:\Users\bhrou\gi):00218 [6]             ldx   scene.fileid,y
A6A0 AD9FA66D         (C:\Users\bhrou\gi):00219 [12]            jsr   [loader.scene.routine]
A6A4 3125             (C:\Users\bhrou\gi):00220 [5]             leay  sizeof{scene},y
A6A6 FCA66F           (C:\Users\bhrou\gi):00221 [6]             ldd   loader.scene.fileCount
A6A9 830001           (C:\Users\bhrou\gi):00222 [4]             subd  #1
A6AC FDA66F           (C:\Users\bhrou\gi):00223 [6]             std   loader.scene.fileCount
A6AF 26E9             (C:\Users\bhrou\gi):00224 [3]             bne   @loop
A6B1 39               (C:\Users\bhrou\gi):00225 [5]             rts
                      (C:\Users\bhrou\gi):00226         
                      (C:\Users\bhrou\gi):00227         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00228         ; loader.scene.apply.type10
                      (C:\Users\bhrou\gi):00229         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00230         ; type %10 | nb files (0-16383)
                      (C:\Users\bhrou\gi):00231         ; dest page
                      (C:\Users\bhrou\gi):00232         ; dest addr
                      (C:\Users\bhrou\gi):00233         ; file id - n times (for each file)
                      (C:\Users\bhrou\gi):00234         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00235         
A6B2                  (C:\Users\bhrou\gi):00236         loader.scene.apply.type10
A6B2 ECA4             (C:\Users\bhrou\gi):00237 [5]             ldd   scene.header.nbfiles,y
A6B4 3122             (C:\Users\bhrou\gi):00238 [5]             leay  sizeof{scene.header},y
A6B6 843F             (C:\Users\bhrou\gi):00239 [2]             anda  #%00111111
A6B8 FDA66F           (C:\Users\bhrou\gi):00240 [6]             std   loader.scene.fileCount
A6BB E6A4             (C:\Users\bhrou\gi):00241 [4]             ldb   scene.page,y
A6BD EE21             (C:\Users\bhrou\gi):00242 [6]             ldu   scene.address,y
A6BF 3123             (C:\Users\bhrou\gi):00243 [5]             leay  scene.fileid,y
A6C1                  (C:\Users\bhrou\gi):00244         @loop
A6C1 AEA1             (C:\Users\bhrou\gi):00245 [8]             ldx   ,y++
A6C3 AD9FA66D         (C:\Users\bhrou\gi):00246 [12]            jsr   [loader.scene.routine]
A6C7 3426             (C:\Users\bhrou\gi):00247 [9]             pshs  d,y
A6C9 BDA912           (C:\Users\bhrou\gi):00248 [8]             jsr   loader.dir.getFile
A6CC ECA4             (C:\Users\bhrou\gi):00249 [5]             ldd   direntry.sizeu,y  ; Read file data size
A6CE 843F             (C:\Users\bhrou\gi):00250 [2]             anda  #%00111111        ; File size is stored in 14 bits
A6D0 C30001           (C:\Users\bhrou\gi):00251 [4]             addd  #1                ; File size is stored as size-1
A6D3 33CB             (C:\Users\bhrou\gi):00252 [8]             leau  d,u               ; move address to next location
A6D5 3526             (C:\Users\bhrou\gi):00253 [9]             puls  d,y
A6D7 11834000         (C:\Users\bhrou\gi):00254 [5]             cmpu  #$4000
A6DB 2604             (C:\Users\bhrou\gi):00255 [3]             bne  >
A6DD CE0000           (C:\Users\bhrou\gi):00256 [3]             ldu   #0
A6E0 5C               (C:\Users\bhrou\gi):00257 [2]             incb                    ; move to next page
                      (C:\Users\bhrou\gi):00258         !
A6E1 BEA66F           (C:\Users\bhrou\gi):00259 [6]             ldx   loader.scene.fileCount
A6E4 301F             (C:\Users\bhrou\gi):00260 [5]             leax  -1,x
A6E6 BFA66F           (C:\Users\bhrou\gi):00261 [6]             stx   loader.scene.fileCount
A6E9 26D6             (C:\Users\bhrou\gi):00262 [3]             bne   @loop
A6EB 39               (C:\Users\bhrou\gi):00263 [5]             rts
                      (C:\Users\bhrou\gi):00264         
                      (C:\Users\bhrou\gi):00265         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00266         ; loader.scene.apply.type11
                      (C:\Users\bhrou\gi):00267         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00268         ; type %11 | nb files (0-16383)
                      (C:\Users\bhrou\gi):00269         ; dest page
                      (C:\Users\bhrou\gi):00270         ; dest addr
                      (C:\Users\bhrou\gi):00271         ; start file id
                      (C:\Users\bhrou\gi):00272         ;-----------------------------------------------------------------
                      (C:\Users\bhrou\gi):00273         
A6EC                  (C:\Users\bhrou\gi):00274         loader.scene.apply.type11
A6EC ECA4             (C:\Users\bhrou\gi):00275 [5]             ldd   scene.header.nbfiles,y
A6EE 3122             (C:\Users\bhrou\gi):00276 [5]             leay  sizeof{scene.header},y
A6F0 843F             (C:\Users\bhrou\gi):00277 [2]             anda  #%00111111
A6F2 FDA66F           (C:\Users\bhrou\gi):00278 [6]             std   loader.scene.fileCount
A6F5 E6A4             (C:\Users\bhrou\gi):00279 [4]             ldb   scene.page,y
A6F7 EE21             (C:\Users\bhrou\gi):00280 [6]             ldu   scene.address,y
A6F9 AE23             (C:\Users\bhrou\gi):00281 [6]             ldx   scene.fileid,y
A6FB 3125             (C:\Users\bhrou\gi):00282 [5]             leay  sizeof{scene},y
A6FD 3420             (C:\Users\bhrou\gi):00283 [7]             pshs  y
A6FF                  (C:\Users\bhrou\gi):00284         @loop
A6FF AD9FA66D         (C:\Users\bhrou\gi):00285 [12]            jsr   [loader.scene.routine]
A703 3404             (C:\Users\bhrou\gi):00286 [6]             pshs  b
A705 BDA912           (C:\Users\bhrou\gi):00287 [8]             jsr   loader.dir.getFile
A708 ECA4             (C:\Users\bhrou\gi):00288 [5]             ldd   direntry.sizeu,y  ; Read file data size
A70A 843F             (C:\Users\bhrou\gi):00289 [2]             anda  #%00111111        ; File size is stored in 14 bits
A70C C30001           (C:\Users\bhrou\gi):00290 [4]             addd  #1                ; File size is stored as size-1
A70F 33CB             (C:\Users\bhrou\gi):00291 [8]             leau  d,u               ; move address to next location
A711 3504             (C:\Users\bhrou\gi):00292 [6]             puls  b                 ; retore page id
A713 11834000         (C:\Users\bhrou\gi):00293 [5]             cmpu  #$4000
A717 2604             (C:\Users\bhrou\gi):00294 [3]             bne  >
A719 CE0000           (C:\Users\bhrou\gi):00295 [3]             ldu   #0
A71C 5C               (C:\Users\bhrou\gi):00296 [2]             incb                    ; move to next page id
                      (C:\Users\bhrou\gi):00297         !
A71D C601             (C:\Users\bhrou\gi):00298 [2]             ldb   #1                ; move to next file id (add one)
A71F A6A4             (C:\Users\bhrou\gi):00299 [4]             lda   direntry.bitfld,y
A721 48               (C:\Users\bhrou\gi):00300 [2]             lsla
A722 C900             (C:\Users\bhrou\gi):00301 [2]             adcb  #0                ; add one if file is compressed 
A724 48               (C:\Users\bhrou\gi):00302 [2]             lsla
A725 C900             (C:\Users\bhrou\gi):00303 [2]             adcb  #0                ; add one if file is dynamically linked
A727 3A               (C:\Users\bhrou\gi):00304 [3]             abx                     ; apply new file id
A728 10BEA66F         (C:\Users\bhrou\gi):00305 [7]             ldy   loader.scene.fileCount
A72C 313F             (C:\Users\bhrou\gi):00306 [5]             leay  -1,y
A72E 10BFA66F         (C:\Users\bhrou\gi):00307 [7]             sty   loader.scene.fileCount
A732 26CB             (C:\Users\bhrou\gi):00308 [3]             bne   @loop
A734 35A0             (C:\Users\bhrou\gi):00309 [9]             puls  y,pc
                      (C:\Users\bhrou\gi):00310         
                      (C:\Users\bhrou\gi):00311         ;---------------------------------------
                      (C:\Users\bhrou\gi):00312         ; loader.dir.load
                      (C:\Users\bhrou\gi):00313         ;
                      (C:\Users\bhrou\gi):00314         ; input  REG : [A] diskid
                      (C:\Users\bhrou\gi):00315         ;---------------------------------------
                      (C:\Users\bhrou\gi):00316         ; Load directory entries
                      (C:\Users\bhrou\gi):00317         ;---------------------------------------
                      (C:\Users\bhrou\gi):00318         
A736                  (C:\Users\bhrou\gi):00319         loader.dir.load
A736 B7A61C           (C:\Users\bhrou\gi):00320 [5]             sta   >diskid             ; Save desired directory id for later check
A739 FEA620           (C:\Users\bhrou\gi):00321 [6]             ldu   >loader.dir
A73C 2708             (C:\Users\bhrou\gi):00322 [3]             beq   >
A73E A143             (C:\Users\bhrou\gi):00323 [5]             cmpa  dirheader.diskid,u
A740 2601             (C:\Users\bhrou\gi):00324 [3]             bne   @free
A742 39               (C:\Users\bhrou\gi):00325 [5]             rts                       ; Requested diskid is already loaded, return
A743                  (C:\Users\bhrou\gi):00326         @free   
A743 BDA321           (C:\Users\bhrou\gi):00327 [8]             jsr   tlsf.free           ; Requested diskid is different, free actual directory
                      (C:\Users\bhrou\gi):00328         !
A746 CCA51C           (C:\Users\bhrou\gi):00329 [3]             ldd   #ptsec
A749 FDA620           (C:\Users\bhrou\gi):00330 [6]             std   >loader.dir
                      (C:\Users\bhrou\gi):00331         ; set default dir location on disk
A74C C601             (C:\Users\bhrou\gi):00332 [2]             ldb   #$01                ; D: [face]
A74E 8E0001           (C:\Users\bhrou\gi):00333 [3]             ldx   #$0001              ; X: [track] [sector]
                      (C:\Users\bhrou\gi):00334         ; read first directory sector
A751 B6A61C           (C:\Users\bhrou\gi):00335 [5]             lda   >diskid
A754 810A             (C:\Users\bhrou\gi):00336 [2]             cmpa  #10                 ; This version handle the display of disk id range 0-9
A756 2504             (C:\Users\bhrou\gi):00337 [3]             blo   @ascii
A758 86A1             (C:\Users\bhrou\gi):00338 [2]             lda   #33+128             ; Print an esclamation when disk id is over 9
A75A 2002             (C:\Users\bhrou\gi):00339 [3]             bra   >
A75C 8BB0             (C:\Users\bhrou\gi):00340 [2]     @ascii  adda  #48+128             ; Base index for ascii numbers plus end string bit flag
A75E B7A8F8           (C:\Users\bhrou\gi):00341 [5]     !       sta   >messdiskid         ; Update message string with id
A761 D749             (C:\Users\bhrou\gi):00342 [4]             stb   <map.DK.DRV         ; Set directory location
A763 1F10             (C:\Users\bhrou\gi):00343 [6]             tfr   x,d                 ; on floppy disk
A765 974B             (C:\Users\bhrou\gi):00344 [4]             sta   <map.DK.TRK+1       ; B is loaded with sector id
A767 10BEA620         (C:\Users\bhrou\gi):00345 [7]             ldy   >loader.dir         ; Loading address for
A76B 109F4F           (C:\Users\bhrou\gi):00346 [6]             sty   <map.DK.BUF         ; directory data
A76E 8602             (C:\Users\bhrou\gi):00347 [2]             lda   #$02                ; Read code
A770 9748             (C:\Users\bhrou\gi):00348 [4]             sta   <map.DK.OPC         ; operation
A772 CEA896           (C:\Users\bhrou\gi):00349 [3]             ldu   #sclist             ; Interleave list
A775 8EA8DB           (C:\Users\bhrou\gi):00350 [3]             ldx   #messIO             ; Info message
A778 A6C5             (C:\Users\bhrou\gi):00351 [5]             lda   b,u                 ; Get sector
A77A 974C             (C:\Users\bhrou\gi):00352 [4]             sta   <map.DK.SEC         ; number
A77C BDE004           (C:\Users\bhrou\gi):00353 [8]     @retry  jsr   >map.DKCONT         ; Load sector
A77F 240A             (C:\Users\bhrou\gi):00354 [3]             bcc   >                   ; Skip if no error
A781 BDE004           (C:\Users\bhrou\gi):00355 [8]             jsr   >map.DKCONT         ; Reload sector
A784 2405             (C:\Users\bhrou\gi):00356 [3]             bcc   >                   ; Skip if no error
A786 BDA8BE           (C:\Users\bhrou\gi):00357 [8]     @info   jsr   >info               ; Error
A789 20F1             (C:\Users\bhrou\gi):00358 [3]             bra   @retry
                      (C:\Users\bhrou\gi):00359         ; check for directory tag match
A78B 8EA8E9           (C:\Users\bhrou\gi):00360 [3]     !       ldx   #messinsertdisk
A78E A6A4             (C:\Users\bhrou\gi):00361 [4]             lda   dirheader.tag,y
A790 8149             (C:\Users\bhrou\gi):00362 [2]             cmpa  #'I'
A792 26F2             (C:\Users\bhrou\gi):00363 [3]             bne   @info
A794 A621             (C:\Users\bhrou\gi):00364 [5]             lda   dirheader.tag+1,y
A796 8144             (C:\Users\bhrou\gi):00365 [2]             cmpa  #'D'
A798 26EC             (C:\Users\bhrou\gi):00366 [3]             bne   @info
A79A A622             (C:\Users\bhrou\gi):00367 [5]             lda   dirheader.tag+2,y
A79C 8158             (C:\Users\bhrou\gi):00368 [2]             cmpa  #'X'
A79E 26E6             (C:\Users\bhrou\gi):00369 [3]             bne   @info
                      (C:\Users\bhrou\gi):00370         ; check for directory id match
A7A0 A623             (C:\Users\bhrou\gi):00371 [5]             lda   dirheader.diskid,y
A7A2 B1A61C           (C:\Users\bhrou\gi):00372 [5]             cmpa  >diskid
A7A5 26DF             (C:\Users\bhrou\gi):00373 [3]             bne   @info
                      (C:\Users\bhrou\gi):00374         ; read remaining directory entries
A7A7 A624             (C:\Users\bhrou\gi):00375 [5]             lda   dirheader.nsector,y ; init nb sectors to read      
A7A9 B7A61D           (C:\Users\bhrou\gi):00376 [5]             sta   >nsect
                      (C:\Users\bhrou\gi):00377         ; allocate memory
A7AC F7A7BB           (C:\Users\bhrou\gi):00378 [5]             stb   @b
A7AF 5F               (C:\Users\bhrou\gi):00379 [2]             clrb
A7B0 BDA262           (C:\Users\bhrou\gi):00380 [8]             jsr   tlsf.malloc
A7B3 FFA620           (C:\Users\bhrou\gi):00381 [6]             stu   >loader.dir
A7B6 31C90100         (C:\Users\bhrou\gi):00382 [8]             leay  256,u               ; First sector will be copied later
A7BA C600             (C:\Users\bhrou\gi):00383 [2]             ldb   #0
     A7BB             (C:\Users\bhrou\gi):00384         @b      equ   *-1
A7BC CEA896           (C:\Users\bhrou\gi):00385 [3]             ldu   #sclist
A7BF 8EA8DB           (C:\Users\bhrou\gi):00386 [3]             ldx   #messIO             ; Error message
A7C2 2011             (C:\Users\bhrou\gi):00387 [3]             bra   @next
A7C4 A6C5             (C:\Users\bhrou\gi):00388 [5]     @load   lda   b,u                 ; Get sector
A7C6 974C             (C:\Users\bhrou\gi):00389 [4]             sta   <map.DK.SEC         ; number
A7C8 BDE004           (C:\Users\bhrou\gi):00390 [8]             jsr   >map.DKCONT         ; Load sector
A7CB 2408             (C:\Users\bhrou\gi):00391 [3]             bcc   @next               ; Skip if no error
A7CD BDE004           (C:\Users\bhrou\gi):00392 [8]             jsr   >map.DKCONT         ; Reload sector
A7D0 2403             (C:\Users\bhrou\gi):00393 [3]             bcc   @next               ; Skip if no error
A7D2 7EA8A8           (C:\Users\bhrou\gi):00394 [4]             jmp   err                 ; Error
A7D5 0C4F             (C:\Users\bhrou\gi):00395 [6]     @next   inc   <map.DK.BUF         ; Move sector ptr
A7D7 5C               (C:\Users\bhrou\gi):00396 [2]             incb                      ; Sector+1
A7D8 7AA61D           (C:\Users\bhrou\gi):00397 [7]             dec   >nsect              ; Next
A7DB 26E7             (C:\Users\bhrou\gi):00398 [3]             bne   @load               ; sector
                      (C:\Users\bhrou\gi):00399         ; copy first sector into allocated memory
A7DD 8680             (C:\Users\bhrou\gi):00400 [2]             lda   #128
A7DF 8EA51C           (C:\Users\bhrou\gi):00401 [3]             ldx   #ptsec
A7E2 10BEA620         (C:\Users\bhrou\gi):00402 [7]             ldy   loader.dir
A7E6 EE81             (C:\Users\bhrou\gi):00403 [8]     !       ldu   ,x++               ; Read data
A7E8 EFA1             (C:\Users\bhrou\gi):00404 [8]             stu   ,y++               ; Write data
A7EA 4A               (C:\Users\bhrou\gi):00405 [2]             deca                     ; Until last
A7EB 26F9             (C:\Users\bhrou\gi):00406 [3]             bne   <                  ; data reached
A7ED 39               (C:\Users\bhrou\gi):00407 [5]             rts
                      (C:\Users\bhrou\gi):00408         
                      (C:\Users\bhrou\gi):00409         
                      (C:\Users\bhrou\gi):00410         ;---------------------------------------
                      (C:\Users\bhrou\gi):00411         ; loader.file.load
                      (C:\Users\bhrou\gi):00412         ;
                      (C:\Users\bhrou\gi):00413         ; input  REG : [X] file number
                      (C:\Users\bhrou\gi):00414         ; input  REG : [B] destination - page number
                      (C:\Users\bhrou\gi):00415         ; input  REG : [U] destination - address
                      (C:\Users\bhrou\gi):00416         ;
                      (C:\Users\bhrou\gi):00417         ; output REG : [D] $ff00 = empty file
                      (C:\Users\bhrou\gi):00418         ;---------------------------------------
                      (C:\Users\bhrou\gi):00419         ; load a file from disk to RAM
                      (C:\Users\bhrou\gi):00420         ;---------------------------------------
A7EE                  (C:\Users\bhrou\gi):00421         loader.file.load
A7EE 347E             (C:\Users\bhrou\gi):00422 [14]            pshs  dp,d,x,y,u
A7F0 8660             (C:\Users\bhrou\gi):00423 [2]             lda   #$60
A7F2 1F8B             (C:\Users\bhrou\gi):00424 [6]             tfr   a,dp               ; Set DP
A7F4 BDA8F9           (C:\Users\bhrou\gi):00425 [8]             jsr   switchpage
                      (C:\Users\bhrou\gi):00426         * Prepare loading
A7F7 BDA912           (C:\Users\bhrou\gi):00427 [8]             jsr   loader.dir.getFile
A7FA EC24             (C:\Users\bhrou\gi):00428 [6]             ldd   direntry.sizea,y   ; check empty file flag
A7FC 1083FF00         (C:\Users\bhrou\gi):00429 [5]             cmpd  #$ff00
A800 2601             (C:\Users\bhrou\gi):00430 [3]             bne   >
A802 39               (C:\Users\bhrou\gi):00431 [5]             rts                      ; file is empty, exit
A803 E6A4             (C:\Users\bhrou\gi):00432 [4]     !       ldb   direntry.bitfld,y  ; test if compressed data
A805 2A04             (C:\Users\bhrou\gi):00433 [3]             bpl   >                  ; skip if not compressed
A807 EC28             (C:\Users\bhrou\gi):00434 [6]             ldd   direntry.coffset,y ; get offset to write data
A809 33CB             (C:\Users\bhrou\gi):00435 [8]             leau  d,u
A80B E626             (C:\Users\bhrou\gi):00436 [5]     !       ldb   direntry.nsector,y ; Get number of sectors
A80D F7A61D           (C:\Users\bhrou\gi):00437 [5]             stb   >nsect             ; Set sector count
A810 EC22             (C:\Users\bhrou\gi):00438 [6]             ldd   direntry.track,y   ; Set track, face and
A812 FDA61E           (C:\Users\bhrou\gi):00439 [6]             std   >track             ; sector number
                      (C:\Users\bhrou\gi):00440         * First sector
A815 E624             (C:\Users\bhrou\gi):00441 [5]             ldb   direntry.sizea,y   ; Skip if
A817 270C             (C:\Users\bhrou\gi):00442 [3]             beq   ld3                ; full sect
A819 8EA51C           (C:\Users\bhrou\gi):00443 [3]             ldx   #ptsec             ; Init buffer
A81C 9F4F             (C:\Users\bhrou\gi):00444 [5]             stx   <map.DK.BUF        ; location
A81E 8D37             (C:\Users\bhrou\gi):00445 [7]             bsr   ldsec              ; Load sector
A820 EC24             (C:\Users\bhrou\gi):00446 [6]             ldd   direntry.sizea,y   ; Read A:size, B:offset
A822 3A               (C:\Users\bhrou\gi):00447 [3]             abx                      ; Adjust data ptr
A823 8D2A             (C:\Users\bhrou\gi):00448 [7]             bsr   tfrxua             ; Copy data from buffer to RAM
                      (C:\Users\bhrou\gi):00449         * Intermediate sectors
A825 DF4F             (C:\Users\bhrou\gi):00450 [5]     ld3     stu   <map.DK.BUF        ; Init dest location
A827 F6A61D           (C:\Users\bhrou\gi):00451 [5]     ld4     ldb   >nsect             ; Exit if
A82A 2720             (C:\Users\bhrou\gi):00452 [3]             beq   ld7                ; no sector
A82C C101             (C:\Users\bhrou\gi):00453 [2]             cmpb  #1
A82E 2204             (C:\Users\bhrou\gi):00454 [3]             bhi   ld5                ; Exit if
A830 A627             (C:\Users\bhrou\gi):00455 [5]             lda   direntry.sizez,y   ; last sector
A832 2606             (C:\Users\bhrou\gi):00456 [3]             bne   ld6
A834 8D21             (C:\Users\bhrou\gi):00457 [7]     ld5     bsr   ldsec              ; Load sector
A836 0C4F             (C:\Users\bhrou\gi):00458 [6]             inc   <map.DK.BUF        ; Update dest location MSB
A838 20ED             (C:\Users\bhrou\gi):00459 [3]             bra   ld4                ; Next sector
                      (C:\Users\bhrou\gi):00460         * Last sector
A83A F6A61D           (C:\Users\bhrou\gi):00461 [5]     ld6     ldb   >nsect             ; Skip if
A83D 270D             (C:\Users\bhrou\gi):00462 [3]             beq   ld7                ; no last sector
A83F DE4F             (C:\Users\bhrou\gi):00463 [5]             ldu   <map.DK.BUF        ; Data pointer
A841 8EA51C           (C:\Users\bhrou\gi):00464 [3]             ldx   #ptsec             ; Init buffer
A844 9F4F             (C:\Users\bhrou\gi):00465 [5]             stx   <map.DK.BUF        ; location
A846 8D0F             (C:\Users\bhrou\gi):00466 [7]             bsr   ldsec              ; Load sector
A848 A627             (C:\Users\bhrou\gi):00467 [5]             lda   direntry.sizez,y   ; Copy
A84A 8D03             (C:\Users\bhrou\gi):00468 [7]             bsr   tfrxua             ; data
                      (C:\Users\bhrou\gi):00469         * Exit
A84C 4F               (C:\Users\bhrou\gi):00470 [2]     ld7     clra                     ; file is not empty
A84D 35FE             (C:\Users\bhrou\gi):00471 [16]            puls  dp,d,x,y,u,pc
                      (C:\Users\bhrou\gi):00472         
                      (C:\Users\bhrou\gi):00473         * Copy memory space
A84F                  (C:\Users\bhrou\gi):00474         tfrxua
A84F E680             (C:\Users\bhrou\gi):00475 [6]             ldb   ,x+                ; Read data
A851 E7C0             (C:\Users\bhrou\gi):00476 [6]             stb   ,u+                ; Write data
A853 4A               (C:\Users\bhrou\gi):00477 [2]             deca                     ; Until las
A854 26F9             (C:\Users\bhrou\gi):00478 [3]             bne   tfrxua             ; data reached
A856 39               (C:\Users\bhrou\gi):00479 [5]     return  rts
                      (C:\Users\bhrou\gi):00480         
                      (C:\Users\bhrou\gi):00481         * Load a sector
     A857             (C:\Users\bhrou\gi):00482         ldsec   equ   *
A857 3470             (C:\Users\bhrou\gi):00483 [11]            pshs  x,y,u
A859 B6A61E           (C:\Users\bhrou\gi):00484 [5]             lda   >track             ; [0000 000] track [0] drive
A85C 0449             (C:\Users\bhrou\gi):00485 [6]             lsr   <map.DK.DRV        ; make room to drive id
A85E 44               (C:\Users\bhrou\gi):00486 [2]             lsra                     ; set cc with bit0 (drive) of track variable
A85F 0949             (C:\Users\bhrou\gi):00487 [6]             rol   <map.DK.DRV        ; set bit0 of drive id with cc
A861 F6A61E           (C:\Users\bhrou\gi):00488 [5]             ldb   >track
A864 C406             (C:\Users\bhrou\gi):00489 [2]             andb  #$06               ; get skew based on track nb : 0, 2, 4, 6, 0, 2, 4, 6, ...
A866 FBA61F           (C:\Users\bhrou\gi):00490 [5]             addb  >sector            ; add sector to skew
A869 C40F             (C:\Users\bhrou\gi):00491 [2]             andb  #$0f               ; loop the index
A86B 8EA896           (C:\Users\bhrou\gi):00492 [3]             ldx   #sclist            ; interleave table
A86E E685             (C:\Users\bhrou\gi):00493 [5]             ldb   b,x                ; read sector number
A870 0F4A             (C:\Users\bhrou\gi):00494 [6]             clr   <map.DK.TRK        ; init track msb (always 0)
A872 DD4B             (C:\Users\bhrou\gi):00495 [5]             std   <map.DK.TRK+1      ; track/sector
A874 BDE004           (C:\Users\bhrou\gi):00496 [8]             jsr   >map.DKCONT        ; load sector
A877 2407             (C:\Users\bhrou\gi):00497 [3]             bcc   ldsec1             ; skip if ok
A879 BDE004           (C:\Users\bhrou\gi):00498 [8]             jsr   >map.DKCONT        ; reload sector
A87C 1025F792         (C:\Users\bhrou\gi):00499 [5+?]           lbcs  error              ; I/O Error
                      (C:\Users\bhrou\gi):00500         * Next sector
A880 FCA61E           (C:\Users\bhrou\gi):00501 [6]     ldsec1  ldd   >track             ; read track/sect
A883 C300F1           (C:\Users\bhrou\gi):00502 [4]             addd  #$f1               ; inc sector, move to next face and move to next track
A886 C40F             (C:\Users\bhrou\gi):00503 [2]             andb  #$0f               ; keep only sector bits
A888 FDA61E           (C:\Users\bhrou\gi):00504 [6]             std   >track             ; save track/face/sector
A88B 7AA61D           (C:\Users\bhrou\gi):00505 [7]             dec   >nsect             ; counter-1
                      (C:\Users\bhrou\gi):00506         * Update load bar
A88E BDA015           (C:\Users\bhrou\gi):00507 [8]             jsr   >pulse             ; send sector pulse
A891 35F0             (C:\Users\bhrou\gi):00508 [13]            puls  x,y,u,pc
                      (C:\Users\bhrou\gi):00509         
                      (C:\Users\bhrou\gi):00510         * Default exit if disk error
A893 6E9FFFFE         (C:\Users\bhrou\gi):00511 [8]     dskerr  jmp   [$fffe]
                      (C:\Users\bhrou\gi):00512         
                      (C:\Users\bhrou\gi):00513         * Interleave 2 with a default disk format (interleave 7)
     A896             (C:\Users\bhrou\gi):00514         sclist  equ   *-1
A897 010F0D0B         (C:\Users\bhrou\gi):00515                 fcb   $01,$0f,$0d,$0b
A89B 09070503         (C:\Users\bhrou\gi):00516                 fcb   $09,$07,$05,$03
A89F 08060402         (C:\Users\bhrou\gi):00517                 fcb   $08,$06,$04,$02
A8A3 100E0C0A         (C:\Users\bhrou\gi):00518                 fcb   $10,$0e,$0c,$0a
                      (C:\Users\bhrou\gi):00519         
                      (C:\Users\bhrou\gi):00520         ;---------------------------------------
                      (C:\Users\bhrou\gi):00521         ; loader.file.unload
                      (C:\Users\bhrou\gi):00522         ;
                      (C:\Users\bhrou\gi):00523         ;---------------------------------------
                      (C:\Users\bhrou\gi):00524         ; unload a file from RAM
                      (C:\Users\bhrou\gi):00525         ;---------------------------------------
A8A7                  (C:\Users\bhrou\gi):00526         loader.file.unload
A8A7 39               (C:\Users\bhrou\gi):00527 [5]             rts
                      (C:\Users\bhrou\gi):00528         
                      (C:\Users\bhrou\gi):00529         ;---------------------------------------
                      (C:\Users\bhrou\gi):00530         ; Display messages
                      (C:\Users\bhrou\gi):00531         ;
                      (C:\Users\bhrou\gi):00532         ; X : [ptr to ascii string]
                      (C:\Users\bhrou\gi):00533         ;---------------------------------------
                      (C:\Users\bhrou\gi):00534         
                      (C:\Users\bhrou\gi):00535         * Display error message
A8A8 CEA8CD           (C:\Users\bhrou\gi):00536 [3]     err     ldu   #messloc           ; Location
A8AB 8D08             (C:\Users\bhrou\gi):00537 [7]             bsr   err2               ; Display location
A8AD 3384             (C:\Users\bhrou\gi):00538 [4]             leau  ,x                 ; Message pointer
A8AF 8D04             (C:\Users\bhrou\gi):00539 [7]             bsr   err2               ; Display message
A8B1 20FE             (C:\Users\bhrou\gi):00540 [3]     err0    bra   err0               ; Infinite loop
                      (C:\Users\bhrou\gi):00541         
                      (C:\Users\bhrou\gi):00542         * Display message
A8B3 8D06             (C:\Users\bhrou\gi):00543 [7]     err1    bsr   err3               ; Display char
A8B5 E6C0             (C:\Users\bhrou\gi):00544 [6]     err2    ldb   ,u+                ; Read char
A8B7 2AFA             (C:\Users\bhrou\gi):00545 [3]             bpl   err1               ; Next if not last
A8B9 C47F             (C:\Users\bhrou\gi):00546 [2]             andb  #$7f               ; Mask char
A8BB 7EE803           (C:\Users\bhrou\gi):00547 [4]     err3    jmp   map.PUTC           ; Display for TO - PUTC
                      (C:\Users\bhrou\gi):00548         
                      (C:\Users\bhrou\gi):00549         * Display info message and wait a keystroke
A8BE CEA8CD           (C:\Users\bhrou\gi):00550 [3]     info    ldu   #messloc           ; Location
A8C1 8DF2             (C:\Users\bhrou\gi):00551 [7]             bsr   err2               ; Display location
A8C3 3384             (C:\Users\bhrou\gi):00552 [4]             leau  ,x                 ; Message pointer
A8C5 8DEE             (C:\Users\bhrou\gi):00553 [7]             bsr   err2               ; Display message
A8C7 BDE809           (C:\Users\bhrou\gi):00554 [8]     !       jsr   map.KTST
A8CA 24FB             (C:\Users\bhrou\gi):00555 [3]             bcc   <
A8CC 39               (C:\Users\bhrou\gi):00556 [5]             rts
                      (C:\Users\bhrou\gi):00557         
                      (C:\Users\bhrou\gi):00558         * Location message
A8CD 1F2121           (C:\Users\bhrou\gi):00559         messloc fcb   $1f,$21,$21
A8D0 1F1113           (C:\Users\bhrou\gi):00560                 fcb   $1f,$11,$13        ; 3 lines (11-13)
A8D3 1B47             (C:\Users\bhrou\gi):00561                 fcb   $1b,$47            ; font : white
A8D5 1B51             (C:\Users\bhrou\gi):00562                 fcb   $1b,$51            ; background : red
A8D7 0C               (C:\Users\bhrou\gi):00563                 fcb   $0c                ; cls
A8D8 1F4CCB           (C:\Users\bhrou\gi):00564                 fcb   $1f,$4c,$4b+$80    ; locate for MO
                      (C:\Users\bhrou\gi):00565         
A8DB 2020202020492F4F (C:\Users\bhrou\gi):00566         messIO         fcs   "     I/O|Error"
     7C4572726FF2
A8E9 202020496E736572 (C:\Users\bhrou\gi):00567         messinsertdisk fcs   "   Insert disk 0"
     74206469736B20B0
     A8F8             (C:\Users\bhrou\gi):00568         messdiskid     equ *-1
                      (C:\Users\bhrou\gi):00569         
                      (C:\Users\bhrou\gi):00570         
                      (C:\Users\bhrou\gi):00571         ;---------------------------------------
                      (C:\Users\bhrou\gi):00572         ; Switch page
                      (C:\Users\bhrou\gi):00573         ;
                      (C:\Users\bhrou\gi):00574         ; B: [destination - page number]
                      (C:\Users\bhrou\gi):00575         ; U: [destination - address]
                      (C:\Users\bhrou\gi):00576         ;---------------------------------------
A8F9                  (C:\Users\bhrou\gi):00577         switchpage
A8F9 11834000         (C:\Users\bhrou\gi):00578 [5]             cmpu  #$4000             ; Skip if
A8FD 250D             (C:\Users\bhrou\gi):00579 [3]             blo   >                  ; cartridge space
A8FF 8610             (C:\Users\bhrou\gi):00580 [2]             lda   #$10
A901 9A81             (C:\Users\bhrou\gi):00581 [4]             ora   <$6081             ; Set RAM
A903 9781             (C:\Users\bhrou\gi):00582 [4]             sta   <$6081             ; over data
A905 B7E7E7           (C:\Users\bhrou\gi):00583 [5]             sta   >$e7e7             ; space
A908 F7E7E5           (C:\Users\bhrou\gi):00584 [5]             stb   >map.CF74021.DATA  ; Switch RAM page
A90B 39               (C:\Users\bhrou\gi):00585 [5]             rts
A90C CA60             (C:\Users\bhrou\gi):00586 [2]     !       orb   #$60               ; Set RAM over cartridge space
A90E F7E7E6           (C:\Users\bhrou\gi):00587 [5]             stb   >map.CF74021.CART  ; Switch RAM page
A911 39               (C:\Users\bhrou\gi):00588 [5]             rts
                      (C:\Users\bhrou\gi):00589         
                      (C:\Users\bhrou\gi):00590         
                      (C:\Users\bhrou\gi):00591         ;---------------------------------------
                      (C:\Users\bhrou\gi):00592         ; loader.dir.getFile
                      (C:\Users\bhrou\gi):00593         ;
                      (C:\Users\bhrou\gi):00594         ; input  REG : [X] file id
                      (C:\Users\bhrou\gi):00595         ; output REG : [Y] ptr to file direntry
                      (C:\Users\bhrou\gi):00596         ;---------------------------------------
                      (C:\Users\bhrou\gi):00597         ; Get file directory entry
                      (C:\Users\bhrou\gi):00598         ;
                      (C:\Users\bhrou\gi):00599         ; TODO : scale the file id in the builder,
                      (C:\Users\bhrou\gi):00600         ;        and saves a lot of instructions here
                      (C:\Users\bhrou\gi):00601         ;---------------------------------------
A912                  (C:\Users\bhrou\gi):00602         loader.dir.getFile
A912 10BEA620         (C:\Users\bhrou\gi):00603 [7]             ldy   >loader.dir
A916 3125             (C:\Users\bhrou\gi):00604 [5]             leay  sizeof{dirheader},y 
A918 1F10             (C:\Users\bhrou\gi):00605 [6]             tfr   x,d
                      (C:\Users\bhrou\gi):00606                 _lsld      ; Scale file id
A91A 58               (            _lsld):00001 [2]             lslb
A91B 49               (            _lsld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00607                 _lsld      ; to dir entry size
A91C 58               (            _lsld):00001 [2]             lslb
A91D 49               (            _lsld):00002 [2]             rola
                      (C:\Users\bhrou\gi):00608                 _lsld
A91E 58               (            _lsld):00001 [2]             lslb
A91F 49               (            _lsld):00002 [2]             rola
A920 31AB             (C:\Users\bhrou\gi):00609 [8]             leay  d,y  ; Y ptr to file direntry
A922 39               (C:\Users\bhrou\gi):00610 [5]             rts
                      (C:\Users\bhrou\gi):00611         
                      (C:\Users\bhrou\gi):00612         
                      (C:\Users\bhrou\gi):00613         ;---------------------------------------
                      (C:\Users\bhrou\gi):00614         ; loader.file.decompress
                      (C:\Users\bhrou\gi):00615         ;
                      (C:\Users\bhrou\gi):00616         ; X: [file number]
                      (C:\Users\bhrou\gi):00617         ; B: [destination - page number]
                      (C:\Users\bhrou\gi):00618         ; U: [destination - address]
                      (C:\Users\bhrou\gi):00619         ;---------------------------------------
                      (C:\Users\bhrou\gi):00620         ; uncompress a file by using zx0
                      (C:\Users\bhrou\gi):00621         ;---------------------------------------
A923                  (C:\Users\bhrou\gi):00622         loader.file.decompress
A923 3476             (C:\Users\bhrou\gi):00623 [13]            pshs  d,x,y,u
A925 BDA8F9           (C:\Users\bhrou\gi):00624 [8]             jsr   switchpage
A928 BDA912           (C:\Users\bhrou\gi):00625 [8]             jsr   loader.dir.getFile
A92B E6A4             (C:\Users\bhrou\gi):00626 [4]             ldb   direntry.bitfld,y  ; test if compressed file
A92D 2B01             (C:\Users\bhrou\gi):00627 [3]             bmi   >                  ; yes, continue
A92F 39               (C:\Users\bhrou\gi):00628 [5]             rts                      ; no, exit
A930 EC28             (C:\Users\bhrou\gi):00629 [6]     !       ldd   direntry.coffset,y ; get offset to write data
A932 30CB             (C:\Users\bhrou\gi):00630 [8]             leax  d,u                ; set x to start of compressed data
A934 3420             (C:\Users\bhrou\gi):00631 [7]             pshs  y
A936 BDA944           (C:\Users\bhrou\gi):00632 [8]             jsr   >zx0_decompress    ; decompress and set u to end of decompressed data
A939 3520             (C:\Users\bhrou\gi):00633 [7]             puls  y
A93B 8606             (C:\Users\bhrou\gi):00634 [2]             lda   #6                 ; copy last 6 bytes
A93D 302A             (C:\Users\bhrou\gi):00635 [5]             leax  direntry.cdataz,y  ; set read ptr
A93F BDA84F           (C:\Users\bhrou\gi):00636 [8]             jsr   tfrxua
A942 35F6             (C:\Users\bhrou\gi):00637 [15]            puls  d,x,y,u,pc
                      (C:\Users\bhrou\gi):00638         
                      (C:\Users\bhrou\gi):00639          INCLUDE "new-engine/compression/zx0/zx0_6809_mega.asm"
                      (new-engine/compre):00001         ; zx0_6809_mega.asm - ZX0 decompressor for M6809 - 189 bytes
                      (new-engine/compre):00002         ; Written for the LWTOOLS assembler, http://www.lwtools.ca/.
                      (new-engine/compre):00003         ;
                      (new-engine/compre):00004         ; Copyright (c) 2021 Doug Masten
                      (new-engine/compre):00005         ; ZX0 compression (c) 2021 Einar Saukas, https://github.com/einar-saukas/ZX0
                      (new-engine/compre):00006         ;
                      (new-engine/compre):00007         ; This software is provided 'as-is', without any express or implied
                      (new-engine/compre):00008         ; warranty. In no event will the authors be held liable for any damages
                      (new-engine/compre):00009         ; arising from the use of this software.
                      (new-engine/compre):00010         ;
                      (new-engine/compre):00011         ; Permission is granted to anyone to use this software for any purpose,
                      (new-engine/compre):00012         ; including commercial applications, and to alter it and redistribute it
                      (new-engine/compre):00013         ; freely, subject to the following restrictions:
                      (new-engine/compre):00014         ;
                      (new-engine/compre):00015         ; 1. The origin of this software must not be misrepresented; you must not
                      (new-engine/compre):00016         ;    claim that you wrote the original software. If you use this software
                      (new-engine/compre):00017         ;    in a product, an acknowledgment in the product documentation would be
                      (new-engine/compre):00018         ;    appreciated but is not required.
                      (new-engine/compre):00019         ; 2. Altered source versions must be plainly marked as such, and must not be
                      (new-engine/compre):00020         ;    misrepresented as being the original software.
                      (new-engine/compre):00021         ; 3. This notice may not be removed or altered from any source distribution.
                      (new-engine/compre):00022         
                      (new-engine/compre):00023         
                      (new-engine/compre):00024         ; only get one bit from stream
A944                  (new-engine/compre):00025         zx0_get_1bit       macro
                      (new-engine/compre):00026                            lsla                ; get next bit
                      (new-engine/compre):00027                            bne done@           ; is bit stream empty? no, branch
                      (new-engine/compre):00028                            lda ,x+             ; load another group of 8 bits
                      (new-engine/compre):00029                            rola                ; get next bit
A944                  (new-engine/compre):00030         done@              equ *
                      (new-engine/compre):00031                            endm
                      (new-engine/compre):00032         
                      (new-engine/compre):00033         ; get elias value
A944                  (new-engine/compre):00034         zx0_elias_bt       macro
                      (new-engine/compre):00035                            bcs done@
A944                  (new-engine/compre):00036         loop@              lsla                ; get next bit
                      (new-engine/compre):00037                            rolb                ; rotate bit into elias value
                      (new-engine/compre):00038                            lsla                ; get next bit
                      (new-engine/compre):00039                            bcc loop@           ; loop until done
                      (new-engine/compre):00040                            bne done@           ; is bit stream empty? no, branch
                      (new-engine/compre):00041                            bsr zx0_reload      ; process rest of elias until done
A944                  (new-engine/compre):00042         done@              equ *
                      (new-engine/compre):00043                            endm
                      (new-engine/compre):00044         
                      (new-engine/compre):00045         ;------------------------------------------------------------------------------
                      (new-engine/compre):00046         ; Function    : zx0_decompress
                      (new-engine/compre):00047         ; Entry       : Reg X = start of compressed data
                      (new-engine/compre):00048         ;             : Reg U = start of decompression buffer
                      (new-engine/compre):00049         ; Exit        : Reg X = end of compressed data + 1
                      (new-engine/compre):00050         ;             : Reg U = end of decompression buffer + 1
                      (new-engine/compre):00051         ; Destroys    : Regs D, Y
                      (new-engine/compre):00052         ; Description : Decompress ZX0 data (version 1)
                      (new-engine/compre):00053         ;------------------------------------------------------------------------------
                      (new-engine/compre):00054         ; Options:
                      (new-engine/compre):00055         ;
                      (new-engine/compre):00056         ;   ZX0_ONE_TIME_USE
                      (new-engine/compre):00057         ;     Defined variable to disable re-initialization of variables. Enable
                      (new-engine/compre):00058         ;     this option for one-time use of depacker for smaller code size.
                      (new-engine/compre):00059         ;       ex. ZX0_ONE_TIME_USE equ 1
                      (new-engine/compre):00060         ;
                      (new-engine/compre):00061         ;   ZX0_DISABLE_SAVE_REGS
                      (new-engine/compre):00062         ;     Defined variable to disable saving registers CC and DP. Enable
                      (new-engine/compre):00063         ;     this option for smaller code size and if calling program will take
                      (new-engine/compre):00064         ;     care of registers CC and DP.
                      (new-engine/compre):00065         ;       ex. ZX0_DISABLE_SAVE_REGS equ 1
                      (new-engine/compre):00066         ;
                      (new-engine/compre):00067         ;   ZX0_DISABLE_DISABLING_INTERRUPTS
                      (new-engine/compre):00068         ;     Defined variable to disable the disabling of interrupts. Enable
                      (new-engine/compre):00069         ;     this option if interrupts are already disable or if IRQ and FIRQ
                      (new-engine/compre):00070         ;     code won't mind register DP being changed.
                      (new-engine/compre):00071         ;       ex. ZX0_DISABLE_DISABLING_INTERRUPTS
                      (new-engine/compre):00072         ;
A944                  (new-engine/compre):00073         zx0_decompress
                      (new-engine/compre):00074                            ifndef ZX0_DISABLE_SAVE_REGS
A944 3409             (new-engine/compre):00075 [7]                        pshs cc,dp          ; save registers
                      (new-engine/compre):00076                            endc
                      (new-engine/compre):00077         
                      (new-engine/compre):00078                            ifndef ZX0_DISABLE_DISABLING_INTERRUPTS
A946 1A50             (new-engine/compre):00079 [3]                        orcc #$50           ; disable interrupts
                      (new-engine/compre):00080                            endc
                      (new-engine/compre):00081         
                      (new-engine/compre):00082                            ifndef ZX0_ONE_TIME_USE
A948 CCFFFF           (new-engine/compre):00083 [3]                        ldd #$ffff          ; init offset = -1
A94B FDAA44           (new-engine/compre):00084 [6]                        std >zx0_offset+2
                      (new-engine/compre):00085                            endc
                      (new-engine/compre):00086         
                      (new-engine/compre):00087                            ifndef ZX0_DISABLE_ALIGN
A94E 0000000000000000 (new-engine/compre):00088                            align  (*/256)*256+256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000
                      (new-engine/compre):00089                            endc
                      (new-engine/compre):00090         
     00AA             (new-engine/compre):00091         zx0_dp             equ */256
AA00 CC80AA           (new-engine/compre):00092 [3]                        ldd #($80*256)+zx0_dp  ; init bit stream and register DP
AA03 1F9B             (new-engine/compre):00093 [6]                        tfr b,dp
     AA               (new-engine/compre):00094                            setdp zx0_dp
AA05 204D             (new-engine/compre):00095 [3]                        bra zx0_literals    ; start with literals
                      (new-engine/compre):00096         
                      (new-engine/compre):00097                            ifndef ZX0_DISABLE_SAVE_REGS
AA07 3589             (new-engine/compre):00098 [9]     zx0_eof            puls cc,dp,pc       ; restore registers and exit
                      (new-engine/compre):00099                            else
AA09                  (new-engine/compre):00100         zx0_eof            equ zx0_rts         ; just exit
                      (new-engine/compre):00101                            endc
                      (new-engine/compre):00102         
                      (new-engine/compre):00103         
                      (new-engine/compre):00104         ; 1 - copy from new offset (repeat N bytes from new offset)
AA09 C601             (new-engine/compre):00105 [2]     zx0_new_offset     ldb #1              ; set elias = 1 (not necessary to set MSB)
                      (new-engine/compre):00106                            zx0_get_1bit        ; obtain MSB offset
AA0B 48               (     zx0_get_1bit):00001 [2]                        lsla                ; get next bit
AA0C 2603             (     zx0_get_1bit):00002 [3]                        bne done@           ; is bit stream empty? no, branch
AA0E A680             (     zx0_get_1bit):00003 [6]                        lda ,x+             ; load another group of 8 bits
AA10 49               (     zx0_get_1bit):00004 [2]                        rola                ; get next bit
     AA11             (     zx0_get_1bit):00005         done@              equ *
                      (new-engine/compre):00107                            zx0_elias_bt        ;  "      "   "
AA11 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AA13 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AA14 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AA15 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AA16 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AA18 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AA1A 8D76             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AA1C             (     zx0_elias_bt):00008         done@              equ *
AA1C 0F40             (new-engine/compre):00108 [6]                        clr <zx0_code+1     ; set MSB elias for below
AA1E 50               (new-engine/compre):00109 [2]                        negb                ; adjust for negative offset (set carry for RORB below)
AA1F 27E6             (new-engine/compre):00110 [3]                        beq zx0_eof         ; eof? (length = 256) if so exit
AA21 56               (new-engine/compre):00111 [2]                        rorb                ; last offset bit becomes first length bit
AA22 D744             (new-engine/compre):00112 [4]                        stb <zx0_offset+2   ; save MSB offset
AA24 E680             (new-engine/compre):00113 [6]                        ldb ,x+             ; load LSB offset
AA26 56               (new-engine/compre):00114 [2]                        rorb                ; last offset bit becomes first length bit
AA27 D745             (new-engine/compre):00115 [4]                        stb <zx0_offset+3   ; save LSB offset
AA29 C601             (new-engine/compre):00116 [2]                        ldb #1              ; set elias = 1
                      (new-engine/compre):00117                            zx0_elias_bt        ; get elias but skip first bit
AA2B 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AA2D 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AA2E 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AA2F 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AA30 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AA32 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AA34 8D5C             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AA36             (     zx0_elias_bt):00008         done@              equ *
AA36 5C               (new-engine/compre):00118 [2]     skip@              incb                ; elias = elias + 1
AA37 D741             (new-engine/compre):00119 [4]                        stb <zx0_code+2     ;  " "
AA39 2602             (new-engine/compre):00120 [3]                        bne zx0_copy        ;  " "
AA3B 0C40             (new-engine/compre):00121 [6]                        inc <zx0_code+1     ;  " "
AA3D 9F4F             (new-engine/compre):00122 [5]     zx0_copy           stx <save_x@+1      ; save reg X
AA3F 8EFFFF           (new-engine/compre):00123 [3]     zx0_code           ldx #$ffff          ; setup length
AA42 31C9FFFF         (new-engine/compre):00124 [8]     zx0_offset         leay >$ffff,u       ; calculate offset address
AA46 E6A0             (new-engine/compre):00125 [6]     loop@              ldb ,y+             ; copy match
AA48 E7C0             (new-engine/compre):00126 [6]                        stb ,u+             ;  "    "
AA4A 301F             (new-engine/compre):00127 [5]                        leax -1,x           ; decrement loop counter
AA4C 26F8             (new-engine/compre):00128 [3]                        bne loop@           ; loop until done
AA4E 8EFFFF           (new-engine/compre):00129 [3]     save_x@            ldx #$ffff          ; restore reg X
AA51 48               (new-engine/compre):00130 [2]                        lsla                ; get next bit
AA52 25B5             (new-engine/compre):00131 [3]                        bcs zx0_new_offset  ; branch if next block is new offset
                      (new-engine/compre):00132         
                      (new-engine/compre):00133         ; 0 - literal (copy next N bytes from compressed data)
AA54 C601             (new-engine/compre):00134 [2]     zx0_literals       ldb #1              ; set elias = 1
AA56 0F40             (new-engine/compre):00135 [6]                        clr <zx0_code+1     ;  "    "
                      (new-engine/compre):00136                            zx0_get_1bit        ; obtain length
AA58 48               (     zx0_get_1bit):00001 [2]                        lsla                ; get next bit
AA59 2603             (     zx0_get_1bit):00002 [3]                        bne done@           ; is bit stream empty? no, branch
AA5B A680             (     zx0_get_1bit):00003 [6]                        lda ,x+             ; load another group of 8 bits
AA5D 49               (     zx0_get_1bit):00004 [2]                        rola                ; get next bit
     AA5E             (     zx0_get_1bit):00005         done@              equ *
                      (new-engine/compre):00137                            zx0_elias_bt        ;  "      "
AA5E 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AA60 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AA61 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AA62 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AA63 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AA65 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AA67 8D29             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AA69             (     zx0_elias_bt):00008         done@              equ *
AA69 D741             (new-engine/compre):00138 [4]                        stb <zx0_code+2     ; save LSB elias
AA6B 109E40           (new-engine/compre):00139 [6]                        ldy <zx0_code+1     ; setup length
AA6E E680             (new-engine/compre):00140 [6]     loop@              ldb ,x+             ; copy literals
AA70 E7C0             (new-engine/compre):00141 [6]                        stb ,u+             ;  "    "
AA72 313F             (new-engine/compre):00142 [5]                        leay -1,y           ; decrement loop counter
AA74 26F8             (new-engine/compre):00143 [3]                        bne loop@           ; loop until done
AA76 48               (new-engine/compre):00144 [2]                        lsla                ; get next bit
AA77 2590             (new-engine/compre):00145 [3]                        bcs zx0_new_offset  ; branch if next block is new offset
                      (new-engine/compre):00146         
                      (new-engine/compre):00147         ; 0 - copy from last offset (repeat N bytes from last offset)
AA79 C601             (new-engine/compre):00148 [2]                        ldb #1              ; set elias = 1
AA7B 0F40             (new-engine/compre):00149 [6]                        clr <zx0_code+1     ;  "    "
                      (new-engine/compre):00150                            zx0_get_1bit        ; obtain length
AA7D 48               (     zx0_get_1bit):00001 [2]                        lsla                ; get next bit
AA7E 2603             (     zx0_get_1bit):00002 [3]                        bne done@           ; is bit stream empty? no, branch
AA80 A680             (     zx0_get_1bit):00003 [6]                        lda ,x+             ; load another group of 8 bits
AA82 49               (     zx0_get_1bit):00004 [2]                        rola                ; get next bit
     AA83             (     zx0_get_1bit):00005         done@              equ *
                      (new-engine/compre):00151                            zx0_elias_bt        ;  "      "
AA83 2509             (     zx0_elias_bt):00001 [3]                        bcs done@
AA85 48               (     zx0_elias_bt):00002 [2]     loop@              lsla                ; get next bit
AA86 59               (     zx0_elias_bt):00003 [2]                        rolb                ; rotate bit into elias value
AA87 48               (     zx0_elias_bt):00004 [2]                        lsla                ; get next bit
AA88 24FB             (     zx0_elias_bt):00005 [3]                        bcc loop@           ; loop until done
AA8A 2602             (     zx0_elias_bt):00006 [3]                        bne done@           ; is bit stream empty? no, branch
AA8C 8D04             (     zx0_elias_bt):00007 [7]                        bsr zx0_reload      ; process rest of elias until done
     AA8E             (     zx0_elias_bt):00008         done@              equ *
AA8E D741             (new-engine/compre):00152 [4]                        stb <zx0_code+2     ; save LSB elias
AA90 20AB             (new-engine/compre):00153 [3]                        bra zx0_copy        ; go copy last offset block
                      (new-engine/compre):00154         
                      (new-engine/compre):00155         ; interlaced elias gamma coding
AA92 A680             (new-engine/compre):00156 [6]     zx0_reload         lda ,x+             ; load another group of 8 bits
AA94 49               (new-engine/compre):00157 [2]                        rola                ; are we done?
AA95 251B             (new-engine/compre):00158 [3]                        bcs zx0_rts         ; yes, exit
AA97 48               (new-engine/compre):00159 [2]                        lsla                ; get next bit
AA98 59               (new-engine/compre):00160 [2]                        rolb                ; rotate bit into elias value
AA99 48               (new-engine/compre):00161 [2]                        lsla                ; are we done?
AA9A 2516             (new-engine/compre):00162 [3]                        bcs zx0_rts         ; yes, exit
AA9C 48               (new-engine/compre):00163 [2]                        lsla                ; get next bit
AA9D 59               (new-engine/compre):00164 [2]                        rolb                ; rotate bit into elias value
AA9E 48               (new-engine/compre):00165 [2]                        lsla                ; are we done?
AA9F 2511             (new-engine/compre):00166 [3]                        bcs zx0_rts         ; yes, exit
AAA1 48               (new-engine/compre):00167 [2]                        lsla                ; get next bit
AAA2 59               (new-engine/compre):00168 [2]                        rolb                ; rotate bit into elias value
AAA3 48               (new-engine/compre):00169 [2]                        lsla                ; are we done?
AAA4 250C             (new-engine/compre):00170 [3]                        bcs zx0_rts         ; yes, exit
                      (new-engine/compre):00171         
                      (new-engine/compre):00172         ; long elias gamma coding
AAA6 48               (new-engine/compre):00173 [2]     loop@              lsla                ; get next bit
AAA7 59               (new-engine/compre):00174 [2]                        rolb                ; rotate bit into elias value
AAA8 0940             (new-engine/compre):00175 [6]                        rol <zx0_code+1     ;  "      "   "    "     "
AAAA 48               (new-engine/compre):00176 [2]                        lsla                ; is bit stream empty?
AAAB 2603             (new-engine/compre):00177 [3]                        bne skip@           ; no, branch
AAAD A680             (new-engine/compre):00178 [6]                        lda ,x+             ; reload bit stream
AAAF 49               (new-engine/compre):00179 [2]                        rola                ; are we done?
AAB0 24F4             (new-engine/compre):00180 [3]     skip@              bcc loop@           ; no, loop again
AAB2 39               (new-engine/compre):00181 [5]     zx0_rts            rts                 ; return
                      (new-engine/compre):00182         
                      (new-engine/compre):00183         
                      (new-engine/compre):00184         ; safety check
     00AA             (new-engine/compre):00185         zx0_dp_end         equ */256
                      (new-engine/compre):00186                            ifne zx0_dp-zx0_dp_end
                      (new-engine/compre):00187                            error "zx0_decompress code crossed over DP memory space"
                      (new-engine/compre):00188                            endc
     FF               (C:\Users\bhrou\gi):00640          SETDP $ff
                      (C:\Users\bhrou\gi):00641         
                      (C:\Users\bhrou\gi):00642         
                      (C:\Users\bhrou\gi):00643         ;---------------------------------------
                      (C:\Users\bhrou\gi):00644         ; loader.file.link
                      (C:\Users\bhrou\gi):00645         ;
                      (C:\Users\bhrou\gi):00646         ;
                      (C:\Users\bhrou\gi):00647         ;---------------------------------------
AAB3                  (C:\Users\bhrou\gi):00648         loader.file.link
AAB3 39               (C:\Users\bhrou\gi):00649 [5]             rts
                      (C:\Users\bhrou\gi):00650         
     AAB4             (C:\Users\bhrou\gi):00651         loader.memoryPool equ *
